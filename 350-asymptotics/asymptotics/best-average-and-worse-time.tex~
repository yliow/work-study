\section{Best, Average, and Worse Runtime}

Now let me consider an algorithm 
when the body of the for-loop 
contains an \verb!if!-statement.

\textbf{Example.}
The following computes the index in an (unsorted) 
array \verb!x! of size \verb!n!
where \verb!target! is 
first found, i.e., this is the linear search algorithm:

(For non-programmers:
when I say array \verb!x! I mean that
you have \verb!x[0]!, \verb!x[1]!, \ldots, \verb!x[n-1]!
which is similar to the mathematical idea of 
a bunch of variables with scripts $x_0$, $x_1$, $\ldots$, $x_{n-1}$.)

\begin{Verbatim}[frame=single]
index = -1
for i = 0, 1, 2, ..., n - 1:
    if x[i] is target:
        index = i
        break
\end{Verbatim}
(For non-programmers: \verb!break! means to get out of the
current loop.)
Here's the above written in a way that makes timing calculation easier:
\begin{Verbatim}[frame=single]
                                 time   
         index = -1              t1 
         i = 0                   t2 
LOOP:    if i == n:              t3  
             goto ENDLOOP        t4 
         if x[i] is target:      t5 
             index = i           t6 
             goto ENDLOOP        t7
         i = i + 1               t8 
         goto LOOP               t9 
ENDLOOP:
\end{Verbatim}
The amount of time needed of course depends on how fast we hit \verb!target!:
if \verb!target! happens to be at index 0, of course the algorithm ends
quickly. 
This is the best case scenario.
And if \verb!target! is at index $n-1$ or if it's not even in the array,
the algorithm would run longer since you would have to scan the whole array.
These are the worse case scenarios.

Here's the timing calculation for the best scenario:
\begin{Verbatim}[frame=single,commandchars=\\\{\}]
                                 time   no. of times
         index = -1              t1     1
         i = 0                   t2     1
LOOP:    if i == n:              t3     1
             goto ENDLOOP        t4     0
         if x[i] is target:      t5     1
             index = i           t6     1 
             \textred{goto ENDLOOP}        t7     1
         i = i + 1               t8     0
         goto LOOP               t9     0
ENDLOOP:
\end{Verbatim}
The time taken is
\begin{align*}
\text{Time taken } 
&= A
\end{align*}
for some constant $A$.
In this case the constant function $f(n) = A$
is a constant multiple of the simpler function $g(n) = 1$.
Since we ignore multiples, I can say that for this 
\lq\lq optimistic'' case, the runtime is $O(1)$.
Mathemtically, I can write this:
\begin{align*}
\text{Time taken } 
&= A = O(1)
\end{align*}


For the worse case where the \verb!target! is the last element of the array,
i.e., at index \verb!n - 1!,
we have the following:
\begin{samepage}
\begin{Verbatim}[frame=single,commandchars=\\\{\}]
                                 time   no. of times
         index = -1              t1     1
         i = 0                   t2     1
LOOP:    if i == n:              t3     n
             goto ENDLOOP        t4     0
         if x[i] is target:      t5     n
             index = i           t6     1 
             \textred{goto ENDLOOP}               t7     1
         i = i + 1               t8     n - 1
         goto LOOP               t9     n - 1
ENDLOOP:
\end{Verbatim}
\end{samepage}
The time taken is
\begin{align*}
\text{Time taken } 
&= t_1 + t_2 + t_6 + t_7 + 
   n(t_3 + t_5) + 
   (n - 1) (t_3 + t_9 ) \\
&= (t_3 + t_5 + t_8 + t_9)n +
   (t_1 + t_2 + t_6 + t_7 
    - t_8 - t_9) \\ 
&= An + B
\end{align*}
for constants $A$ and $B$.
In this case the runtime function is big-O of $n$, i.e., it is 
$O(n)$.
I write:
The time taken is
\[
\text{Time taken } 
= An + B = O(n)
\]

For the worse case where the \verb!target! is not found
we have the following:
\begin{samepage}
\begin{Verbatim}[frame=single,commandchars]
                                 time   no. of times
         index = -1              t1     1
         i = 0                   t2     1
LOOP:    if i == n:              t3     n + 1
             goto ENDLOOP        t4     1
         if x[i] is target:      t5     n
             index = i           t6     0 
             \textred{goto ENDLOOP}               t7     0
         i = i + 1               t8     n
         goto LOOP               t9     n
ENDLOOP:
\end{Verbatim}
\end{samepage}
The time taken is
\begin{align*}
\text{Time taken } 
&= t_1 + t_2 + 
t_4 + 
n(t_5 + t_8 + t_9) +
(n + 1) t_3 \\
&= t_1 + 
t_2 + 
t_3 + 
t_4 + 
n(t_3 + 
t_5  + 
t_9) \\
&= An + B \\
&= O(n)
\end{align*}
for constants $A$ and $B$.
In the second worse case scenario,
the runtime function is also big-O of $n$, 
i.e., it is $O(n)$.

In summary the best runtime and the two worse runtimes are
\begin{align*}
A_1 &= O(1) \\
A_2n + B_2 &= O(n) \\
A_3n + B_3 &= O(n) 
\end{align*}

Usually performance of algorithms are described in terms of
best, worse, and average times.
If you want to lump up all the runtimes (i.e., you don't really want to
be that specific), we want to say that runtime is $O(n)$, 
referring to the absolute worse scenario.

In other words you should think of the big-O notation $O(n)$
as some kind of \textit{upper} bound approximation, i.e.,
all the above times are bounded above by a large enough multiple of $n$:
\begin{align*}
A_1        &\leq C \cdot n \\
A_2n + B_2 &\leq C \cdot n \\
A_3n + B_3 &\leq C \cdot n
\end{align*}
where $C$ is some humongous fixed number and the above inequalities
are true for large values of $n$.

While talking about a specific algorithm, to distinguish between
the best, worse, and average runtime, I will write
$T_{b}(n)$,
$T_{w}(n)$,
and
$T_{a}(n)$.
(Technically speaking there are two different worse case scenarios
for the linear search above.
But they both yield the same big-O anyway.)

If I don't say which of the three cases, I always mean the 
worse case $T_w(n)$.

I have shown you above that for the linear search
\begin{align*}
T_b(n) &= O(1) \\
T_w(n) &= O(n)
\end{align*}

The average case is a little more complicated.
In the above linear search algorithm, we looked at
three cases (one best and two worse).
But in general, the \verb!target! can be anywhere and you would have to 
account for all of them, measure their times, 
say we call them $T_0$, ..., $T_n$
where the algorithm has $n + 1$ cases
($T_0$ corresponding to the time where the \verb!target! is at index 0, ...
and $T_n$ corresponding to the time where the \verb!target! is not
in the array at all)
and then take the average:
\[
\frac{T_0 + \cdots + T_n}{n + 1}
\]
But that assume something: 
That the cases corresponding to times $T_0$, ..., $T_n$ are
equally likely to occur.

Depending on specific scenario, 
there are cases that might occur more frequently.
For instance if in the above, the case where the index 0 occurs twice
as frequently as the rest, then the average would be
\[
\frac{2T_0 + \cdots + T_n}{n + 2}
\]
To analyze the average runtime for
complicated cases require a little more probability theory.
For now we will only handle very simplisitic average cases.

In general, to compute {\it an} (not {\it the}) 
average runtime, you have to 
\begin{itemize}
\item[(1)] state what cases you're average over and 
\item[(2)] what is the likelihood of each case.
\end{itemize}
When the cases are not stated, they are usually obvious.
Also, if the likelihood of each case is not stated, then it is assumed
that all cases are equally likely.

For many algorithms and many average scenarios, 
the average runtimes tend to be
the same as the worse runtime when you fudge the functions using big-O. 

Now that I've explained how to compute the average runtime, let's
compute the average runtime of the linear search assuming that we
are only averaging over the cases where
\verb!target! is at index $0, 1, 2, ...,  n - 1$.
Note that I'm not considering the case 
where \verb!target! is not in the array.
If you like you can think of this as the 
\lq\lq average runtime for a successful search''.
(In a later section, I'll include the case where the \verb!target!
is not in the array -- this is just slightly more complicated.)

Let me assume that \verb!target! is at index value $k$
where $0 \leq k \leq n - 1$.
Here's the number of times each statement will execute in this case:
\begin{samepage}
\begin{Verbatim}[frame=single,commandchars=\\\{\}]
                                 time   no. of times
         index = -1              t1     1
         i = 0                   t2     1
LOOP:    if i == n:              t3     k + 1
             goto ENDLOOP        t4     0
         if x[i] is target:      t5     k + 1
             index = i           t6     1
             \textred{goto ENDLOOP}               t7     1
         i = i + 1               t8     k
         goto LOOP               t9     k
ENDLOOP:
\end{Verbatim}
\end{samepage}
Therefore time taken for this case is
\begin{align*}
T_k 
&= (t_1 + t_2 + t_6 + t_7) + (t_3 + t_5)(k + 1) + (t_8 + t_9)k \\
&= (t_1 + t_2 + t_3 + t_5 + t_6 + t_7) + (t_3 + t_5 + t_8 + t_9) k
\end{align*}
for $k = 0, 1, 2, ..., n - 1$.
Let $T_n$ be the time corresponding to the case where
\verb!target! is {\it not} in the array.
Earlier, I have already compute the runtime for the case where 
\verb!target! is not in the array:
\[
T_n = t_1 + t_2 + t_3 + t_4 + n(t_3 + t_5 + t_9)
\]
To simplify the constants 
(because later, we'll be computing by big-O anyway),
let
\begin{align*}
A &= t_1 + t_2 + t_3 + t_5 + t_6 + t_7 \\
B &= t_3 + t_5 + t_8 + t_9 \\
C &= t_1 + t_2 + t_3 + t_4 \\
D &= t_3 + t_5 + t_9
\end{align*}
Here's a summary:
\begin{align*}
T_k &= A + Bk, \,\,\,\,\,(k = 0, 1, 2,..., n - 1) \\
T_n &= C + Dn
\end{align*}

OK, now I'm going to compute the average runtime
assuming 
\begin{itemize}
\item the \verb!target! is in the array with equal likelihood
at all index positions.
\end{itemize}

Remember: This average runtime scenario
does {\it not} include the case where the \verb!target!
is not in array \verb!x!.
So I need to average over $T_0, \ldots, T_{n-1}$ ... 
do {\it not} include $T_n$.

This average runtime is
\begin{align*}
T_a(n) 
&= \frac{1}{n} 
   \left(
     T_0 + T_1 + \cdots + T_{n - 1} 
   \right)
\\
&= \frac{1}{n}
   \left(
     (A + B\cdot 0) + 
     (A + B\cdot 1) + 
     \cdots
     (A + B\cdot (n - 1))
   \right)
\\
&= \frac{1}{n}
   \left(
     nA + B\cdot (0 + 1 + \cdots + (n - 1))
   \right)
\\
&= \frac{1}{n}
   \left(
     nA + B \cdot \frac{n(n-1)}{2}
   \right)
\\
&= \frac{1}{n}
   \left( 
     \frac{B}{2} n^2
     + \left( A - \frac{1}{2}B \right) n
   \right)
\\
&= \frac{B}{2} n
   + \left( A - \frac{1}{2}B \right)
\\
&= O(n)
\end{align*}


That's it!



\newpage
\begin{ex}
The linear search algorithm searches from index value 0 to the
last index value.
The {\it reverse} linear search is pretty much the same as the linear
search except that it starts with the last index value and moves
toward the 0 index value.
For the following, assume as before the the array is \verb!x!
and the size of the array is \verb!n!. 
\begin{Verbatim}[frame=single]
index = -1
for i = n - 1, n - 2, ..., 1, 0:
    if x[i] is target:
        index = i
        break
\end{Verbatim}
Here's the reverse linear search algorithm with goto statements:
\begin{Verbatim}[frame=single,commandchars=\\\{\}]
                                 time   
         index = -1              t1 
         i = n - 1               t2 
LOOP:    if i == -1:             t3  
             goto ENDLOOP        t4 
         if x[i] is target:      t5 
             index = i           t6 
             \textred{goto ENDLOOP}        t7
         i = i - 1               t8 
         goto LOOP               t9 
ENDLOOP:
\end{Verbatim}

(a) Assume the best case, i.e., the \verb!target! is at index 
\verb!n - 1!.
Write down the number of times each of the statement is executed.
Compute the total runtime for this case, $T_b(n)$ and then
write down the big-O of this function.

(b) Assume the worse case where the \verb!target! is not found in the 
array.
Write down the number of times each of the statement is executed.
Compute the total runtime for this case, $T_w(n)$ and then
write down the big-O of this function.

(c) Assume the worse case where the \verb!target! is only at index 0.
Write down the number of times each of the statement is executed.
Compute the total runtime for this case, $T_w(n)$ and then
write down the big-O of this function.

(d) Assume now that \verb!target! is at index value $k$.
What is the runtime for this case? 
This should be a formula involving $k$ and the constants 
\verb!t1!, \verb!t2!, ...
(When you set $k$ to $0$, you should get the answer in (c)
and when you set $i$ to $n - 1$, you should get the answer in (a).)
Write it as a polynomial in $k$, given the coefficient of the polynomial
simple constant names $A$, $B$, ...

(e) Part (d) should give you $n$ values, say $T_0$, ..., $T_{n-1}$,
i.e., $T_k$ is the runtime for the case where the \verb!target! is at index 
\verb!k!.
Assume that all the above cases are equally likely.
Compute the average of these $n$ values to obtain
the average runtime $T_a(n)$.
[For now we'll forget about the case where \verb!target! is not in the array.]
\end{ex}



\newpage
\begin{ex}
The following algorithm
computes the maximum value in an array \verb!x! of size \verb!n!:
\begin{Verbatim}[frame=single]
M = x[0]
for i = 1, 2, ..., n - 1:
    if x[i] > M:
        M = x[i]
\end{Verbatim}
(a) Compute the best runtime where the body of the \verb!if! statement
    is never executed.

(b) Compute the worse runtime (where the body if the \verb!if! statement
    is always executed for each iteration of the loop.
\qed
\end{ex}


\newpage
\begin{ex} 
The following algorithm
computes the minimum value in an array \verb!x! of size \verb!n!:
\begin{Verbatim}[frame=single]
m = x[0]
for i = 1, 2, ..., n - 1:
    if x[i] < m:
        m = x[i]
\end{Verbatim}
(a) Compute the best runtime where the body of the \verb!if! statement
    is never executed.

(b) Compute the worse runtime (where the body of the \verb!if! statement
    is always executed for each iteration of the loop.
\qed
\end{ex}



\newpage
\begin{ex} 
The following algorithms performs some kind of shuffling
on an array \verb!x! of size \verb!n!:
\begin{Verbatim}[frame=single]
seed(0)
for i = 0, 1, 2, ..., n*n - 1:
    j = rand() % n
    k = rand() % n
    if j is not k:
        t = x[j]
        x[j] = x[i]
        x[i] = t
\end{Verbatim}
The basic idea is very simple: Pick two indices and swap the values
at those indices if the indices are different. Repeat.
\begin{itemize}
\item[(a)] Rewrite the above with goto statements.
\item[(b)] Assume that each line requires constant time.
Assign times to each statement.
\item[(c)] Compute the best runtime.
\item[(d)] Compute the big-O of the best runtime. 
\item[(e)] Compute the worse runtime.
\item[(f)] Compute the big-O of the worse runtime.
\item[(g)] Under the assumption that 1/4 of the iterations
of the for-loop has a boolean value of FALSE for the boolean expression
in the if-statement:
\begin{Verbatim}[frame=single]
    if j is not k:
\end{Verbatim}
compute the average runtime.
\item[(h)] Under the assumption that $1/n$ of the iterations
of the for-loop has a boolean value of FALSE for the boolean expression
in the if-statement:
\begin{Verbatim}[frame=single]
    if j is not k:
\end{Verbatim}
compute the average runtime.
\end{itemize}
\end{ex}

\newpage
\begin{ex}
Here's anothering shuffling. Here's I'm assuming that
the original array \verb!x! does not contain the value \verb!-1!.
I'm going to use another array \verb!y! of the same size \verb!n!.
The idea is very simple: \verb!-1! is used to denote
\lq\lq unoccupied'' in array \verb!y!.
I will put the values from \verb!x! into \verb!y!
at a random index position.
If the index position in \verb!y! is already occupied,
I will move to the next, cycling back to index 0 is necessary.
Once this is done, I copy the values in \verb!y! back to \verb!x!.
\begin{Verbatim}[frame=single]
for i = 0, 1, 2, ..., n - 1:
    y[i] = -1

seed(0)
for i = 0, 1, 2, ..., n - 1:
    j = rand() % n
    while y[j] is -1:
        j = (j + 1) % n
    y[j] = x[i]

for i = 0, 1, 2, ..., n - 1:
    x[i] = y[i]
\end{Verbatim}
\begin{itemize}
\item[(a)] Compute the best runtime of the above and then the big-O.
\item[(b)] Compute the worse runtime of the above and the big-O.
(Be careful now!!! What exactly is the worse case???)
\item[(c)] Compare the best and worse runtimes of this 
shuffling algorithm with the previous.
\end{itemize}
The translation of a while-loop into goto statements is similar to the 
for-loop. Here's the translation of the above while-loop:
\begin{Verbatim}[frame=single]
...
    while y[j] is -1:
        j = (j + 1) % n
    y[j] = x[i]
...
\end{Verbatim}
into goto statements:
\begin{Verbatim}[frame=single]
...
LOOP3:     if y[j] is not -1:
               goto ENDLOOP3
           j = (j + 1) % n
           goto LOOP3

ENDLOOP3:  y[j] = x[i]
...
\end{Verbatim}

\end{ex}

[MORE EXERCISES]
