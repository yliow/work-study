The goal is to write a simple calculator. This program will give you an
idea how string parsing and interpretation of data works in a compiler or
interpreter (which will be helpful in CISS$360$, CISS$445$, CISS$375$) and
how memory is used (which will be helpful in the above courses and also in
your understanding of pointers).

I will describe the features in stages to make it easier for you. Less hints
will be given in later stages.

\textbf{PART 1.} First when you run the program you see the following prompt:
\begin{console}
>>> 
\end{console}
When you press the enter key (i.e., you entered a blank line) you see this:
\begin{console}
>>> 
>>>
\end{console}
In other words, when you enter a blank line, the program does not compute
anything, prints the prompt again, and waits for an input. This is the same
if you enter spaces or tabs followed by pressing the enter key.

You can exit the program by typing \verb!q! (and pressing the enter key):
\begin{console}[commandchars=\\\{\}]
>>> 
>>> \underline{q}
\end{console}
(the program ends.) Note that there is a space between the input and the
prompt. In other words the prompt is \verb!">>> "! with a space after the
last \verb!>!. The following skeleton will be helpful:

\begin{Verbatim}[frame=single]
#include <iostream>

// Print prompt and get a string from user
void get_input(char input[])
{
}

int main()
{
    char input[1024] = "";

    while (1)
    {
         get_input(input); 
    }

    return 0;
}
\end{Verbatim}

\textbf{PART 2.} Besides \verb!q!, the program accepts an integer expression
with the operator \verb!+, -, /,! or \verb!*! . For instance:

\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{1+2}
3
>>> \underline{1 - 3}
-2
>>> \underline{  -3     -1}
-4
>>> \underline{2 *      5}
10
>>> \underline{4     / -2}
-2
>>> \underline{    0 - -1}
1
>>> 
\end{Verbatim}

Note that the evaluated integer value is printed. Note also that redundant
whitespaces can be included in the input. As shown in the above examples,
you must allow negative integer values.

The following skeleton can be used:

{\small
\begin{Verbatim}[frame=single]
const int PLUS = 0;
const int MINUS = 1;
const int MULT = 2;
const int DIV = 3;

// ... get_input ...

// Returns an integer value from the characters in input starting at position I
// For instance:
// 1. If the input is "123" and i is 0 (the index position of character '1', then 
// the integer 123 is returned and i is set to 4.
// 2. If the input is "123 + -456" and is 0 (the index position of character '1', 
// then the integer 123 is returned and i is set to 3.
// 3. If the input is "123 + -456" and is 5 (the index position of character ' ' 
// after the '+', then the integer -456 is returned and i is set to 10.
int get_int(char input[], int & i)
{
}

// Returns one of the following:
// * PLUS if the character in input starting at i (with whitespaces ignored) is +
// * MINUS if the character in input starting at i (with whitespaces ignored)
//   is -
// * MULT if the character in input starting at i (with whitespaces ignored) is *
// * DIV if the character in input starting at i (with whitespaces ignored) is /
// and with i set to index position just after the relevant character.
int get_op(char input[], int & i)
{
}


// Evaluates and returns x op y 
int evaluate(int x, int op, int y)
{
}


int main()
{
    while (1)
    {
        char input[1024] = "";
        get_input(input);

        int i = 0;
        int x = get_int(input, i);
        int op = get_op(input, i);
        int y = get_int(input, i);
        
        int z; // z is the result of evaluating the expression
    }

    return 0;
}
\end{Verbatim}
}

\textbf{PART 3.} Your program must also allow entering integer values.
Here are some examples:

\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{1}
1
>>> \underline{-3}
-3
>>> \underline{       123}
123
>>> \underline{    0}
0
>>> \underline{ -42}
-42
>>> 
\end{Verbatim}

Here's the skeleton code:

\begin{Verbatim}[frame=single, commandchars=\\\@\!]
// ... constants ...

// ... get_input ...
// ... get_int ...
// ... get_op
// ... evaluate ...

int main()
{
    while (1)
    {
        ...

        int z; // z is the result of the evaluating the expression, i.e.,
               // z is x op y \underline@- or - z is x!
    }

    return 0;
}
\end{Verbatim}

\textbf{PART 4.} Now, we allow users of your program to store values in memory.
The memory is modeled using an array of integers. The first integer in this
array is called \verb!%0!, the second integer in this array is called \verb!%1!,
\dots . Altogether $1024$ integers can fit in this memory. Therefore, the last
integer is \verb!%1023!. Integer values can be stored in this memory. Here are some
examples:
\begin{console}[commandchars=\\\{\}]
>>> \underline{%0 = 42}
\end{console}
This stores integer $42$ into \verb!%0!. You must also handle whitespaces.
For instance, the following commands achieve the same goal:
\begin{console}[commandchars=\\\{\}]
>>> \underline{      %0 = 42}
>>> \underline{%0     =42}
>>> \underline{%0=     42}
\end{console}
Note that when you store values into the memory, the value is not printed.
You can print the value in the memory like this (see second command below):
\begin{console}[commandchars=\\\{\}]
>>> \underline{%0 = 42}
>>> \underline{%0}
42
\end{console}

Here's the skeleton code:

\begin{Verbatim}[frame=single, commandchars=\\\@\!]
// ... constants
\underline@const MEMORY_SIZE = 1024;!

// ... get_input ...
// ... get_int ...
// ... get_op

int main()
{
    \underline@int memory[MEMORY_SIZE] = {0};!

    while (1)
    {
        ...        
    }

    return 0;
}
\end{Verbatim}

\textbf{PART 5.} You can evaluate--and--store like this: 

\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{%0 = 42 + 1}
>>> \underline{%0}
43
>>> \underline{%1 = -3 * -2}
>>> \underline{%1}
6
\end{Verbatim}

\textbf{PART 6.} You can also evaluate--and--store using memory like this:

\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{%0 = 42 + 1}
>>> \underline{%0}
43
>>> \underline{%1 = -3 * -2}
>>> \underline{%1}
6
>>> \underline{%2 = %0 + 1}
>>> \underline{%2}
44
>>> \underline{%3 = 100 - %1}
>>> \underline{%3}
94
>>> \underline{%4 = %0 / %1}
>>> \underline{%4}
7
\end{Verbatim}

Here's the skeleton code:

\begin{Verbatim}[frame=single, commandchars=\\\@\!]
// ... constants
// ... get_input ...
// ... get_int ...
// ... get_op

int main()
{
    int memory[MEMORY_SIZE] = {0};

    while (1)
    {
        ...

        int i = 0;
        int x = get_int(input, i,\underline@ memory!);
        int op = get_op(input, i);
        int y = get_int(input, i,\underline@ memory!);

        ...        
    }

    return 0;
}
\end{Verbatim}

You need not handle error checking for this program.
(Although it would be a good exercise.) For instance, you need not handle
inputs like this:
\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{123 + + + 456}
\end{Verbatim}
or
\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{1    3     5}
\end{Verbatim}
or
\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{1 +}
\end{Verbatim}
or
\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{%1 = %}
\end{Verbatim}
or
\begin{Verbatim}[frame=single, commandchars=\\\{\}]
>>> \underline{%99999}
\end{Verbatim}

Even from this simple program you can see the the complexity grows as you
allow more language features in your program. For instance, the program does
not allow multiple operators. And allowing that will introduce the question
of operator precedence.
