def run():
    
    import sys, pygame

    pygame.init()

    sys.stdout = file("stdout.txt","w")
    sys.stderr = file("stderr.txt","w")

    display = pygame.display
    w,h = 640,460
    size = (w,h)
    surface = display.set_mode(size)

    BLACK = (0,0,0)
    surface.fill(BLACK)
    display.flip()

    from random import seed, randrange
    seed()
    p0 = [20,20]
    BLACK = [0,0,0]
    color = [255,255,255]
    radius = 6

    def inc(x, dx, max, topdecay = 1, bottomdecay = 1):
        x += dx
        if x > max:
            x = 2*max - x
            dx = -dx * topdecay
        elif x < 0:
            x = -x
            dx = -dx * bottomdecay
        return x, dx

    def inc_gravity(y, dy, max):
        # scale: 1 pixel = 1 mm use 9.82/1000
        # scale: 1 pixel = 1 cm use 9.82/100
        dt = 1000/30
        dy += 9.82 /1000 * 1000/30
        return inc(y, dy, max, topdecay = 0.5)

    loop_count = 0
    objects = []
    tobjects = []
    MAX_OBJECTS = 1000
    for i in range(MAX_OBJECTS):
        p = p0[:]
        v = [randrange(4,5), randrange(0,3)-2]
        color = [128+randrange(0,128),128+randrange(0,128),128+randrange(0,128)]
        tobjects.append( [p,v,color[:]] )

    more_objects = True

    frame_rate = 1000/30

    while 1:
        #loop_count += 1
        time0 = pygame.time.get_ticks()
        for event in pygame.event.get():
            if event.type == pygame.QUIT: sys.exit()

        surface.lock()
        for [p,v,color] in objects:
            # erase
            pygame.draw.circle(surface, BLACK, p, radius, 0)
            # move point
            p[0], v[0] = inc(p[0], v[0], w - radius/2, topdecay = 0.5, bottomdecay = 0.5)
            p[1], v[1] = inc_gravity(p[1], v[1], h - radius/2)
        surface.unlock()

        # add object
        if more_objects:
            loop_count += 1
            if loop_count==5:
                loop_count = 0
                objects.append( tobjects[0] )
                tobjects.remove( tobjects[0] )
                more_objects = len(objects)<MAX_OBJECTS

        # draw object
        surface.lock()
        for [p,v,color] in objects:
            pygame.draw.circle(surface, color, p, radius, 0)
        surface.unlock()
        
        display.flip()
        
        dtime = frame_rate - (pygame.time.get_ticks() - time0)
        if dtime > 0:
            pygame.time.delay(dtime)
