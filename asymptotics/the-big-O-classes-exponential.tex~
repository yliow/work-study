\section{The big-O Classes: Exponentials}

At this points I've shown you several standard complexity classes:
\[
O(n^r), \,\,\,\,\,
O(\ln^r n), \,\,\,\,\,
O(\ln^{(r)} n)
\]
and their various products such as
\[
O(n^r \ln^s n)
\]
and their relationship such as
\[
O(n^r) \subset O(n^s) \text{ if $r < s$}
\]

There's another very important class which is used to 
bound algorithms that run with exponential time.
Here's an example:
\[
O(2^n)
\]
In general, given a constant $c$, one can talk about 
\[
O(c^n)
\]
Algorithms with exponential runtimes are really bad.
Here's a plot to give you an idea:
\begin{python}
from latextool_basic import *
p = FunctionPlot(domain='0:10', num_points=50, vars=['n','y'])
p.add('n**3', color='blue', python=1, pin='left')
p.add('2**n', color='red', python=1, pin='below')
print p
\end{python}

Let's look at $c^n$ for different values of $c$.
If $c \leq 1$, then
\[
c^n \leq 1
\]
for $n \geq 0$. Therefore
\[
O(c^n) \subset O(1)
\]

\begin{thm}\mbox{}
\begin{itemize}
\item[(a)] If $c \leq 1$, then $c^n = O(1)$. 
\item[(b)] If $1 \leq c < d$, then $O(c^n) \subset O(d^n)$
\end{itemize}
\end{thm}

It seems that $n^3$ is worse than $2^n$ for the most part.
But look at this:
\begin{python}
from latextool_basic import *
p = FunctionPlot(domain='0:14', num_points=50, vars=['n','y'])
p.add('n**3', color='blue', python=1, pin='below', pin_x=14)
p.add('2**n', color='red', python=1, pin='left', pin_x=12)
print p
\end{python}
and then this:
\begin{python}
from latextool_basic import *
p = FunctionPlot(domain='0:20', height='3in', num_points=50, vars=['n','y'])
p.add('n**3', color='blue', python=1, pin='')
p.add('2**n', color='red', python=1, pin='left', pin_x=18)
print p
\end{python}
To make matters worse, even if I give $n^3$ a huge multiple,
say I use $1000n^3$, $2^n$ still ultimate still beats $1000n^3$.
Here's the plot of $1000n^3$ and $2^n$ up to $n = 20$:
\begin{python}
from latextool_basic import *
p = FunctionPlot(domain='0:20', height='3in', num_points=40, vars=['n','y'])
p.add('1000*n**3', color='blue', python=1, pin='', num_points=20)
p.add('2**n', color='red', python=1, pin='above left', pin_x=18)
print p
\end{python}
and then up to $n = 30$ where you see $2^n$ beating
$1000n^3$ for $n \geq 24$:
\begin{python}
from latextool_basic import *
p = FunctionPlot(domain='0:25', height='3in', num_points=50, vars=['n','y'])
p.add('1000.0*n**3', color='blue', python=1, pin='', num_points=20)
p.add('2.0**n', color='red', python=1, pin='')
print p
\end{python}
In fact, no amount of \lq\lq multiple help'' you give to $n^3$
will save it from being beaten by $2^n$ for large values of
$n$.
Here's the plot of $2^n$ and $1000000n^3$ for $0 \leq n \leq 45$
with $2^n$ practically flattening $1000000n^3$:
\begin{python}
from latextool_basic import *
p = FunctionPlot(domain='0:45', height='3in', num_points=50, vars=['n','y'])
p.add('1000.0*n**3', color='blue', python=1, pin='', num_points=2)
p.add('2.0**n', color='red', python=1, pin='')
print p
\end{python}
In fact, for {\it any} constant $c > 1$, $c^n$ will alway
beat $n^d$ for any constant $d$ even if you multiply $n^d$
by a huge constant, i.e., 
for any constant $c > 1$ and any constants $d_0$ and $d_1$,
there is some constant $N$ such that
\[
|d_0 \cdot d_1^n| \leq c^n
\]
for $n \geq N$.
Of course this means
\[
|d_0 \cdot n^{d_1}| \leq 1 \cdot |c^n|
\]
for $n \geq N$ and therefore
\[
d_0 \cdot n^{d_1} = O(c^n)
\]
Therefore
\[
O(n^d) \subset O(c^n)
\]
for any constants $c > 1$ and $d$.

\begin{thm} 
For constants $c > 1$ and $d$,
\[
n^d = O(c^n)
\]
i.e.,
\[
O(n^d) \subset O(c^n)
\]

\end{thm}

{\bf Solution.}
\begin{align*}
& n^d \leq c^n \\
\iff \,\,\,\,\, & \ln n^d \leq \ln c^n \\
\iff \,\,\,\,\, & d \ln n \leq n \ln c \\
\iff \,\,\,\,\, & \left( \frac{d}{\ln c} \right) \ln n \leq n \\
\end{align*}
Since we already know that $\ln n = O(n)$, we have
\[
\alpha \ln n = O(n)
\]
for any constant $\alpha$.
In partifular for $\alpha = d/\ln c$,
\[
\left(
\frac{d}{\ln c}
\right)
\ln n = O(n)
\]
Therefore there are constants $C$ and $N$ such that
\[
\left(
\frac{d}{\ln c}
\right)
\ln n \leq Cn
\]
for $n \geq N$.
The above inequality is the same as
\[
d
\ln n \leq Cn \ln c
\]
which is the same as
\[
\ln n^d \leq C \ln c^n
\]
which is the same as 
\[
n^d \leq C c^n
\]
Hence $n^d = O(c^n)$.
\qed

Therefore we now know that exponential time algorithms in
$O(c^n)$ (of course for $c > 1$) is always worse than any
polynomial time algorithm.

It's not difficult to compare between 
exponential classes:

\begin{thm}
If $1 \leq c < d$ then
\[
O(c^n) \subset O(d^n)
\]
\end{thm}

The proof is easy.

\begin{ex}
Prove that $2^{n + 4} (n + 42)^3 = O(2^n)$.
\qed
\end{ex}

\begin{ex}
Prove that $3^{n/2} = O(2^n)$. 
\qed
\end{ex}

\begin{ex}
Prove that $\ln (n\ln n) = O(\ln n)$. 
[MORE TO LOG SECTION]
\qed
\end{ex}

[MORE EXERCISES]
