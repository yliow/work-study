\section{Traversal}

When you have an array, vector or a linked list,
you can \lq\lq travel through'' (or to traverse) the container 
from the front to the back or the back to the front
for instance when you want to print the contents of the 
container or when you want to search for a value.

In the case of a tree, there are many more ways to traverse
the container.
I'm going to focus on binary trees since it's the easiest case.
Let me illustrate 4 different traversals using this example:

\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
                a
            b       c
          d   e   f   g
         h i   k l m  
        ''',
        edges='a-b,a-c,b-d,b-e,c-f,c-g,d-h,d-i,e-k,f-l,f-m',
        )
\end{python}

The first three are called \defterm{depth first} (DF) traversals because 
they tend to dive deep down into the tree quickly.
The last one is called \defterm{breadth first} (BF) traversal
before you go down one level at a time.


\begin{itemize}

\li DF: Pre-order traversal:
Here's a memory aid: \lq\lq root, left, right''.
Here is the printing of the node  of the above tree using
pre-order traversal:
\[
a, b, d, h, i, e, k, c, f, l, m, g
\]

\li DF: In-order traversal:
In this case you do \lq\lq left, root, right''.
Here's the printing of the above tree using this method of traversal:
\[
h, d, i, b, e, k, a, l, f, m, c, g
\]

\li DF: Post-order traversal:
And for this one, use \lq\lq left, right, root:
\[
h, i, d, k, e, b, l, m, f, g, c, a
\]

\li BF: 
Breadth-first goes through the tree one level at a time.
Here's the printing the tree using breadth first traversal:
\[
a, b, c, d, e, f, g, h, i, k, l, m
\]
In this case, we are scanning left-to-right for each level.
The important is that all the nodes are processed at a level
before going down to the next level.
\end{itemize}

(There are actually many other traversals. 
You can come across them if you take the AI class, 
different traversals will impact the performance of the  
algorithms that search for an intelligent solutions.)

Here's the pseudocode for the first DF traversal:
\begin{console}
PREORDER-PRINT
INPUT: p = pointer to root of a tree

if p is NULL: 
    return
else:
    print p->key
    PREORDER-PRINT(p->left)
    PREORDER-PRINT(p->right)
\end{console}
This version uses recursion.
Here's a version that uses a stack instead:
\begin{console}
PREORDER-PRINT
INPUT: p = pointer to root of a tree

if p is NULL:
    return

let s = empty stack of pointer to node
push p onto s

while s is not empty:
    x = s.pop()
    print x->key
    if x->right is not NULL:
        push x->right onto s
    if x->left is not NULL:
        push x->left onto s
\end{console}
It's clear what the pseudocode for inorder and postorder 
should look like.

For the BF traversal, you do this:
\begin{Verbatim}[frame=single,commandchars=\\\{\}]
BREADTH-FIRST-PRINT
INPUT: p = pointer to root of a tree

if p == NULL:
    return 

let q = empty queue of pointers to node
q.enqueue(p)

while q is not empty:
    x = q.dequeue()
    print x->key
    if x->left is not NULL:
        put x->left into q
    if x->right is not NULL:
        put x->right into q  
\end{Verbatim}
