\section{Tree}

A tree is just a connected graph without cycles.
In this case, I'm talking about a tree as an undirected
graph.
You have to be careful, sometimes, a tree can also 
refer to a tree as a directed graph and acyclic.

Sometimes a special node is selected.
In this case, such a tree is sometimes called a rooted tree
(or a tree with a root).

Here's a tree (directed version):
\begin{python}
from latextool_basic import *
print graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
             a
         b   c   d
        e f  g h i j
       k l     m  
        ''',
        edges='a>b,a>c,a>d,b>e,b>f,c>g,d>h,d>i,d>j,e>k,e>l,h>m',
        )
\end{python}
\begin{itemize}
\li $a$ is the \defterm{root} of the tree.
\li $a$ has 3 \defterm{children}, i.e., $b,c,d$; 
    $a$ has a \defterm{branching factor} 
    of 3.
    Sometimes, it's convenient to number the children.
    I'll call $b$ child $0$ of $a$; $d$ is child $2$ of $a$.
\li $a$ is the \defterm{parent} of $b$.
\li $k$,$l$,$f$,$g$,$m$,$i$,$j$ are called \defterm{leaves}
    or \defterm{non-internal} nodes because
    they don't have children.
\li $a,b,c,d,e,h$ are called \defterm{non-leaf} nodes or 
    \defterm{internal} nodes because 
    each have at least one child.
\li $b$ has a \defterm{depth} of $1$, i.e., 
    the length of the path from the root to $b$
    is 1. I will also say that $b$ is at level $1$.
    A root (see $a$ above) has depth 0.
\li $b$ has a \defterm{height} of $2$, i.e., 
    the length of the longest path from 
    $b$ to a leaf is 2.
    A leaf (see $k$ above) has height 0.
\li The \defterm{height} of a tree is the height of the root of the tree.
    The above tree has a height of 3.
    The height of an empty tree is -1.
\li The root is at level 0. $b,c,d$ are at level 1. $e,f,g,h,i,j$ are at level
    2. $k,l,m$ are at level 3.
\li \defterm{Siblings} are nodes with the same parent. $b,c,d$ are siblings.
\li $u$ has \defterm{descendent} $v$ if there is a sequence of nodes 
    $u = v_0$, $v_1$, ..., $v_n = v$ where $v_i$ is the parent of $v_{i+1}$.
    $v$ is the \defterm{ancestor} of $u$ if $u$ is a descendent of $v$.
\end{itemize}
Note that the above tree is a directed graph.
The following is also a tree (as in an \textit{undirected} tree).
\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.3,
            minimum_size='10mm',
            layout='''
             a
         b   c   d
        e f  g h i j
       k l     m  
        ''',
        edges='a-b,a-c,a-d,b-e,b-f,c-g,d-h,d-i,d-j,e-k,e-l,h-m',
        )
\end{python}

In the case of implementation, you can think of the directed version
as having pointers from a parent to the children.
In the case of the undirected version, you can think of
each edge as allowing you to go both up and down -- 
nodes having pointers going to their children or parent.
Of course exceptions being that roots have no parents and leaves have no
children.

For each node of a tree $T$, if you consider all the descendents of the node, 
you have a tree. This is called a \defterm{subtree} of $T$.
For instance
\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
            yscale=1.3,
            minimum_size='10mm',
            layout='''
         b  
        e f 
       k l    
        ''',
        edges='b-e,b-f,e-k,e-l',
        )
\end{python}

is a subtree of 

\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
             a
         b   c   d
        e f  g h i j
       k l     m  
        ''',
        edges='a-b,a-c,a-d,b-e,b-f,c-g,d-h,d-i,d-j,e-k,e-l,h-m',
        )
\end{python}

I will say that this is the subtree at $b$.

In the case of a node with two child, 
there are two subtrees, the subtree on the left is called the 
\defterm{left subtree} and the one on the righ is called the 
\defterm{right subtree}.
(Duh.)
Look at the subtree at $b$:

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
         b  
        e f 
       k l    
        ''',
        edges='b-e,b-f,e-k,e-l',
        )
\end{python}

The nodes $e,k,l$ form the left subtree of $b$
and the single node $f$ form the right subtree of $b$.


A tree is said to be \defterm{$k$--ary} if every node has at most $k$ children;
that's the same as saying that every node has a maximum branching factor of
$k$.
In particular, a \defterm{binary} tree is a tree with at most 2 children.

\begin{ex}
Draw all the binary tree with 0, 1, 2, 3, 4, 5 nodes.
\qed
\end{ex}

We include the empty graph as a tree, except of course such trees
don't have roots.
Consider a $k$--ary tree $T$.
\begin{itemize}

\li $T$ is \defterm{full} if every node has exactly $k$ children, except for 
    the leaves. Here's a full binary tree:
\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
                a
            b       c
          d   e   f   g
         h i j k l m 
        ''',
        edges='a-b,a-c,b-d,b-e,c-f,c-g,d-h,d-i,e-j,e-k,f-l,f-m',
        )
\end{python}

\li $T$ is \defterm{perfect} if $T$ is full and the leaves are 
at the same level.
Here's a perfect binary tree:
\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
                a
            b       c
          d   e   f   g
         h i j k l m n o
        ''',
        edges='a-b,a-c,b-d,b-e,c-f,c-g,d-h,d-i,e-j,e-k,f-l,f-m,g-n,g-o',
        )
\end{python}
 
\li $T$ is \defterm{complete} if it's \lq\lq almost full'' 
except that the last level 
might not have all the nodes. 
Here's a complete binary tree that is not full:
\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
                a
            b       c
          d   e   f   g
         h i   k l m  
        ''',
        edges='a-b,a-c,b-d,b-e,c-f,c-g,d-h,d-i,e-k,f-l,f-m',
        )
\end{python}
\li $T$ is \defterm{balanced} if at each node,
every pair of children have heights differ by 0 or 1.
\end{itemize}

\begin{ex}
If $T$ is a balanced tree, does it mean that $T$ is complete?
If $T$ is complete, does it mean that $T$ is balanced?
\qed
\end{ex}

Let $T$ be a $k$--ary tree with height $h$ and the total 
number of nodes is $n$.
At level $\ell$,
there are at most $k^\ell$ nodes.
(Don't forget that the first level that contains only the root
is called level $0$.)
In particular for a binary tree, at level $\ell$, 
there are $2^\ell$ nodes.

Therefore if the height is $h$, $T$ can have at most
\[
k^0 + k^1 + \cdots + k^h = \frac{k^{h+1} - 1}{k-1}
\]
nodes.
(Remember your geometric sum formula?)
In particular, for a binary tree, $T$ can have at most
\[
2^{h+1} - 1
\]
nodes.
Since $T$ has $n$ nodes, we must have the following relation
between $n$ and $h$ for a $k$--ary tree:
\[
h + 1 \leq n \leq \frac{k^{h+1} - 1}{k-1}
\]
And for the case of binary tree, we have
\[
h + 1 \leq n \leq 2^{h+1}
\]

\newpage\myinput{tree/implementation.tex}
\newpage\myinput{tree/traversal.tex}

\newpage
\section{Trees and arithmetic expressions}

Trees can be used to represent arithmetic expressions.
For instance look at this:

\begin{python}
from latextool_basic import *
print graph(shape='circle',
            yscale=1.2,
            minimum_size='10mm',
            layout='''
                a
            b       c
          d   e   f   g
         h i j k l m  
        ''',
        a=r'label=\texttt{+}',
        b=r'label=\texttt{*}',
        c=r'label=\texttt{+}',
        d=r'label=\texttt{-}',
        h=r'label=\texttt{3}',
        i=r'label=\texttt{5}',
        j=r'label=\texttt{7}',
        e=r'label=\texttt{\%}',
        k=r'label=\texttt{2}',
        f=r'label=\texttt{*}',
        l=r'label=\texttt{0}',
        m=r'label=\texttt{7}',
        g=r'label=\texttt{1}',
        edges='a-b,a-c,b-d,b-e,e-j,c-f,c-g,d-h,d-i,e-k,f-l,f-m',
        )
\end{python}

The value obtained from \lq\lq evaluating'' the tree is this:
\[
\texttt{(((3 - 5) * (7 \% 2)) + ((0 * 7) + 1))}
\]

You can think of the tree as a device that can be used to describe
order of operations, or if you like, it's a device that can be 
used to play the role of parentheses.
So really, you have been doing trees since elementary school, right?

\begin{ex}
Assuming the above tree is a tree with node that contain characters,
Write a function to traverse the tree and produce the 
string
\[
\texttt{(((3 - 5) * (7 \% 2)) + ((0 * 7) + 1))}
\]
What tree traversal would you use?
\qed
\end{ex}



\newpage
\section{Some basic operations}

Here are some basic methods on a node.
Note that there are so many different variations of trees
that some of the methods might not apply for some cases.
So you have to understand the context.

The following are some basic queries (they don't modify the 
tree in any way):

\begin{console}
node.is_root()           true iff node is a root
node.is_leaf()           true iff node is a leaf
node.is_nonleaf()        true iff node is non-leaf

node.level()             level of node
node.height()            height of node
node.depth()             depth of node
node.size()              number of descendents + 1
\end{console}

Note that for instance in the case of \texttt{is\_root()},
the only way for this to be meaningful is when the node
has a parent pointer: a node is a root is the parent pointer
is \texttt{NULL}.
So if your node class does not have a parent pointer
member, then this method is not meaningful.

For querying ancestor information, you have the following:
\begin{console}
node.parent()            pointer/reference to parent
node.root()              pointer/reference to root 
\end{console}

The next two methods are related to siblings of a node.
This is usually only available if the siblings are
organized in an iterable manner such as for instance
if the siblings form a linked list.
\begin{console}
node.next()              pointer/reference to next 
                         sibling; NULL if there is no 
                         next sibling.
node.prev()              pointer/reference to previous 
                         sibling; NULL if there is no
                         previous sibling.
\end{console}
In the case where the siblings form a circular list, 
it's of course important that you don't run into an infinite loop!

For querying children related information, you might have the
following:
\begin{console}
node.num_children()      number of children
node.children()          pointer/reference to iterable
                         container with children
node.first_child()       first child (assuming children 
                         are ordered)
node.last_child()        pointer/reference to last child 
                         (assuming children are ordered)
node.child(i)            pointer/reference to the i-th 
                         child
\end{console}
Sometimes the following descendent queries are useful too:
\begin{console}
node.leftmost()          pointer/reference to leftmost
                         starting at node; for a binary
                         tree, keep following the left
                         pointer/reference
node.rightmost()         pointer/reference to rightmost
                         starting at node; for a binary
                         tree, keep following the right
                         pointer/reference
\end{console}

For insertion, look at this binary tree:

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f h j
       k l   m  
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>j,e>k,e>l,h>m',
        )
\end{python}

The most common case of insertion is as a child at a position that
is available.
For instance in the above, note that at node $l$ 
you can insert a node at the left or the right.
However note that at $h$, you can only insert at the left.
Note that the above also makes sense when the node that is
inserted is actually the root of a tree.
In the case of a $k$--ary tree, 
if child-$i$ is available, you can insert a node at that 
position.

Most tree API do not include inserting a node at a place that is not available.
Although that's entirely reasonable.
For instance there's no reason why you cannot do an insertion
right at the node $d$ with new data $o$ (i.e., it goes
between $d$ and $j$):

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f h o 
       k l   m j 
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>o,o>j,e>k,e>l,h>m',
        )
\end{python}

In this case, one has to make sure that the node $o$
has an available right position.
For instance suppose $o$ looks like this instead:

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
         o 
        p
       q r
        ''',
        edges='o>p,p>q,p>r',
        )
\end{python}

Then we can insert $o$ into the above tree (with root $a$) 
between $d$ and $j$ like this:

\begin{python}
from latextool_basic import *
print graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b    d
        e f  h   o 
       k l    m p j
               q r 
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>o,o>j,e>k,e>l,h>m,o>p,p>q,p>r',
        )
\end{python}

In the same manner, it shouldn't be too surprising that 
if we do an \lq\lq insert parent'' $o$ for $d$ in this tree:
\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f h j
       k l   m  
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>j,e>k,e>l,h>m',
        )
\end{python}

that we get this:

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   o
        e f    d 
       k l    h j
               m
        ''',
        edges='a>b,a>o,o>d,b>e,b>f,d>h,d>j,e>k,e>l,h>m',
        )
\end{python}

The above also makes sense if node $o$ has a left child.

\begin{Verbatim}[frame=single]
node.insert_parent(node2) make node2 the parent of node
                          and node2 the child of node's
                          original parent
node.insert(i, data)      create a new node for data and 
                          attach the new node as the i-th 
                          child of node. If there's already 
                          an i-th child, an exception is 
                          thrown.
node.insert(i, node2)     similar to above
node.insert_left(data)    create a new node for data and 
                          attach the new node to the left 
                          of node (this is for binary 
                          tree). If there's already a left 
                          child, an exception is thrown.
node.insert_left(node2)   Similar to above
node.insert_right(node2)  Similar to above.
\end{Verbatim}

For removal, we can
remove a single node that is a leaf.
I'll call this \verb!remove_leaf!.
Look at this:

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f h o 
       k l   m j 
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>o,o>j,e>k,e>l,h>m',
        )
\end{python}

On removing $k$ we get

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f h o 
         l   m j 
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>o,o>j,e>l,h>m',
        )
\end{python}

This is the usual node removal operation for a \textit{general} tree.

I want to add another node remove operation:
Suppose the node to be removed has only \textit{one} child,
then there's an obvious way to remove the node.
For instance look at
 
\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f h o 
       k l   m j 
        ''',
        edges='a>b,a>d,b>e,b>f,d>h,d>o,o>j,e>k,e>l,h>m',
        )
\end{python}

On removing $h$, we get

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f m o 
       k l     j 
        ''',
        edges='a>b,a>d,b>e,b>f,d>m,d>o,o>j,e>k,e>l',
        )
\end{python}

This is obviously the same even when $m$ is the root of a subtree.
Likewise, if I now remove $o$, I will get

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
  % s
\end{center}
""" % graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
           a
         b   d
        e f m j 
       k l      
        ''',
        edges='a>b,a>d,b>e,b>f,d>m,d>j,e>k,e>l',
        )
\end{python}

\begin{Verbatim}[frame=single]
node.remove_if_leaf()    remove the node if it's leaf.
                         Otherwise an exception it 
                         thrown.
node.remove_if_leaf(i)   remove the i-th child if the
                         child is a leaf.
node.remove_left_leaf()  remove left child if it is a 
                         leaf; if the left child is not a 
                         leaf, an exception is thrown.
node.remove_right_leaf() remove right child if it is a 
                         leaf; if the right child is not 
                         a leaf, an exception is thrown.

\end{Verbatim}

We can also move the whole tree by specifying the root.
Of course this includes the case of removing a subtree by specifying
the root of a subtree.

\newpage\myinput{tree/height.tex}
\newpage\myinput{tree/destructor.tex}

\newpage\myinput{tree/prefix.tex}

\newpage\myinput{tree/bst.tex}
