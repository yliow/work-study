\section{Quadtrees}

Quadtrees is a type trees used in
situations where you want to say something about closeness
of two things.
These (and many other related data structures) can be used
in games for collision detection
and they are also used in geospatial databases that is used
in geographic information systems.
I'm go focus only on quadtrees -- there are other
data structures for spatial indexing.

Suppose you have a collection of objects in a 2D space.
One common question to ask is when a pair (or more) of these
objects collided.
For simplicity, you can think of these objects are
rectangles (or circles, etc.)
The simplistic way for pairwise collection detection
is to perform a double for-loop on the objects
and check when they collde.
This has a runtime of $O(n^2)$.

Here's another way:
You think of a 2D area of your game (the whole window)
as a container of your game objects.
Suppose the window area is
$[0, 1000] \times [0, 1000]$
and there are 5 game objects:
\begin{python}
from latextool_basic import *
from latexcircuit import *
p = Plot()
p += Rect(x0=0, y0=0, x1=5, y1=5)
p += Rect(x0=0-0.4,x1=0-0.4,y0=4.5,y1=4.7,linewidth=0,label=r'$A$')
for i,(x,y) in enumerate([(1,1),(4.5,4),(1,4),(2,3),(2.5, 1.5)]):
   p += Rect(x0=x-0.1,x1=x+0.1,y0=y-0.1,y1=y+0.1,background='black')
    p += Rect(x0=x-0.4,x1=x-0.4,y0=y,y1=y,
              linewidth=0,label=r'$p_{%s}$' % i)
      
print p
\end{python}
If there are too many game objects, say more than
$t = 4$, then you divide your
window into 4 equal size subwindows and distribute the game objects
into the appropriate subwindows of the game object is completely in a
subwindow.
If the game object is not completely in a subwindow, it stays in the
parent window.
\begin{python}
from latextool_basic import *
from latexcircuit import *
p = Plot()
rect = Rect(x0=0, y0=0, x1=5, y1=5)
p += rect
p += Rect(x0=0-0.4,x1=0-0.4,y0=4.5,y1=4.7,linewidth=0,label=r'$A$')
for i,(x,y) in enumerate([(1,1),(4.5,4),(1,4),(2,3),(2.5, 1.5)]):
    p += Rect(x0=x-0.1,x1=x+0.1,y0=y-0.1,y1=y+0.1,background='black')
    p += Rect(x0=x-0.4,x1=x-0.4,y0=y,y1=y,
              linewidth=0,label=r'$p_{%s}$' % i)

p += Line(points=[rect.left(), rect.right()])
p += Line(points=[rect.top(), rect.bottom()])

print p
\end{python}

Conceptually, as a tree, 
\begin{python}
from latextool_basic import *
from latexcircuit import *
p = Plot()
rect = Rect(x0=0, y0=0, x1=5, y1=5)
p += rect
p += Rect(x0=0-0.4,x1=0-0.4,y0=4.5,y1=4.7,linewidth=0,label=r'$A$')
for i,(x,y) in enumerate([(1,1),(4.5,4),(1,4),(2,3),(2.5, 1.5)]):
    if i != 4: continue
    p += Rect(x0=x-0.1,x1=x+0.1,y0=y-0.1,y1=y+0.1,background='black')
    p += Rect(x0=x-0.4,x1=x-0.4,y0=y,y1=y,
              linewidth=0,label=r'$p_{%s}$' % i)

p += Line(points=[rect.left(), rect.right()])
p += Line(points=[rect.top(), rect.bottom()])

x0,y0 = (-3,-4)
rect0 = Rect(x0=x0,x1=x0+2.5,y0=y0,y1=y0+2.5)
p += rect0
for i,(x,y) in enumerate([(1,4),(2,3)]):
    x = x + x0
    y = y + y0 - 2.5
    p += Rect(x0=x-0.1,x1=x+0.1,y0=y-0.1,y1=y+0.1,background='black')
    p += Rect(x0=x-0.4,x1=x-0.4,y0=y,y1=y,
              linewidth=0,label=r'$p_{%s}$' % (i + 2))

x0,y0 = (x0+3,y0)
rect1 = Rect(x0=x0,x1=x0+2.5,y0=y0,y1=y0+2.5)
p += rect1
for i,(x,y) in enumerate([(4.5,4)]):
    x = x + x0 - 2.5
    y = y + y0 - 2.5
    p += Rect(x0=x-0.1,x1=x+0.1,y0=y-0.1,y1=y+0.1,background='black')
    p += Rect(x0=x-0.4,x1=x-0.4,y0=y,y1=y,
              linewidth=0,label=r'$p_{%s}$' % (i+1))

x0,y0 = (x0+3,y0)
rect2 = Rect(x0=x0,x1=x0+2.5,y0=y0,y1=y0+2.5)
p += rect2

x0,y0 = (x0+3,y0)
rect3 = Rect(x0=x0,x1=x0+2.5,y0=y0,y1=y0+2.5)
p += rect3
for i,(x,y) in enumerate([(1,1)]):
    x = x + x0
    y = y + y0 - 0.5
    p += Rect(x0=x-0.1,x1=x+0.1,y0=y-0.1,y1=y+0.1,background='black')
    p += Rect(x0=x-0.4,x1=x-0.4,y0=y,y1=y,
              linewidth=0,label=r'$p_{%s}$' % i)

p0,p1 = shorten(rect.bottom(), rect0.top(), 0.9)
p += Line(points=[p0,p1])
p0,p1 = shorten(rect.bottom(), rect1.top(), 0.9)
p += Line(points=[p0,p1])
p0,p1 = shorten(rect.bottom(), rect2.top(), 0.9)
p += Line(points=[p0,p1])
p0,p1 = shorten(rect.bottom(), rect3.top(), 0.9)
p += Line(points=[p0,p1])

print p
\end{python}
Once $A$ has children, when a game object is placed in $A$,
if it is completely in one of the four subwindows, it is sent in  the
relevant subwindow for recursive insert.
If the game object intersects the boundary (look at the cross
in the window of $A$), then it stays in $A$.

Once a subwindow (again) has more than $t$ game objects.
you give this subwindow four children and repeat the distribution
of game objects into the children of the subwindow.

Once every game objects is distributed,
for the computation of collision detection,
you only need to check among the game objects in each leaf
subwindow, except that there might be game objects in the parent node.

$t$ is called the \defterm{threshold} of this quadtree.

To prevent building a tree that's has too many nodes,
you can also include a \defterm{maximum depth} in the nodes.
Say you want to limit the tree to maximum depth of 10.
Then once a node has reached a depth of 10, the node will not
expand into children nodes.
(Recall that the root has a depth of 0.)

Here are some obvious member variables each node of the tree should
have:
\begin{tightlist}
  \li The geometry of the window: \verb!minx!, \verb!maxx!, \verb!miny!, \verb!maxy!
  \li Threshold (the $t$ from above)
  \li Depth of this node
  \li Maximum depth
  \li Array of pointers to game objects (it's probably best to use
  \verb!std::vector!, otherwise you would also need to have a
  size variable)
\end{tightlist}
Note that the threshold and maximum depth are both applied throughout the
whole tree and therefore should probably be in the quad tree and not the quad
tree node.
Note that, of course, the quadtree must have access to the geometry/shape
of the game objects to know which subwindow a game object fits into.
It's convenient to have the following in a quad tree node:
\begin{tightlist}
  \li A method to return the index of the child a game object should go into.
  \li A boolean member variable that tells you if the node has children.
\end{tightlist}

A quad tree object has a pointer to the root node.
Besides that, you might also want the threshold and the maximum depth
in the quad tree.
Obviously methods includes a destructor, copy constructor, \verb!operator=!.
Besides that, of course you need to insert
(the pointer of) game objects into the tree.
Once all the (pointers of) game objects are placed in the quad tree,
you can start computing potential collisions groups.
This is done in two different ways:
\begin{itemize}
  \li Either get the quad tree to return
  a collection of \textit{all} colliding groups.
  The return type is \texttt{std::vector< std::vector< GameObject * > >}.
  (In general, a collision involves not just a pair of game objects.
  Depending on what you want to achieve in your game,
  in some cases, it is sufficient to compute \textit{pairs} of
  colliding game objects.)

  \li Or you might want to get 
  a collection of game objects colliding with \textit{a given
  game object}.
  The return type is \texttt{std::vector< GameObject * >}.
\end{itemize}

A quad tree has many uses besides game collision detection.
It is for instance used in computer graphics, image processing,
robotics, etc.
(which is natural since a quad tree is a spatial data structure).

[Note: Instead of rebuilding the whole quad tree for each
game loop, you can also update the quad tree. If the the space
is each cell is sufficiently large, the game object will
usually not change from one cell to another.
For this case, you would need to know if the (pointer of the) game object
has already been inserted into the quad tree or not.
If it's already in the quad tree, then it's an update operation.
However, the location of (pointer of) the game object in the quad tree
depends on the position of the game object during the last insert/update.
Therefore (and this is very important), each game object that is
updating its location in the quad tree
should contain the previous position and the current
The previous location allows you to find that game object in the
quad tree. Once the game object is found, if the current location
does not require the game object to move to a different quad tree node,
then nothing is done.
Otherwise it is deleted and then re-inserted into the
quad tree. Deleting of nodes in a quad tree is more complicated --
if the number of pointers in all children of node $n$
plus all the pointers in $n$ is $\leq$ threshold, then
all these pointers can go to $n$ and all the children nodes can be
deleted. However, it's possible that all these nodes might be re-created
again some time in the future.]

% We can also have a directory linked a game object pointer to a quad tree
% node pointer. Note that a game object can be later distributed into a
% child. So if $(g, n)$ is in this directory, g leads to a node n, but
% one might need to search in the subtree rooted at n in order to find g.

%\begin{ex}
%Recall that the distribution of data in a quad tree node
%to its children nodes is done for points not on the boundary
%of the subdivision -- the data on the boundary
%stays in the parent node.
%\end{ex}

\begin{ex}
  Based on what was described above, when computing
  collisions, do you need to check a node
  it's grandparent?
\end{ex}
  
\begin{ex}
The quadtree is for subdividing a 2D space (a rectangular area).
The same idea can also be applied to an octtree where
a cube is divided into 8 equal sub-cubes in the obvious way.
Implement an octtree.
\end{ex}


\begin{comment}

The computation of checking pairs occurs in the leaves.
But some objects are some ancestor nodes too.
Therefore for the path from the root to the leaves must
collect up the game objects in the ancestor nodes.

collisions:
    
    input:
        node
        ptrs = game object pointers from ancestors

    if self is leaf:
        return colliding pairs among (nodes.ptrs + ptrs)
    else:
        collision_groups = []
        collision_groups += collisions(node.child0, ptrs + node.ptrs)
        collision_groups += collisions(node.child0, ptrs + node.ptrs)
        collision_groups += collisions(node.child0, ptrs + node.ptrs)
        collision_groups += collisions(node.child0, ptrs + node.ptrs)
        return collision_groups
\end{comment}

\section{kd trees}
