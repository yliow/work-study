\section{Application: prefix tree}

A \defterm{prefix tree} or a \defterm{trie} is a tree for storing data with
lots of common prefixes.
What instance the word \texttt{cat} and \texttt{cab}
share a common prefix of \texttt{ca}.

As an example, say I want to store a list of words
in lowercase.
I use this
\begin{console}
class Node
{
public:
    char flag;
    Node * v[26];
};
\end{console}
Note that each node has 26 pointers, i.e., 26 edges going
to 26 children, each pointer corresponding to one fo the lower case letter.
Say I want to store the words \texttt{cab}, \texttt{cat}, \texttt{catch}.
Here's the picture:
\begin{python}
from latextool_basic import graph
print r'''
\begin{center}
%s
\end{center}
''' % graph(layout='''
 A
 B
 C
D E
  F
  G
''',
minimum_size='8mm',
edges='A>B,B>C,C>D,C>E,E>F,F>G',
A=r"label=''",
B=r'label=$$',
C=r'label=$$',
D=r'label=$\texttt{*}$',
E=r'label=$\texttt{*}$',
F=r'label=$\texttt{}$',
G=r'label=$\texttt{*}$',
edge_label={('A','B'):{'label':r'\texttt{c}'},
('B','C'):{'label':r'\texttt{a}'},
('C','D'):{'label':r'\texttt{b}', 'style':'pos=0.8,above,inner sep=3mm,circle'},
('C','E'):{'label':r'\texttt{t}'},
('E','F'):{'label':r'\texttt{c}'},
('F','G'):{'label':r'\texttt{h}'},
#('A','D'):{'label':'a very very long label'},
#('C','E'):{'label':'5', 'style':'pos=0.5,above'},
#('C','F'):{'label':'5', 'style':'pos=0.5,below'},
#('F','G'):{'label':'5', 'style':'pos=0.5,above,inner sep=1mm,circle'},
#('F','H'):{'label':'5', 'style':'pos=0.5,below,inner sep=1mm,circle'},
#('G','I'):{'label':'abcdef', 'style':'sloped'},
},
)
\end{python}
What this means is that from the root node, say I call it
\verb!r!, there's an edge corresponding
to a pointer \verb!r.v[2]! (2 corresponding to \texttt{c})
that points to a node, say I call it \texttt{s}.
\texttt{s.v[0]} (0 corresponding to \texttt{a})
pointing to a node, say I call it \texttt{t}.
Etc.
If the node's flag is \texttt{*}, then it means that
I've reached a word when I start from the root.

When I draw this this edge between the lowest two nodes:

\begin{python}
from latextool_basic import *
print r'''
\begin{center}
%s
\end{center}
''' % graph(layout='''
 A
 B
''',
minimum_size='8mm',
edges='A>B',
A=r"label=",
B=r"label=\texttt{*}",
edge_label={('A','B'):{'label':r'\texttt{h}'},
},
)
\end{python}

I mean this:

\begin{python}
from latextool_basic import *
p = Plot()

def cross(p, r):
    p += Line(points=[r.topleft(), r.bottomright()], linewidth=0.01)
    p += Line(points=[r.topright(), r.bottomleft()], linewidth=0.01)
    
c = RectContainer(x=0, y=0)
for x in ['' for _ in range(26)]:
    c += Rect2(x0=0, y0=0, x1=0.25, y1=0.25,
         label='', linewidth=0.01)

p += c
x0,y0 = c.bottomleft(); x0 -= 0.25; y0 -=0.25
x1,y1 = c.topright(); x1 += 0.25; y1 += 0.25
r0 = Rect2(x0=x0, y0=y0, x1=x1, y1=y1)
p += r0

for i in range(26):
    if i != 7:
        cross(p, c[i])
        
w = y1 - y0
r1 = Rect2(x0=x0 - w, y0=y0, x1=x0, y1=y1, label=r"\texttt{' '}")
p += r1


d = RectContainer(x=0, y=-2)
for x in ['' for _ in range(26)]:
    d += Rect2(x0=0, y0=0, x1=0.25, y1=0.25,
         label='', linewidth=0.01)

p += d
x0,y0 = d.bottomleft(); x0 -= 0.25; y0 -=0.25
x1,y1 = d.topright(); x1 += 0.25; y1 += 0.25
r0 = Rect2(x0=x0, y0=y0, x1=x1, y1=y1)
p += r0

for i in range(26):
    cross(p, d[i])

w = y1 - y0
r2 = Rect2(x0=x0 - w, y0=y0, x1=x0, y1=y1, label=r"\texttt{'*'}")
p += r2

x0,y0 = c[7].center()
x1,y1 = r2.top()
p += Line(points=[(x0,y0), (x0,y1)], endstyle='>')

print p
\end{python}

i.e., each node has a character and a vector of 26 pointers.
The node at the top has a character value of \verb!' '! and for the vector
of pointers, 25 of them at \texttt{NULL} while the
pointer at index 7 (which corresponds to character \texttt{h})
points to the next node which contains a character value of \texttt{*}
a vector of 26 pointers, all of which are \texttt{NULL}.

Get it? Neat right?

Note that the prefix above is a 26-ary tree since
each edge corresponds to one of the lowecase letter.
(If you want lower and upper case, then it's a 52-ary tree.)

\begin{ex}
Build a prefix tree for \texttt{cab}, \texttt{cat} and
\texttt{catch} using the class above.
Do it with this function:
\begin{Verbatim}[frame=single]
void insert(Node ** p, const std::string & word);
\end{Verbatim}
Write a function that accepts a string (use
\texttt{std::string}) and checks if the word
is stored in the prefix tree.
In other words when you call the function with \texttt{cat}
it returns \texttt{true};
if you call the function with \texttt{cas} is returns \texttt{false}.
Here's an appropriate prototype:
\begin{Verbatim}[frame=single]
bool is_found(const Node * const, const std::string &);
\end{Verbatim}
\qed
\end{ex}

\begin{ex}
In case you added a wrong word, you want to be able to remove a
\lq\lq word''. So do this:
\begin{Verbatim}[frame=single]
void delete(Node ** p; const std::string & word);
\end{Verbatim}
Fail silently, i.e., if you attempt to delete a word not in the
prefix tree, don't throw an exception.
Also, reclaim memory as much as you can. For instance in the above
prefix tree:
\begin{python}
from latextool_basic import graph
print r'''
\begin{center}
%s
\end{center}
''' % graph(layout='''
 A
 B
 C
D E
  F
  G
''',
minimum_size='8mm',
edges='A>B,B>C,C>D,C>E,E>F,F>G',
A=r'label=$$',
B=r'label=$$',
C=r'label=$$',
D=r'label=$\texttt{*}$',
E=r'label=$\texttt{*}$',
F=r'label=$\texttt{}$',
G=r'label=$\texttt{*}$',
edge_label={('A','B'):{'label':r'\texttt{c}'},
('B','C'):{'label':r'\texttt{a}'},
('C','D'):{'label':r'\texttt{b}', 'style':'pos=0.8,above,inner sep=3mm,circle'},
('C','E'):{'label':r'\texttt{t}'},
('E','F'):{'label':r'\texttt{c}'},
('F','G'):{'label':r'\texttt{h}'},
#('A','D'):{'label':'a very very long label'},
#('C','E'):{'label':'5', 'style':'pos=0.5,above'},
#('C','F'):{'label':'5', 'style':'pos=0.5,below'},
#('F','G'):{'label':'5', 'style':'pos=0.5,above,inner sep=1mm,circle'},
#('F','H'):{'label':'5', 'style':'pos=0.5,below,inner sep=1mm,circle'},
#('G','I'):{'label':'abcdef', 'style':'sloped'},
},
)
\end{python}
if you delete the word \texttt{catch}, the
memory model of the prefix tree should be
\begin{python}
from latextool_basic import graph
print r'''
\begin{center}
%s
\end{center}
''' % graph(layout='''
 A
 B
 C
D E
''',
minimum_size='8mm',
edges='A>B,B>C,C>D,C>E',
A=r"label=''",
B=r"label=''",
C=r"label=''",
D=r'label=$\texttt{*}$',
E=r'label=$\texttt{*}$',
edge_label={('A','B'):{'label':r'\texttt{c}'},
('B','C'):{'label':r'\texttt{a}'},
('C','D'):{'label':r'\texttt{b}', 'style':'pos=0.8,above,inner sep=3mm,circle'},
('C','E'):{'label':r'\texttt{t}'},
#('A','D'):{'label':'a very very long label'},
#('C','E'):{'label':'5', 'style':'pos=0.5,above'},
#('C','F'):{'label':'5', 'style':'pos=0.5,below'},
#('F','G'):{'label':'5', 'style':'pos=0.5,above,inner sep=1mm,circle'},
#('F','H'):{'label':'5', 'style':'pos=0.5,below,inner sep=1mm,circle'},
#('G','I'):{'label':'abcdef', 'style':'sloped'},
},
)
\end{python}
In particular, the node that the edge labeled \texttt{t} reaches
has a vector of 26 \verb!NULL! pointers.
It's not enough just to make the character in the node that the
ledge labeled \texttt{h} leads to with a space.
\qed
\end{ex}

\newpage
Because words in English (and many other languages too)
contains lots of common prefixes,
this is a very efficient way of storing words
and therefore can be used to create dictionaries.

Not only that, this is also how
word autocompletion works inside programs.
If you type part of a word into a software, the program
can sometimes give you a list of options to complete the word
once the number of options is small enough.
How does it know?
Well, as you type, the program walks down the above
tree.
From where you stop typing,
it can perform a traversal of the subtree where
the root corresponds to where you stopped.
In the traversal, when it sees a \texttt{*}
it knows that it's a word (from the root of the subtree to that node). 
Therefore the program can collect a list of
words with the same prefix as what you have typed.
The program then shows you the options.
Neat right?

\begin{ex}
Continuing the above
exercise,
write a function that
gives you a list of word completion.
if you call the function with \texttt{ca}
it returns an array (use \texttt{std::vector})
containing \texttt{cat} and \texttt{catch}.
\qed
\end{ex}

\begin{ex}
Download a dictionary file from the web.
Convert all uppercase to lowercase.
How many bytes are there in the file.
Next, build a prefix tree and then compute the
amount of memory used.
How much memory do you save?
\qed
\end{ex}

Instead of having a vector for pointers where there's one pointer
\textit{every} character \texttt{a..z},
you can have a vector of (character, pointer)  only for characters that
are actually used.
In that case the root node in the above prefix tree has only
one pointer and not 26.
However this will slow you down when you look for the word.
You can use a sorted \texttt{std::vector} to speed up the search.
This will of course save you on memory.
This is again the story of the life of algorithms:
it's always about the balance between speed and memory.
