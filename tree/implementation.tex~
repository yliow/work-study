\section{Implementation}


There are many different ways to implement a tree node.
\begin{tightlist}
  \li The node might or might not have a pointer back to the parent. (And as stated
  in class the parent pointer is usually not necessary.)
  \li The children (or rather pointers to the children nodes) can be
  collected together in different ways.
  For instance they can form an array, a vector or a linked list (singly linked or doubly
  linked). If the maximum number of children (i.e., the branching factor)
  is small, then sometimes you can have a number of pointer instance variables
  directly attached to the node object rather than putting the pointers
  into a container.
  This is usually the case for binary trees.
\end{tightlist}

\newpage
\subsection{Vector of children}

For a general tree, one way to implement a tree node is to this:
\begin{console}
class Node 
{
private:
    int key_;
    std::vector< Node * > child_;
};
\end{console}
(Of course instead of keeping an \verb!int! for each node, you might
want to keep other values.)
The \verb!child_! member variable will allow a node to point to any number
of children.

For the case of a $k$--ary tree, if $k$ is small,
instead of using some kind of container class, 
it's also common to use a fixed size array:
\begin{console}
const int k = 4;
class Node 
{
private:
    int key_;
    Node * child_[k];
};
\end{console}
Of course in the case when a node does not have a \lq\lq child 2'',
then \verb!child_[2]! is \verb!NULL!.

In the case of a binary tree, it's common to see this:
\begin{console}
class Node 
{
private:
    int key_;
    Node * left_;
    Node * right_;
};
\end{console}

\newpage
\begin{ex}
Here a tree (the first one in this section):
\begin{python}
from latextool_basic import *
print graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
             a
         b   c   d
        e f  g h i j
       k l     m  
        ''',
        edges='a>b,a>c,a>d,b>e,b>f,c>g,d>h,d>i,d>j,e>k,e>l,h>m',
        )
\end{python}
The key values are characters.
Construct the above tree with this
\begin{Verbatim}[frame=single]
class Node
{
private:
    char key_;
    std::vector< Node * > child_;
}
\end{Verbatim}


Here's a picture of the memory model (using the given class)
representing the node with key \verb!'a'!.

\begin{python}
from latextool_basic import *
WIDTH = HEIGHT = 0.6 # for main cells
PWIDTH = PHEIGHT = 0.3 # for pointers

def node(x, y, s):
    xs = []
    xs.append(Rect2(x0=x, y0=y, x1=x+WIDTH, y1=y+HEIGHT, label=r'{\texttt{%s}}' % s))
    xs.append(Rect2(x0=x+WIDTH, y0=y, x1=x+2*WIDTH, y1=y+HEIGHT, label=''))
    xs.append(Rect2(x0=x+WIDTH+0.25*WIDTH, y0=y+0.25*HEIGHT, x1=x+2*WIDTH-0.25*WIDTH, y1=y+HEIGHT-0.25*HEIGHT, label=''))
    return xs

def ptrarr(x, y, n):
    xs = []
    for i in range(n):
        xs.append(Rect2(x0=x+PWIDTH*i, y0=y, x1=x+PWIDTH*(i+1), y1=y+PHEIGHT, label=''))
    return xs

def cross(p, r):
    p += Line(points=[r.topleft(), r.bottomright()])
    p += Line(points=[r.topright(), r.bottomleft()])
    
def node_arr(p, x, y, s, n):
    xs = node(x, y, s)
    p += xs[0]; p += xs[1]; p += xs[2]
    x,y = xs[2].bottomleft()
    ys = ptrarr(x + 1, y, n)
    for i in range(n): p += ys[i]
    if n > 0:
        p += Line(points=[xs[2].center(), ys[0].left()], endstyle='>')
    else:
        cross(p, xs[2])
    return xs + ys

p = Plot()

rects = {}
rects['a'] = node_arr(p, 0, 0, 'a', 3)

print p
\end{python}


The first box is holds the key value -- the box is \texttt{key\_}.
The second box is \texttt{child\_} which is a \texttt{std::vector} object
which of course models a dynamic array and therefore
contains a pointer to an array (of \texttt{Node *} values).
The first pointer of this dynamic array  of pointers points to a node with key value
\verb!'b'!,
the second points to a node with key value \verb!'c'!, and 
the third points to a node with key value \verb!'d'!.



Here's part of the memory model of the above tree:

\begin{python}
from latextool_basic import *
WIDTH = HEIGHT = 0.6 # for main cells
PWIDTH = PHEIGHT = 0.3 # for pointers

def node(x, y, s):
    xs = []
    xs.append(Rect2(x0=x, y0=y, x1=x+WIDTH, y1=y+HEIGHT, label=r'{\texttt{%s}}' % s))
    xs.append(Rect2(x0=x+WIDTH, y0=y, x1=x+2*WIDTH, y1=y+HEIGHT, label=''))
    xs.append(Rect2(x0=x+WIDTH+0.25*WIDTH, y0=y+0.25*HEIGHT, x1=x+2*WIDTH-0.25*WIDTH, y1=y+HEIGHT-0.25*HEIGHT, label=''))
    return xs

def ptrarr(x, y, n):
    xs = []
    for i in range(n):
        xs.append(Rect2(x0=x+PWIDTH*i, y0=y, x1=x+PWIDTH*(i+1), y1=y+PHEIGHT, label=''))
    return xs

def cross(p, r):
    p += Line(points=[r.topleft(), r.bottomright()])
    p += Line(points=[r.topright(), r.bottomleft()])
    
def node_arr(p, x, y, s, n):
    xs = node(x, y, s)
    p += xs[0]; p += xs[1]; p += xs[2]
    x,y = xs[2].bottomleft()
    ys = ptrarr(x + 1, y, n)
    for i in range(n): p += ys[i]
    if n > 0:
        p += Line(points=[xs[2].center(), ys[0].left()], endstyle='>')
    else:
        cross(p, xs[2])
    return xs + ys

p = Plot()

rects = {}
rects['a'] = node_arr(p, 0, 0, 'a', 3)
rects['b'] = node_arr(p, -4, -2, 'b', 2)
rects['e'] = node_arr(p, -6, -4, 'e', 2)
rects['f'] = node_arr(p, -3, -4, 'f', 0)

x0,y0 = rects['a'][3].center()
x1,y1 = rects['b'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')


# b->e
x0,y0 = rects['b'][3].center()
x1,y1 = rects['e'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')
# b->f
x0,y0 = rects['b'][4].center()
x1,y1 = rects['f'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')


print p
\end{python}


The pointers in the node with keys \verb!'f'! is \verb!NULL!
since the \verb!std::vector! inside the node models array of size 0,
i.e., I'm assuming that the pointer in the \verb!std::vector! objects
have not been allocated memory yet.

Complete the picture. Solution on next page.

\newpage

\begin{python}
from latextool_basic import *
WIDTH = HEIGHT = 0.6 # for main cells
PWIDTH = PHEIGHT = 0.3 # for pointers

def node(x, y, s):
    xs = []
    xs.append(Rect2(x0=x, y0=y, x1=x+WIDTH, y1=y+HEIGHT, label=r'{\texttt{%s}}' % s))
    xs.append(Rect2(x0=x+WIDTH, y0=y, x1=x+2*WIDTH, y1=y+HEIGHT, label=''))
    xs.append(Rect2(x0=x+WIDTH+0.25*WIDTH, y0=y+0.25*HEIGHT, x1=x+2*WIDTH-0.25*WIDTH, y1=y+HEIGHT-0.25*HEIGHT, label=''))
    return xs

def ptrarr(x, y, n):
    xs = []
    for i in range(n):
        xs.append(Rect2(x0=x+PWIDTH*i, y0=y, x1=x+PWIDTH*(i+1), y1=y+PHEIGHT, label=''))
    return xs

def cross(p, r):
    p += Line(points=[r.topleft(), r.bottomright()])
    p += Line(points=[r.topright(), r.bottomleft()])
    
def node_arr(p, x, y, s, n):
    xs = node(x, y, s)
    p += xs[0]; p += xs[1]; p += xs[2]
    x,y = xs[2].bottomleft()
    ys = ptrarr(x + 1, y, n)
    for i in range(n): p += ys[i]
    if n > 0:
        p += Line(points=[xs[2].center(), ys[0].left()], endstyle='>')
    else:
        cross(p, xs[2])
    return xs + ys

p = Plot()

rects = {}
rects['a'] = node_arr(p, 0, 0, 'a', 3)
rects['b'] = node_arr(p, -4, -2, 'b', 2)
rects['c'] = node_arr(p, 0, -2, 'c', 1)
rects['d'] = node_arr(p, 3, -2, 'd', 3)
rects['e'] = node_arr(p, -6, -4, 'e', 2)
rects['f'] = node_arr(p, -3, -4, 'f', 0)
rects['g'] = node_arr(p,  0, -4, 'g', 0)
rects['h'] = node_arr(p,  2, -4, 'h', 1)
rects['i'] = node_arr(p,  5, -4, 'i', 0)
rects['j'] = node_arr(p,  7, -4, 'j', 0)
rects['k'] = node_arr(p, -7, -6, 'k', 0)
rects['l'] = node_arr(p, -5, -6, 'l', 0)
rects['m'] = node_arr(p,  2, -6, 'm', 0)

x0,y0 = rects['a'][3].center()
x1,y1 = rects['b'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

x0,y0 = rects['a'][4].center()
x1,y1 = rects['c'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

x0,y0 = rects['a'][5].center()
x1,y1 = rects['d'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

# b->e
x0,y0 = rects['b'][3].center()
x1,y1 = rects['e'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')
# b->f
x0,y0 = rects['b'][4].center()
x1,y1 = rects['f'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

# h -> m
x0,y0 = rects['h'][3].center()
x1,y1 = rects['m'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

# c -> g
x0,y0 = rects['c'][3].center()
x1,y1 = rects['g'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

# e -> k,l
x0,y0 = rects['e'][3].center()
x1,y1 = rects['k'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')
x0,y0 = rects['e'][4].center()
x1,y1 = rects['l'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

# d -> h,i,j
x0,y0 = rects['d'][3].center()
x1,y1 = rects['h'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')
x0,y0 = rects['d'][4].center()
x1,y1 = rects['i'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')
x0,y0 = rects['d'][5].center()
x1,y1 = rects['j'][0].topright()
p += Line(points=[(x0,y0), (x0,y0-0.5), (x1,y1)], endstyle='>')

print p
\end{python}


\begin{ex}
First add an obvious constructor to this class.
Assume that the values in all the \verb!child_!
vectors are not \texttt{NULL}.
Add a method \texttt{child(int)} that does the obvious (see
the code below).
The three nodes on the bottom left of the above diagram is
already constructed for you.


\begin{Verbatim}[frame=single]
int main()
{
    Node * nk = new Node('k');
    Node * nl = new Node('l');
    Node * ne = new Node('e');
    ne->child(0) = nk; // i.e., ne->child_[0] = nk
    ne->child(1) = nl; // i.e., ne->child_[1] = nl
    
    return 0;
}
\end{Verbatim}
\qed
\end{ex}
\end{ex}



\newpage
\subsection{List of children}

Depending on how the children 
are going to be processed, 
you might want to use something other than 
\verb!std::vector!.
For instance, here's another option:
\begin{console}
class Node 
{
private:
    int key_;
    std::list< Node * > child_;
};
\end{console}
where a node has a doubly-linked list of 
pointers to \verb!Node!.
You can also use circular list.
In the case of the undirected version (think of an edge
as bi-directional so that it allows one to go up or down the tree), 
you might see this:
\begin{console}
class Node 
{
private:
    int key_;
    Node * parent_;
    std::list< Node * > child_;
};
\end{console}
Frequently, it's not necessary to keep information on how to get back to 
the parent in the node since most tree 
computations start with the root and when you 
\lq\lq go down'', you keep information of the parents (i.e. where
you came from) somewhere such as a stack.

\begin{ex}
Here a tree (the first one in this section):
\begin{python}
from latextool_basic import *
print graph(shape='circle',
        yscale=1.3,
        minimum_size='10mm',
        layout='''
             a
         b   c   d
        e f  g h i j
       k l     m  
        ''',
        edges='a>b,a>c,a>d,b>e,b>f,c>g,d>h,d>i,d>j,e>k,e>l,h>m',
        )
\end{python}


The key values are characters.
Construct the above tree with this
\begin{Verbatim}[frame=single]
class Node
{
private:
int key_;
std::list< Node * > child_;
}
\end{Verbatim}

The following diagram shows the memory model when the above class
is used to model the tree:

\begin{python}
from latextool_basic import *

SIZE = 0.5
LENGTH = 1.5

def dlnode(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=SIZE, y1=SIZE, label=r'{\texttt{%s}}' % '')
    c += Rect2(x0=0, y0=0, x1=SIZE, y1=SIZE, label=r'{\texttt{%s}}' % s)
    c += Rect2(x0=0, y0=0, x1=SIZE, y1=SIZE, label=r'{\texttt{%s}}' % '')
    return c

def cross(r):
    return Line(points=[r.topleft(), r.bottomright()]), Line(points=[r.topright(), r.bottomleft()])

def next(n0, n1):
    return Line(points=[n0[2].center(), n1[0].left()], endstyle='>')

def prev(n1, n0):
    x0,y0 = n1[0].center()
    y = y0 - 0.5
    x1,y1 = n0[2].bottom()
    return Line(points=[(x0,y0), (x0,y), (x1,y), (x1,y1)], endstyle='>')

def dllist(p, x=0, y=0, k='', xs=[]):
    r = []
    oldx = x
    oldy = y
    if xs != []:
        for key in xs:
            n = dlnode(x, y, key)
            r.append(n)
            p += n
            x += 2
        for i,x in enumerate(xs):
            if i < len(xs) - 1:
                p += next(r[i], r[i+1])
            if i > 0:
                p += prev(r[i], r[i-1])
        l0, l1 = cross(r[0][0]); p += l0; p += l1
        l0, l1 = cross(r[-1][2]); p += l0; p += l1
        x1,y1 = r[-1].topright()
        p += Rect(x0=oldx-0.25, y0=oldy-0.5, x1=x1+0.25, y1=y1+0.25)
    else:
        p += Rect(x0=oldx-0.25, y0=oldy-0.5, x1=oldx-0.25+0.25, y1=oldy+0.75)
    s = Rect(x0=oldx-0.25-0.5, y0=oldy-0.5, x1=oldx-0.25, y1=oldy+0.75,
        label=r'\texttt{%s}' % k)
    p += s
    r.append(s) 
    return r

p = Plot()
a = dllist(p, x=3, y=0, k='a', xs=['', '', ''])
b = dllist(p, x=0, y=-2, k='b', xs=['', ''])
c = dllist(p, x=5, y=-2, k='c', xs=[''])
d = dllist(p, x=8, y=-2, k='d', xs=['','',''])
e = dllist(p, x=0, y=-4, k='e', xs=['',''])
f = dllist(p, x=5, y=-4, k='f', xs=[])
g = dllist(p, x=6.25, y=-4, k='g', xs=[])
h = dllist(p, x=8, y=-4, k='h', xs=[''])
i = dllist(p, x=11.25, y=-4, k='i', xs=[])
j = dllist(p, x=13.25, y=-4, k='j', xs=[])
k = dllist(p, x=1.25, y=-6, k='k', xs=[])
l = dllist(p, x=3.25, y=-6, k='l', xs=[])
m = dllist(p, x=9.25, y=-6, k='m', xs=[])

def arr(p0, p1):
    x0, y0 = p0
    x1, y1 = p1
    return Line(points=[(x0,y0), (x0,y0-1), (x1,y0-1), (x1,y1)], endstyle='>')
    
p += arr(a[0].center(), b[-1].top())
p += arr(a[1].center(), c[-1].top())
p += arr(a[2].center(), d[-1].top())

p += arr(b[0].center(), e[-1].top())
p += arr(b[1].center(), f[-1].top())

p += arr(c[0].center(), g[-1].top())

p += arr(e[0].center(), k[-1].top())
p += arr(e[1].center(), l[-1].top())

p += arr(d[0].center(), h[-1].top())
p += arr(d[1].center(), i[-1].top())
p += arr(d[2].center(), j[-1].top())

p += arr(e[1].center(), l[-1].top())

p += arr(h[0].center(), m[-1].top())

print p
\end{python}

Each node is representation by a box containing two boxes
where the first box contains the value of the key and the second
box contains a doubly linked list.
For the doubly linked list, I'm not drawing the pointer to
head and pointer to tail just to simplify the diagram.
If the linked list is empty, I draw the second box empty.

\qed
\end{ex}


\newpage
\subsection{Binary trees}

Recall that for the case of a $k$--ary tree,
if $k$ is small,
instead of using some kind of container class, 
it's also common to use a fixed size array:
\begin{console}
const int k = 4;
class Node 
{
private:
    int key_;
    Node * child_[k];
};
\end{console}
Now in the case of a \textit{binary} tree,
instead of using an array of only two pointers for the children, 
it's common to see this:
\begin{console}
class Node 
{
private:
    int key_;
    Node * parent_;
    Node * left_;
    Node * right_;
};
\end{console}
i.e., you hardcode the pointers (to children) into the node object.

\begin{ex}
Start with this node class:
\begin{console}
class Node
{
private:
    int key_;
    Node * parent_;
    Node * left_;
    Node * right_;
};
\end{console}

In the case of $k$--ary tree node when you have an array for the children pointers,
of course you can loop over children pointers.
For binary tree nodes like the above, you can't but this is not a problem
since we usually do not loop over them anyway.

\end{ex}
Write a constructor so that you can do this:
\begin{console}
Node * p2 = new Node(2);
\end{console}
and this
\begin{console}
Node * p2 = new Node(2, parent_pointer);
\end{console}
and this
\begin{console}
Node * p2 = new Node(2, parent_pointer,
                     left_child_ptr, right_child_ptr);
\end{console}

\begin{comment}
It should look like this:
\begin{console}
...
    Node(int key=0,
         Node * parent=NULL,
         Node * left=NULL, Node * right=NULL)
        : key_(key),
          parent_(parent),
          left_(left), right_(right)
    {}
...
\end{console}
\end{comment}
If a \verb!node! is an object of the above class, 
when you do
\begin{Verbatim}[commandchars=\\\{\},frame=single]
std::cout << node << std::endl;
\end{Verbatim}
you will get this output:
{\small
\begin{Verbatim}[frame=single, commandchars=\\\{\}]
<Node 0x97900b0 key_:5, parent_:0, left_:0x9790050, right_:0x9790068>
\end{Verbatim}
}



\newpage
\subsection{Tree class}

Of course once you have the definition of a tree node, 
the important things left would be how to link up the nodes
(just like the case of linked lists, double or single),
how to delete nodes, 
how to run through the tree to search for things, etc.

Now, it's not too shocking that if you have a class for the 
tree, you just need to have access to the root of the tree:
{\small
\begin{Verbatim}[frame=single]
class Tree
{
private:
    Node * root;
};
\end{Verbatim}
}

Since it's just a single node (or pointer or reference to a node),
frequently, you won't see tree classes at all.
Many books or data structure libraries will just have tree node classes
and have function/methods attached to the node class.
However if you have a tree class, then you can store tree-level
information in a tree object.
For instance
{\small
\begin{Verbatim}[frame=single]
class Tree
{
private:
    Node * root;
    int size_;
};
\end{Verbatim}
}
where \verb!size_! contains the number of nodes in the tree.
There are also tree level operations (instead of node level operations)
that you attach to a tree class.
For instance you can have a node level comparison operator
{\small
\begin{Verbatim}[frame=single]
class TreeNode
{
public:
    ...
    bool & operator=(const TreeNode & n) const
    {
        ...
    }
    ...
};
\end{Verbatim}
}
and a class
level comparison operator
{\small
\begin{Verbatim}[frame=single]
class Tree
{
public:
    ...
    bool operator==(const Tree & t) const
    {
        ...
    }
    ...
};
\end{Verbatim}
}
In this case, the assignment operator at the node level,
say you compute \texttt{n1 == n2},
then this is the same as comparing the key or \texttt{n1}
again the key of \texttt{n2}.
However the comparison operator at the tree level,
say you have the boolean expression \texttt{t1 == t2},
will have to compare the tree structure of \texttt{t1}
(i.e., the layout of the nodes)
against the structure of \texttt{t2} and at the
same time comparing their keys.

In some cases where a tree is self-organizing, you only need to
specify values to be added or to be removed from whole tree.
(Example: binary search trees, AVL trees, quadtrees, etc. See later notes.).
In those cases have a tree class is very helpful.
You would envision that a tree is used like this:
\begin{console}
Tree tree;
tree.insert(5);
tree.insert(7);
tree.insert(2);
tree.insert(0);
...
tree.insert(42);
\end{console}
This is similar to for instance a stack or queue which are self-organizing data
structures.

There are however many cases where you have to manually
decide where to attach nodes:
\begin{console}
Tree tree;
...
Node * p = tree.find(42);
if (p->left() == NULL)
{
    p->insert_left(51);  
}
\end{console}
For instance in the case of expression trees (trees from
expressions like \texttt{1 + 2 * 3}),
you have to build the tree in a specific way.
You can just insert \texttt{2}, insert \texttt{+}, etc.
You have to use a specific algorithm to build the expression tree yorself.
