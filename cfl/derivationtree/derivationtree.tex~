\section{Derivation Trees}

Just from playing around with some grammars you see that it's possible to 
derive a string from a CFG in different ways, i.e., the sequence of rules used
can be different and yet produce the same string.

Here's a simple example:
\begin{align*}
S &\rightarrow TU \\
T &\rightarrow aTb \st \ep \\
U &\rightarrow bUa \st \ep \\
\end{align*}
For instance the string $abba$ can be produced in the following ways:
\[
S \implies TU  \implies aTbU \implies abU \implies abbUa \implies abba
\]
and
\[
S \implies TU  \implies TbUa \implies Tba \implies aTbba \implies abba
\]
One way to illustrate the derivations is to draw a parse tree (or derivation
tree). For the derivation
\[
S \implies TU  \implies aTbU \implies abU \implies abbUa \implies abba
\]
the parse tree is

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (U1) at (9.5,-1.5) {$U$};
\node[state] (S1) at (7.0,0.0) {$S$};
\node[state] (T2) at (4.5,-3.0) {$T$};
\node[state] (T1) at (4.5,-1.5) {$T$};
\node[state] (a1) at (3.0,-3.0) {$a$};
\node[state] (b1) at (6.0,-3.0) {$b$};
\node[state] (b2) at (8.0,-3.0) {$b$};
\node[state] (b3) at (11.0,-3.0) {$b$};
\node[state] (U2) at (9.5,-3.0) {$U$};
\node[state] (e1) at (4.5,-4.5) {$\ep$};
\node[state] (e2) at (9.5,-4.5) {$\ep$};

\path[-]
(S1) edge [bend left=0,pos=0.5,below] node {} (T1)
(S1) edge [bend left=0,pos=0.5,above] node {} (U1)
(T1) edge [bend left=0,pos=0.5,below] node {} (T2)
(T1) edge [bend left=0,pos=0.5,below] node {} (a1)
(T1) edge [bend left=0,pos=0.5,above] node {} (b1)
(T2) edge [bend left=0,pos=0.5,below] node {} (e1)
(U1) edge [bend left=0,pos=0.5,below] node {} (U2)
(U1) edge [bend left=0,pos=0.5,below] node {} (b2)
(U1) edge [bend left=0,pos=0.5,above] node {} (b3)
(U2) edge [bend left=0,pos=0.5,below] node {} (e2)
;
\end{tikzpicture}
\end{center}

I don't need to explain how to draw the parse tree, right?
Anyway the parse tree of the other derivation
\[
S \implies TU  \implies TbUa \implies Tba \implies aTbba \implies abba
\]
is also the same tree. 

\begin{ex}
Write down a derivation for $ab^3a^2$ for the above CFG.
For your derivation, draw the parse tree.
\end{ex}

We can think of the two above derivations are more or less the same.
The point is that the products following does not really interact or affect 
the productions following $U$: They are really in different {\it subtrees} of
the parse trees

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (U1) at (9.5,-1.5) {$U$};
\node[state] (S1) at (7.0,0.0) {$S$};
\node[state] (T2) at (4.5,-3.0) {$T$};
\node[state] (T1) at (4.5,-1.5) {$T$};
\node[state] (a1) at (3.0,-3.0) {$a$};
\node[state] (b1) at (6.0,-3.0) {$b$};
\node[state] (b2) at (8.0,-3.0) {$b$};
\node[state] (b3) at (11.0,-3.0) {$b$};
\node[state] (U2) at (9.5,-3.0) {$U$};
\node[state] (e1) at (4.5,-4.5) {$\ep$};
\node[state] (e2) at (9.5,-4.5) {$\ep$};

\path[-]
(S1) edge [bend left=0,pos=0.5,below] node {} (T1)
(S1) edge [bend left=0,pos=0.5,above] node {} (U1)
(T1) edge [bend left=0,pos=0.5,below] node {} (T2)
(T1) edge [bend left=0,pos=0.5,below] node {} (a1)
(T1) edge [bend left=0,pos=0.5,above] node {} (b1)
(T2) edge [bend left=0,pos=0.5,below] node {} (e1)
(U1) edge [bend left=0,pos=0.5,below] node {} (U2)
(U1) edge [bend left=0,pos=0.5,below] node {} (b2)
(U1) edge [bend left=0,pos=0.5,above] node {} (b3)
(U2) edge [bend left=0,pos=0.5,below] node {} (e2)
;
\end{tikzpicture}
\end{center}

where one of the subtree (the left one) is




\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (a1) at (3.0,-1.5) {$a$};
\node[state] (T2) at (4.5,-1.5) {$T$};
\node[state] (e1) at (4.5,-3.0) {$\ep$};
\node[state] (b1) at (6.0,-1.5) {$b$};
\node[state] (T1) at (4.5,0.0) {$T$};

\path[-]
(T1) edge [bend left=0,pos=0.5,below] node {} (T2)
(T1) edge [bend left=0,pos=0.5,below] node {} (a1)
(T1) edge [bend left=0,pos=0.5,above] node {} (b1)
(T2) edge [bend left=0,pos=0.5,below] node {} (e1)

;
\end{tikzpicture}
\end{center}
    

and the other is

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (a1) at (3.0,-1.5) {$b$};
\node[state] (T2) at (4.5,-1.5) {$U$};
\node[state] (e1) at (4.5,-3.0) {$\ep$};
\node[state] (b1) at (6.0,-1.5) {$b$};
\node[state] (T1) at (4.5,0.0) {$U$};

\path[-]
(T1) edge [bend left=0,pos=0.5,below] node {} (T2)
(T1) edge [bend left=0,pos=0.5,below] node {} (a1)
(T1) edge [bend left=0,pos=0.5,above] node {} (b1)
(T2) edge [bend left=0,pos=0.5,below] node {} (e1)

;
\end{tikzpicture}
\end{center}

The only difference between the two derivations is only in the choice of which 
part of the subtree to expand first to get to terminals.
Therefore in that sense drawing parse trees for derivation is the right thing
to do if we really want to distinguish between derivations.

Of course to fix the way we write derivations (in other words to limit the 
number of derivations so as to avoid confusion), we can say that we want to
always work on subtrees from left to right.
That would correspond to always performing derivation on the leftmost variable
of a sentential form.
We call such a derivation a \textbf{leftmost} derivation.
For the above derivations, this one:
\[
S \implies TU \implies ATbU \implies abU \implies abbUa \implies abba
\] 
is a leftmost derivation. (Right?)

\begin{ex}
Consider the following CFG:
\begin{align*}
S &\rightarrow TU \st UT \\
T &\rightarrow aTb \st S \st \ep \\
U &\rightarrow bUa \st \ep
\end{align*}
Now suppose you're given the following derivation/parse tree:

    

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (e1) at (3.5,-4.5) {$\ep$};
\node[state] (U1) at (3.5,-1.5) {$U$};
\node[state] (S1) at (6.5,0.0) {$S$};
\node[state] (T2) at (3.5,-3.0) {$T$};
\node[state] (T3) at (9.0,-3.0) {$T$};
\node[state] (U3) at (11.0,-7.5) {$U$};
\node[state] (T1) at (9.0,-1.5) {$T$};
\node[state] (a1) at (2.0,-3.0) {$a$};
\node[state] (a3) at (12.5,-7.5) {$a$};
\node[state] (a2) at (7.5,-3.0) {$a$};
\node[state] (b1) at (5.0,-3.0) {$b$};
\node[state] (b2) at (10.5,-3.0) {$b$};
\node[state] (b3) at (9.5,-7.5) {$b$};
\node[state] (U2) at (11.0,-6.0) {$U$};
\node[state] (S2) at (9.0,-4.5) {$S$};
\node[state] (T4) at (7.0,-6.0) {$T$};
\node[state] (e3) at (11.0,-9.0) {$\ep$};
\node[state] (e2) at (7.0,-7.5) {$\ep$};

\path[-]
(S1) edge [bend left=0,pos=0.5,above] node {} (T1)
(S1) edge [bend left=0,pos=0.5,below] node {} (U1)
(S2) edge [bend left=0,pos=0.5,below] node {} (T4)
(S2) edge [bend left=0,pos=0.5,above] node {} (U2)
(T1) edge [bend left=0,pos=0.5,below] node {} (T3)
(T1) edge [bend left=0,pos=0.5,below] node {} (a2)
(T1) edge [bend left=0,pos=0.5,above] node {} (b2)
(T2) edge [bend left=0,pos=0.5,below] node {} (e1)
(T3) edge [bend left=0,pos=0.5,below] node {} (S2)
(T4) edge [bend left=0,pos=0.5,below] node {} (e2)
(U1) edge [bend left=0,pos=0.5,below] node {} (T2)
(U1) edge [bend left=0,pos=0.5,below] node {} (a1)
(U1) edge [bend left=0,pos=0.5,above] node {} (b1)
(U2) edge [bend left=0,pos=0.5,below] node {} (U3)
(U2) edge [bend left=0,pos=0.5,above] node {} (a3)
(U2) edge [bend left=0,pos=0.5,below] node {} (b3)
(U3) edge [bend left=0,pos=0.5,below] node {} (e3)
;
\end{tikzpicture}
\end{center}
    
    
Write down a left derivation that produces the above tree.
How many left derivations can produce this tree?
Now do the same for right derivations.
\end{ex}

A derivation where the rightmost variable is always chosen to 
be \lq\lq processed'' is called a \textbf{rightmost} derivation (duh).

Some books use the following notation to indicate that the 
derivation is done using leftmost derivations:
\[
S \implies_{\hskip-0.2cm lm}\,\,\, TU \implies_{\hskip-0.2cm lm}\,\,\, \cdots
\]
(lm = leftmost).

Look at the above grammar.
If we fix derivations so that we only talk about {\it leftmost} derivations,
it should be easy to see that for each string generate by the CFG, 
there is exactly one derivation. (Same for rightmost.)
Correct?
Think about it and doodle with a couple of examples to see why.

That seems to settle all confusion of multiple derivations for a 
single string ... or does it???

Consider the grammar
\[
E \rightarrow E+E \st E*E \st a
\]
Let's derive the string $a * a + a$.
Here's one way of doing that:
\[
E \implies E+E \implies E*E+E \implies a*E+E \implies a*a+E \implies a*a+a
\]
(Exercise: Check the above derivation is leftmost.)
Here's the derivation tree for the above derivation:

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (S1) at (2.0,-3.0) {$*$};
\node[state] (a1) at (8.0,-3.0) {$a$};
\node[state] (a3) at (3.5,-4.5) {$a$};
\node[state] (a2) at (0.5,-4.5) {$a$};
\node[state] (E5) at (3.5,-3.0) {$E$};
\node[state] (E4) at (0.5,-3.0) {$E$};
\node[state] (E1) at (5.0,0.0) {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)
(E2) edge [bend left=0,pos=0.5,below] node {} (E4)
(E2) edge [bend left=0,pos=0.5,above] node {} (E5)
(E2) edge [bend left=0,pos=0.5,below] node {} (S1)
(E3) edge [bend left=0,pos=0.5,below] node {} (a1)
(E4) edge [bend left=0,pos=0.5,below] node {} (a2)
(E5) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}
    
Here's another derivation:
\[
E \implies E*E \implies a*E \implies a*E+E \implies a*a+E \implies a*a+a
\]
(Exercise: Check that the above derivation is leftmost.)
Let's draw the derivation tree:

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (8.0,-3.0) {$+$};
\node[state] (S1) at (5.0,-1.5) {$*$};
\node[state] (a1) at (2.0,-3.0) {$a$};
\node[state] (a3) at (9.5,-4.5) {$a$};
\node[state] (a2) at (6.5,-4.5) {$a$};
\node[state] (E5) at (9.5,-3.0) {$E$};
\node[state] (E4) at (6.5,-3.0) {$E$};
\node[state] (E1) at (5.0,0.0) {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (S1)
(E2) edge [bend left=0,pos=0.5,below] node {} (a1)
(E3) edge [bend left=0,pos=0.5,below] node {} (E4)
(E3) edge [bend left=0,pos=0.5,above] node {} (E5)
(E3) edge [bend left=0,pos=0.5,below] node {} (P1)
(E4) edge [bend left=0,pos=0.5,below] node {} (a2)
(E5) edge [bend left=0,pos=0.5,below] node {} (a3)
;
\end{tikzpicture}
\end{center}
    
Whoa ... the two trees look different.
In a sense, the two different sequences of rules applied (even when we are 
doing a leftmost derivation) are fundamentally different.

So what? Other than being an academic curiosity ...

Recall that regular expressions can be used to match string patterns.
CFG can be used to model arithmetic expressions (like the above).
The very important point to remember is this:
as you walk state to state starting from the start state and ending
with the accept state of a DFA, you consume character at each step;
the character will ultimately make up the string accepted by the DFA if an 
accept state is reached.
The special thing about CFG is that as you go from derivation to derivation,
a variable can be replaced by a string (not just a character).
So in the above example we have:
\[
E \rightarrow E + E
\]
You can (and should!!!) think of string productions in CFG's (in each 
production step) as expansion in {\it two} directions - left and right.
\[
... V ... \implies ...[\leftarrow V \rightarrow] ...
\]
Think for a moment of our first grammar
\[
S \implies aSb \implies aaSbb \implies aaa S bbb
\]
It is because of this that CFG's can be used to model arithmetic expressions.
So for instance the first derivation above game us this tree
\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (S1) at (2.0,-3.0) {$*$};
\node[state] (a1) at (8.0,-3.0) {$a$};
\node[state] (a3) at (3.5,-4.5) {$a$};
\node[state] (a2) at (0.5,-4.5) {$a$};
\node[state] (E5) at (3.5,-3.0) {$E$};
\node[state] (E4) at (0.5,-3.0) {$E$};
\node[state] (E1) at (5.0,0.0) {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)
(E2) edge [bend left=0,pos=0.5,below] node {} (E4)
(E2) edge [bend left=0,pos=0.5,above] node {} (E5)
(E2) edge [bend left=0,pos=0.5,below] node {} (S1)
(E3) edge [bend left=0,pos=0.5,below] node {} (a1)
(E4) edge [bend left=0,pos=0.5,below] node {} (a2)
(E5) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}
you can ask 
\lq\lq What is the value of the expression $a * a + a$ using this tree''.
Well ... in an expression containing several operators, the operator 
precedence is important.
For the above derivation tree, when viewed as evaluating a mathematical
expression (not just as a string anymore), the resulting expression is obtained
by going from the bottom symbols up the tree.
For instance (just to be concrete) if I replace by $a$ by the number 
(not string) $2$ and $*$ and $+$ by multiplication and addition, then
\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (S1) at (2.0,-3.0) {$*$};
\node[state] (a1) at (8.0,-3.0) {$2$};
\node[state] (a3) at (3.5,-4.5) {$2$};
\node[state] (a2) at (0.5,-4.5) {$2$};
\node[state] (E5) at (3.5,-3.0) {$E$};
\node[state] (E4) at (0.5,-3.0) {$E$};
\node[state] (E1) at (5.0,0.0) {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)
(E2) edge [bend left=0,pos=0.5,below] node {} (E4)
(E2) edge [bend left=0,pos=0.5,above] node {} (E5)
(E2) edge [bend left=0,pos=0.5,below] node {} (S1)
(E3) edge [bend left=0,pos=0.5,below] node {} (a1)
(E4) edge [bend left=0,pos=0.5,below] node {} (a2)
(E5) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}

becomes

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (S1) at (2.0,-3.0) {$*$};
\node[state] (a1) at (8.0,-3.0) {$2$};
\node[state] (E5) at (3.5,-3.0) {$2$};
\node[state] (E4) at (0.5,-3.0) {$2$};
\node[state] (E1) at (5.0,0.0)  {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)
(E2) edge [bend left=0,pos=0.5,below] node {} (E4)
(E2) edge [bend left=0,pos=0.5,above] node {} (E5)
(E2) edge [bend left=0,pos=0.5,below] node {} (S1)
(E3) edge [bend left=0,pos=0.5,below] node {} (a1)

;
\end{tikzpicture}
\end{center}

and then

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (a1) at (8.0,-3.0) {$2$};
\node[state] (E1) at (5.0,0.0)  {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$2*2$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)
(E3) edge [bend left=0,pos=0.5,below] node {} (a1)

;
\end{tikzpicture}
\end{center}

and then


\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (a1) at (8.0,-1.5) {$2$};
\node[state] (E1) at (5.0,0.0)  {$E$};
\node[state] (E2) at (2.0,-1.5) {$2*2$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (a1)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)

;
\end{tikzpicture}
\end{center}

and finally
\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (E1) at (5.0,0.0)  {$(2*2)+2$};

;
\end{tikzpicture}
\end{center}

I think you get it.

So ... as a {\it mathematical} expression, the value modeled by the tree is
\[
(a * a) + a
\]
On the other hand, for the tree

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (8.0,-3.0) {$+$};
\node[state] (S1) at (5.0,-1.5) {$*$};
\node[state] (a1) at (2.0,-3.0) {$a$};
\node[state] (a3) at (9.5,-4.5) {$a$};
\node[state] (a2) at (6.5,-4.5) {$a$};
\node[state] (E5) at (9.5,-3.0) {$E$};
\node[state] (E4) at (6.5,-3.0) {$E$};
\node[state] (E1) at (5.0,0.0) {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (S1)
(E2) edge [bend left=0,pos=0.5,below] node {} (a1)
(E3) edge [bend left=0,pos=0.5,below] node {} (E4)
(E3) edge [bend left=0,pos=0.5,above] node {} (E5)
(E3) edge [bend left=0,pos=0.5,below] node {} (P1)
(E4) edge [bend left=0,pos=0.5,below] node {} (a2)
(E5) edge [bend left=0,pos=0.5,below] node {} (a3)
;
\end{tikzpicture}
\end{center}
the corresponding mathematical expression is
\[
a * (a + a)
\]
Remember that $(a * a) + a$ and $a * (a + a)$ is not viewed as a mathematical
expression; in the CFG, and during the derivation process, everything is
just abstract grammar variables and terminals and of course the two 
derivations produce the same {\it string} $a * a + a$.

Obviously from the above trees, following the rule that evaluation of going 
from bottom symbols up to the top, and we want the resulting expression to be 
mathematically correct based on our precedence rules, we want to have this 
tree:
\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (5.0,-1.5) {$+$};
\node[state] (S1) at (2.0,-3.0) {$*$};
\node[state] (a1) at (8.0,-3.0) {$a$};
\node[state] (a3) at (3.5,-4.5) {$a$};
\node[state] (a2) at (0.5,-4.5) {$a$};
\node[state] (E5) at (3.5,-3.0) {$E$};
\node[state] (E4) at (0.5,-3.0) {$E$};
\node[state] (E1) at (5.0,0.0) {$E$};
\node[state] (E3) at (8.0,-1.5) {$E$};
\node[state] (E2) at (2.0,-1.5) {$E$};

\path[-]
(E1) edge [bend left=0,pos=0.5,below] node {} (E2)
(E1) edge [bend left=0,pos=0.5,above] node {} (E3)
(E1) edge [bend left=0,pos=0.5,below] node {} (P1)
(E2) edge [bend left=0,pos=0.5,below] node {} (E4)
(E2) edge [bend left=0,pos=0.5,above] node {} (E5)
(E2) edge [bend left=0,pos=0.5,below] node {} (S1)
(E3) edge [bend left=0,pos=0.5,below] node {} (a1)
(E4) edge [bend left=0,pos=0.5,below] node {} (a2)
(E5) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}
and not the other one.
You know now that different grammars can generate the same language.
So the really important question is this:
can we rewrite grammar so that the \lq\lq wrong tree'' will never appear?

This means that I want to write a CFG that generate mathematical expressions
{\it and} the derivations must produce derivation (parse) trees that can be
used to correctly evaluate expressions according to precedence rules.

The idea is very simple. Look at the above parse trees.
Because of the precedence rules, $*$ must appear lower in the tree than
$+$ in order for $*$ to be evaluated first. 
Right?
Try this:
\begin{align*}
S &\rightarrow S + S \st a \st T \\
T &\rightarrow T * T \st a
\end{align*}

Now let's try to derive $a * a + a$ (using left derivations only).
We have no choice but to do this first:
\[
S \implies S + S
\]
(had we chosen $S \implies a$, the derivation would stop and would be
incorrect! ... and if we'd chosen $S \rightarrow T$, we would not be able
to derive the $+$ terminal!)

What next? Again by a process of elimination, the only possible rule is
\[
S \implies S + S \implies T + S
\]
That would move the leftmost variable $T$ to the next \lq\lq level''.
We then must use
\[
S \implies S + S \implies T + S \implies T * T + S
\]

At this point it's clear that the remaining steps must be
\[
S \implies S + S \implies T + S \implies T * T + S
\implies a * T + S
\implies a*a + S
\implies a*a + a
\]
and the derivation tree is


\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P1) at (6.0,-1.5) {$+$};
\node[state] (S3) at (8.0,-1.5) {$S$};
\node[state] (S2) at (4.0,-1.5) {$S$};
\node[state] (S1) at (6.0,0.0) {$S$};
\node[state] (T2) at (2.5,-4.5) {$T$};
\node[state] (T3) at (5.5,-4.5) {$T$};
\node[state] (T1) at (4.0,-3.0) {$T$};
\node[state] (a1) at (8.0,-3.0) {$a$};
\node[state] (a3) at (5.5,-6.0) {$a$};
\node[state] (a2) at (2.5,-6.0) {$a$};
\node[state] (M1) at (4.0,-4.5) {$*$};

\path[-]
(S1) edge [bend left=0,pos=0.5,below] node {} (P1)
(S1) edge [bend left=0,pos=0.5,below] node {} (S2)
(S1) edge [bend left=0,pos=0.5,above] node {} (S3)
(S2) edge [bend left=0,pos=0.5,below] node {} (T1)
(S3) edge [bend left=0,pos=0.5,below] node {} (a1)
(T1) edge [bend left=0,pos=0.5,below] node {} (M1)
(T1) edge [bend left=0,pos=0.5,below] node {} (T2)
(T1) edge [bend left=0,pos=0.5,above] node {} (T3)
(T2) edge [bend left=0,pos=0.5,below] node {} (a2)
(T3) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}
That solves the precedence of certain terminals (or operators if the 
terminals corresponds to mathematical objects in real-life applications).
But there's another issue.
Look at the situation where there's only one operator in the mathematical
expression:
\[
a + a + a
\]
In math, this means
\[
(a + a) + a
\]
In math techno jargon, we say that $+$ is left associative.
An operator, say $\oplus$, is said to be right associative if
\[
a \oplus b \oplus c = a \oplus (b \oplus c)
\]
Note that $+$ for real numbers will result in the same value whether you
evaluate it as left or right associative.
However it does matter for some operators.
For instance $(1 - 2) - 3$ is {\it not} the same as $1 - (2 - 3)$!!!

By the way, I hope you know that precedence and 
associativity rules are really rules of
convention; we simply say that $a + b + c$ means $(a + b) + c$.
There's no deep reason why it has to be other than the fact that we read left 
to right.

In terms of a string $a + a + a$, we have the following left derivations:
\[
S
\implies S + S
\implies S + S + S
\implies a + S + S
\implies a + a + S
\implies a + a + a
\]
and
\[
S
\implies S + S
\implies a + S
\implies a + S + S
\implies a + a + S
\implies a + a + a
\]
The following are the derivation trees:


\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P2) at (4.0,-3.0) {$+$};
\node[state] (P1) at (7.0,-1.5) {$+$};
\node[state] (S3) at (10.0,-1.5) {$S$};
\node[state] (S2) at (4.0,-1.5) {$S$};
\node[state] (S1) at (7.0,0.0) {$S$};
\node[state] (S5) at (5.5,-3.0) {$S$};
\node[state] (S4) at (2.5,-3.0) {$S$};
\node[state] (a1) at (10.0,-3.0) {$a$};
\node[state] (a3) at (5.5,-4.5) {$a$};
\node[state] (a2) at (2.5,-4.5) {$a$};

\path[-]
(S1) edge [bend left=0,pos=0.5,below] node {} (P1)
(S1) edge [bend left=0,pos=0.5,below] node {} (S2)
(S1) edge [bend left=0,pos=0.5,above] node {} (S3)
(S2) edge [bend left=0,pos=0.5,below] node {} (P2)
(S2) edge [bend left=0,pos=0.5,below] node {} (S4)
(S2) edge [bend left=0,pos=0.5,above] node {} (S5)
(S3) edge [bend left=0,pos=0.5,below] node {} (a1)
(S4) edge [bend left=0,pos=0.5,below] node {} (a2)
(S5) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (P2) at (10.0,-3.0) {$+$};
\node[state] (P1) at (7.0,-1.5) {$+$};
\node[state] (S3) at (4.0,-1.5) {$S$};
\node[state] (S2) at (10.0,-1.5) {$S$};
\node[state] (S1) at (7.0,0.0) {$S$};
\node[state] (S5) at (11.5,-3.0) {$S$};
\node[state] (S4) at (8.5,-3.0) {$S$};
\node[state] (a1) at (4.0,-3.0) {$a$};
\node[state] (a3) at (11.5,-4.5) {$a$};
\node[state] (a2) at (8.5,-4.5) {$a$};

\path[-]
(S1) edge [bend left=0,pos=0.5,below] node {} (P1)
(S1) edge [bend left=0,pos=0.5,above] node {} (S2)
(S1) edge [bend left=0,pos=0.5,below] node {} (S3)
(S2) edge [bend left=0,pos=0.5,below] node {} (P2)
(S2) edge [bend left=0,pos=0.5,below] node {} (S4)
(S2) edge [bend left=0,pos=0.5,above] node {} (S5)
(S3) edge [bend left=0,pos=0.5,below] node {} (a1)
(S4) edge [bend left=0,pos=0.5,below] node {} (a2)
(S5) edge [bend left=0,pos=0.5,below] node {} (a3)

;
\end{tikzpicture}
\end{center}
and mathematically, the expressions are (respectively)
\[
(a + a) + a \hskip 1cm a + (a + a)
\]
So we need to modify our CFG to only allow the left parse tree.
This is easy: we use left recursion:
\[
S \rightarrow S + a
\]
and our CFG becomes
\begin{align*}
S \rightarrow S + a \st a \st T \\
T \rightarrow T * T \st a
\end{align*}
Mathematically, $*$ is also left associative so ...
\begin{align*}
S \rightarrow S + a \st a \st T \\
T \rightarrow T * a \st a
\end{align*}

Note that not all operators are left associative.
For 
\[
2^{3^4}
\]
means
\[
2^{(3^4)}
\]
if we write $\land$ for exponentiation,
\[
2 \land 3 \land 4
\]
means 
\[
2 \land (3 \land 4)
\]
i.e., $\land$ is right associative.


\begin{ex}
Add $\land$ to our CFG.
In terms of precedence
\[
\land > * > +
\]
\end{ex}

Alrighty, all the above techniques for modifying CFGs so that precedence and 
associativity are encoded in the rules should be enough.

Note that
\begin{mylist}
 \item[(a)] Each derivative tree has a unique leftmost derivation
 \item[(b)] A string might have two distinct leftmost derivation and hence two
 distinct derivation trees.
\end{mylist}

\begin{defn}
\begin{mylist}
\item[(a)] A CFG $G$ is
\textbf{ambiguous} if there is a string in $L(G)$ that
has two distinct leftmost derivations and hence two distinct derivation trees.
\item[(b)] A context free language $L$ is
\textbf{inherently ambiguous} if for 
all CFG $G$ with $L(G) = L$, $G$ is ambiguous.
\end{mylist}
\end{defn}

Here aare some bad news ...

\begin{thm}
\begin{mylist}
\item[(a)] There exists inherently ambiguous languages.
\item[(b)] There is no algorithm that can determine whether or not $G$ is 
ambiguous.
\item[(c)] There is no algorithm that can determine, given a CFG $G$, 
whether $L(G)$ is inherently ambiguous.
\end{mylist}
\end{thm}

The most famous inherently ambiguous language is 
$\{ a^i b^j c^k \st i = j \text{ or } j = k 
\}$.
We probably won't have time to prove all the above results.
