\section{Push Down Automata}

A \defterm{push down automata} (PDA) is like an NFA except that it has
an infinite memory. The infinite memory device is just a stack.
(Recall that in a DFA, the states play the role of memory.
Therefore a DFA can only remember a finite number of things since, by definition, a DFA
can only have a finite number of states.)

OK, what's a stack?
A stack is a container of things (in our case symbols/characters).
You can put things into it and you can also take things out of it.
But the organization of the stack is such that it works like a stack
of plates at a buffet.
When you put something into the stack, it goes onto the top.
When you take things out of it, you have to take the thing that is
at the top of the stack.

Here's the picture of a PDA:

\begin{python}
from latextool_basic import *
p = Plot()

pda(p,
    stackvalues = ['a','\$'],
    tapevalues = ['a','b','a','a',r'\SPACE',r'\SPACE',r'\SPACE'],
    state = r'$q_0$',
    head_index = 0,
    pda_w = 3,
    pda_h = 2,
    vsep = 1,
    hsep = 1,
    input_tape_str=True,
    stack_str=True,
    )
print p
\end{python}

Remember that the stack is infinite -- you can put any amount of data into it.
Putting something onto the top of the stack is called \lq\lq pushing''
and removing something from the top is called \lq\lq popping''.

The operation of a PDA is described by a state diagram just like
an NFA diagram except for some modification.
Each edge from state $p$ to $q$ is labelled
$(a, b \rightarrow c)$:

\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$p$')
p += Graph.node(x=5, y=0, name='2', label='$q$')
p += Graph.arc(names=['1', '2'], label=r'$\texttt{a}, \texttt{b} \rightarrow \texttt{c} $')
print p
\end{python}


Some books also write
$(a,b/c)$
instead of
$(a, b \rightarrow c)$.

This means:
\begin{tightlist}
  \item []
  \lq\lq If your PDA is at state $p$, is about to reading character $a$ from the string
  (the input tape), and the top of stack is $b$, then your PDA  pops off
  $b$ from the stack and push $c$ onto the stack,
  move the read head (to the right) past 
  the character it was reading and 
  get ready to read the next character,
  and finally, the PDA go into state $q$.''
\end{tightlist}
If you're at a state where there is no valid next-state to do to,
then the machine crashes and the string is not accepted.
Also, because the PDA is like an NFA, there could be several
applicable transitions -- you might need to spawn copies of your PDAs.

For instance, suppose your PDA is at state $q_5$, it is
about to read \verb!a! (the third character to be processed),
and
the top of the stack is
\verb!b!:

\begin{python}
from latextool_basic import *
p = Plot()

pda(p,
    stackvalues = ['b','',''],
    tapevalues = ['','','a','','','',''],
    state = r'$q_5$',
    head_index = 2,
    vsep=0.5,
    )
print p
\end{python}

In your PDA state diagram,
you look for the state $q_5$, and then 
for the relevant transitions (there might be more than one)
where you are about to read \verb!a! and the top of stack if
\verb!b!:

\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$q_5$')
p += Graph.node(x=5, y=0, name='2', label='$$')
p += Graph.arc(names=['1', '2'], label=r'$\texttt{a}, \texttt{b} \rightarrow \texttt{} $')
print p
\end{python}

Say one of the transitions matching the above is 

\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$q_5$')
p += Graph.node(x=5, y=0, name='2', label='$q_2$')
p += Graph.arc(names=['1', '2'], label=r'$\texttt{a}, \texttt{b} \rightarrow \texttt{\$} $')
print p
\end{python}

Then your PDA goes through this computational step:

\begin{python}
from latextool_basic import *
p = Plot()
pda_step(p,
         stackvalues0 = ['b','',''],
         tapevalues0 = ['','','a','','','',''],
         state0 = r'$q_5$',
         head_index0 = 2,
         stackvalues1 = [r'\$', '',''],
         tapevalues1 = ['','','a','','','',''],
         state1 = r'$q_2$',
         head_index1 = 3,
        )        
print p
\end{python}

There are a few caveats.
First, for the label
\[
(a, b \rightarrow c)
\]
$a$ or $b$ or $c$ can be $\ep$
-- remember that PDA is like an NFA.

A transition
\[
(\ep, b \rightarrow c)
\]
means 
you're working on the stack without reading any character from the
input, i.e., you are replaced $b$ on top of the stack with $c$
but your read head does not move
(note: in this case it does not matter what your read head is pointing to).
For instance if the applicable transition of your PDA is

\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$q_5$')
p += Graph.node(x=5, y=0, name='2', label='$q_2$')
p += Graph.arc(names=['1', '2'], label=r'$\texttt{$\ep$}, \texttt{b} \rightarrow \texttt{\$} $')
print p
\end{python}

(i.e., the PDA is at state $q_5$ and the top of the stack is \verb!b!)
then the PDA will go through this computational step:

\begin{python}
from latextool_basic import *
p = Plot()
pda_step(p,
         stackvalues0 = ['b','',''],
         tapevalues0 = ['','','a','','','',''],
         state0 = r'$q_5$',
         head_index0 = 2,
         stackvalues1 = [r'\$', '',''],
         tapevalues1 = ['','','a','','','',''],
         state1 = r'$q_2$',
         head_index1 = 2,
        )        
print p
\end{python}


A transition like
\[
(a, b \rightarrow \ep)
\]
means that if the character being read is $a$ and the top of the
stack is $b$, then remove $b$ from the stack and put $\ep$  (i.e., nothing)
onto the stack.
This means of course that you're simplying popping the stack.
For instance if the applicable transition of your PDA is

\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$q_5$')
p += Graph.node(x=5, y=0, name='2', label='$q_2$')
p += Graph.arc(names=['1', '2'], label=r'$\texttt{a}, \texttt{b} \rightarrow \texttt{$\ep$} $')
print p
\end{python}

then the PDA will go through this computational step:

\begin{python}
from latextool_basic import *
p = Plot()
pda_step(p,
         stackvalues0 = ['b','',''],
         tapevalues0 = ['','','a','','','',''],
         state0 = r'$q_5$',
         head_index0 = 2,
         stackvalues1 = ['',''],
         tapevalues1 = ['','','a','','','',''],
         state1 = r'$q_2$',
         head_index1 = 3,
        )        
print p
\end{python}



On the other hand
\[
(a, \ep \rightarrow c)
\]
means that
you're pushing $c$ onto the stack
(if the character to be read is \verb!a!).
For instance if the applicable transition of your PDA is
\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$q_5$')
p += Graph.node(x=5, y=0, name='2', label='$q_2$')
p += Graph.arc(names=['1', '2'], label=r'$\texttt{a}, \texttt{$\ep$} \rightarrow \texttt{\$} $')
print p
\end{python}

(your PDA is at state $q_5$ and it's reading \verb!a! --
it doesn't matter what your top--of--stack is)
then the PDA will go through this computational step:

\begin{python}
from latextool_basic import *
p = Plot()
pda_step(p,
         stackvalues0 = ['b','',''],
         tapevalues0 = ['','','a','','','',''],
         state0 = r'$q_5$',
         head_index0 = 2,
         stackvalues1 = ['\$', 'b','',''],
         tapevalues1 = ['','','a','','','',''],
         state1 = r'$q_2$',
         head_index1 = 3,
        )        
print p
\end{python}






Also, a transition such as
\[
(\ep, \ep\rightarrow \ep)
\]
can be used just to enter a new state without reading any input
or modifying the stack.
(This does not depend on what you are reading and what's on the
top of the stack.)
For instance if the applicable transition of your PDA is
\begin{python}
from latextool_basic import *
p = Plot()
Graph.r = 0.4
Graph.background = 'white'
p += Graph.node(x=0, y=0, name='1', label='$q_5$')
p += Graph.node(x=5, y=0, name='2', label='$q_2$')
p += Graph.arc(names=['1', '2'], label=r'$\ep, \ep \rightarrow \ep $')
print p
\end{python}

(i.e., your PDA is at state $q_5$  --
it doesn't matter what your PDA is about to read and it
does not depend on what the top--of--stack is)
then the PDA will go through this computational step:

\begin{python}
from latextool_basic import *
p = Plot()
pda_step(p,
         stackvalues0 = ['b','',''],
         tapevalues0 = ['','','a','','','',''],
         state0 = r'$q_5$',
         head_index0 = 2,
         stackvalues1 = ['b','',''],
         tapevalues1 = ['','','a','','','',''],
         state1 = r'$q_2$',
         head_index1 = 2,
        )        
print p
\end{python}

This transition is most similar to the $\ep$--transition of an NFA.

And remember that there can be multiple transition from a 
state labeled in the same way (I said it's non-deterministic right?)

A string is \defterm{accepted} if after reading all the characters
and going the computational steps starting with a PDA
at the initial state, with the read head at the first character, and with
an initial empty stack,
one your PDAs (remember there can be more than one even though you start
with one),
you end up in an accepting state.

\newpage
Try running the following PDA with the string $aabb$:

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (q1) at (3.5,0.0) {$q_1$};
\node[state,initial,accepting] (q0) at (0.0,0.0) {$q_0$};
\node[state,accepting] (q3) at (0.0,-3) {$q_3$};
\node[state] (q2) at (3.5,-3) {$q_2$};

\path[->]
(q0) edge [bend left=0,pos=0.5,above] node {$(\ep,\ep\rightarrow\$)$} (q1)
(q1) edge [loop right] node {$(a,\ep\rightarrow a)$} ()
(q1) edge [] node {$(b,a\rightarrow\ep)$} (q2)
(q2) edge [bend left=0,pos=0.5,below] node {$(\ep, \$\rightarrow\ep)$} (q3)
(q2) edge [loop right] node {$(b,a\rightarrow \ep)$} ()
;
\end{tikzpicture}
\end{center}

Clearly the start state of the PDA is $q_0$ (just like a DFA/NFA).
You can also see that there are accept states in a PDA.

Note that the PDA has to read input characters from a set (denoted
by $\Sigma$ just like for DFA/NFA)
while the stack can hold characters from another set.
The two set of characters (for input and for the stack)
can be different.
For this example, the input characters are from $\{a, b\}$
while the stack characters are from $\{a, b, \$\}$.

Here's execution of the PDA.
I'm using $>$ to denote the position of the read head;
the character to be read is on the right of $>$.
As you can see, I'm drawing the stack horizontally
instead of vertically.
Initially we have the following:
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ & (top)(bottom) \\ \hline
\end{tabular}
\end{center}
We're at state $q_0$.
The transition (the only one) is $(\ep, \ep \rightarrow \$)$.
So we get this:
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ & (top)(bottom) \\ \hline
$>aabb$    & $q_1$ & (top) $\$ $ (bottom) \\ \hline
\end{tabular}
\end{center}
At this point, we're at $q_1$ and there are two transitions.
The only one we can use is $(a, \ep \rightarrow a)$.
This means that we're reading $a$ (the read head must move 
to the irght by one step) and we're replace $\ep$ on the 
top of the stack by $a$ (which means that we're just putting
$a$ onto the stack). So the table of computations look like this:
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ & (top)(bottom) \\ \hline
$>aabb$    & $q_1$ & (top) $ \$ $ (bottom) \\ \hline
$a>abb$    & $q_1$ & (top) $ a\$ $ (bottom) \\ \hline
\end{tabular}
\end{center}
Note very carefully that $a$ is pushed onto the stack!!!
In terms of a sequence of pictures of a PDA computing with input $aabb$ up to this point,
you have:

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

x0, y0 = 0, 0
r = pda0(p, x0=x0, y0=y0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x1,y1 = r.right()
y1 = y0 - 1
p += Line(points=[(x1+0.25,y1),(x1+0.75,y1)],linewidth=0.2,endstyle='>')

x0 = x1 + 1
r = pda0(p, x0=x0, y0=y0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x1,y1 = r.right()
y1 = y0 - 1
p += Line(points=[(x1+0.25,y1),(x1+0.75,y1)],linewidth=0.2,endstyle='>')

x0 = x1 + 1
r = pda0(p, x0=x0, y0=y0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)
print p
\end{python}

Get it?
The next step gives us this (I've removed (top) and (bottom)
from the stack column to make it more readable):
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ & \\ \hline
$>aabb$    & $q_1$ & $ \$ $ \\ \hline
$a>abb$    & $q_1$ & $ a\$ $ \\ \hline
$aa>bb$    & $q_1$ & $ aa\$ $ \\ \hline
\end{tabular}
\end{center}
In tems of PDA pictures, we have this:
\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', 'a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 2)
print p
\end{python}

Note that the next character to be read is $b$;
the top of the stack is $a$.
The only transition we can apply is $(b, a \rightarrow \ep)$.
The action on the stack means to replace the $a$ on top of the 
stack by $\ep$.
So we get this:
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ &  \\ \hline
$>aabb$    & $q_1$ & $ \$ $  \\ \hline
$a>abb$    & $q_1$ & $ a\$ $ \\ \hline
$aa>bb$    & $q_1$ & $ aa\$ $ \\ \hline
$aab>b$    & $q_2$ & $ a\$ $ \\ \hline
\end{tabular}
\end{center}
Look at the table carefully!
In terms of a picture, we have

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', 'a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 2)

x0,y0 = r.bottomleft()
x1,y1 = r.bottom()
x2,y2 = r0.bottom(); y2 -= 1
p += Line(points=[(x1,y1-0.25),
                  (x1,y1-0.50),
                  (x2,y1-0.50),
                  (x2,y2-0.85)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=0, y0=y2-1.5,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 3)


print p
\end{python}


The next step gives us this:
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ &  \\ \hline
$>aabb$    & $q_1$ & $ \$ $  \\ \hline
$a>abb$    & $q_1$ & $ a\$ $  \\ \hline
$aa>bb$    & $q_1$ & $ aa\$ $  \\ \hline
$aab>b$    & $q_2$ & $ a\$ $  \\ \hline
$aabb>$    & $q_2$ & $ \$ $  \\ \hline
\end{tabular}
\end{center}
In terms of a picture of PDAs, we have

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', 'a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 2)

x0,y0 = r.bottomleft()
x1,y1 = r.bottom()
x2,y2 = r0.bottom(); y2 -= 1
p += Line(points=[(x1,y1-0.25),
                  (x1,y1-0.50),
                  (x2,y1-0.50),
                  (x2,y2-0.85)],linewidth=0.2,endstyle='>')

y0 = y2-1.5
r = pda0(p, x0=0, y0=y0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 3)

x0,_ = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=y0,
    stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 4)


print p
\end{python}



One more step is applicable ... so we get ...
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
input tape & state & stack (top on the left) \\ \hline
$>aabb$    & $q_0$ &  \\ \hline
$>aabb$    & $q_1$ & $ \$ $ \\ \hline
$a>abb$    & $q_1$ & $ a\$ $ \\ \hline
$aa>bb$    & $q_1$ & $ aa\$ $ \\ \hline
$aab>b$    & $q_2$ & $ a\$ $ \\ \hline
$aabb>$    & $q_2$ & $ \$ $ \\ \hline
$aabb>$    & $q_3$ & $  $ \\ \hline
\end{tabular}
\end{center}

or a terms of a picture:

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', 'a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 2)

x0,y0 = r.bottomleft()
x1,y1 = r.bottom()
x2,y2 = r0.bottom(); y2 -= 1
p += Line(points=[(x1,y1-0.25),
                  (x1,y1-0.50),
                  (x2,y1-0.50),
                  (x2,y2-0.85)],linewidth=0.2,endstyle='>')

y0 = y2-1.5
r = pda0(p, x0=0, y0=y0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 3)

x0,_ = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=y0,
    stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 4)

x0,_ = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=y0,
    stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_3$', head_index = 4)


print p
\end{python}

Since we land in an accept state at the end of reading the input,
$aabb$ is accepted by the above PDA.
If we let $P$ denote the above PDA, we then write $aabb \in L(P)$.


In the table of computational steps,
we can also ignore characters already read.
So we can display the execution like this:
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
remaining input & state & stack (top on the left) \\ \hline
$aabb$    & $q_0$ &  \\ \hline
$aabb$    & $q_1$ &  $ \$ $  \\ \hline
$abb$    & $q_1$ &  $ a\$ $  \\ \hline
$bb$    & $q_1$ &  $ aa\$ $  \\ \hline
$b$    & $q_2$ &  $ a\$ $  \\ \hline
$\ep$    & $q_2$ &  $ \$ $  \\ \hline
$\ep$    & $q_3$ &  $  $  \\ \hline
\end{tabular}
\end{center}

Drawing pictures or writing a table is fine.
But the formal way (which uses less ink) is to do the following ...

A \defterm{configuration} or \defterm{instantaneous description}
is just a tuple representing each
step of the above computation.
The state is usually placed first, followed by the
remaining input, and finally by the stack contents.
So here's a configuration:
\[
(q_0, aabb, \ep)
\]
Mathematically the table above is usually written in the 
following format called a computation or a derivation:
\begin{align*}
(q_0, aabb, \ep) 
&\vdash (q_1, aabb, \$) \\
&\vdash (q_1, abb, a\$) \\
&\vdash (q_1, bb, aa\$) \\
&\vdash (q_2, b, a\$) \\
&\vdash (q_2, \ep, \$) \\
&\vdash (q_3, \ep, \ep) \\
\end{align*}
(Refer to the chapter on regular languages; a derivation for the execution
of a DFA/NFA is the same except that it does not have the third component,
i.e. the stack).

Note that a PDA is nondeterministic.

I've only shown you one that executes to the accept state.
In general, there can be multiple executions (and multiple PDAs
just like in the case of NFAs.)
For instance in the case of $\ep$ input,
there's one PDA with this computation (actually this has
no computation at all):

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = [r'\SPACE' for i in range(5)],
         state = r'$q_0$', head_index = 0)

print p
\end{python}

and this one:

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = [r'\SPACE' for i in range(5)],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()

p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')

r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = [r'\SPACE' for i in range(5)],
        state = r'$q_1$', head_index = 0)
print p
\end{python}

The first one reaches at an accept state while the second does not.
Therefore $\ep$ in accepted by the PDA.

\newpage
\begin{ex}
Now's your turn: Execute $P$ with inputs $aaabbb$, $aabbb$, $aaabb$, 
$ba$, $\ep$.
Write down all possible derivations for each string.
\end{ex}


\newpage
You should be able to see after a few experiments that
\[
L(P) = \{a^n b^n \st n \geq 0\}
\]

Now step back and try to understand the big picture:
Basically the machine (or mathematical device) pushes all the $a$'s on the
input onto the stack and then pops one $a$ for each $b$ read on the input;
if there's nothing left on the stack the $a$'s must match the $b$'s.

What about the \$ symbol?

You see, the stack we're using does not have the ability to tell you if it's
empty or not.
So the \$ actually acts as a bottom-of-stack marker.
This is important.
So remember that if you need to check if you've reached the bottom of stack,
the {\it first} thing you always do is to push a \$ onto the stack without
reading any character from the input.
In other words if you need to check if the stack is empty (or rather
you've reached the bottom-of-stack), the only transition from the start
state is always
\[
(\ep, \ep \rightarrow \$)
\]
And if you need to remove the bottom-of-stack marker (without reading anything
from the input) is
\[
(\ep, \$ \rightarrow \ep)
\]

Another important point to note is this:
Do you realize that an input character is either $a$ or $b$, but a character
in the stack can be $a$ or $b$ or \$?
So in general a PDA has {\it two} sets of characters:
input characters and stack characters.
Remember that!!!

You see from the above
that the stack is used to \lq\lq remember'' the number of $a$'s on
the input.
You can (and should!) view the stack as a memory device.
The only problem is that it's not like RAM where you have random access to
anything you like.




\newpage
Here's another PDA:
\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (q1) at (3.5,0.0) {$q_1$};
\node[state,initial,accepting] (q0) at (0.0,0.0) {$q_0$};
\node[state,accepting] (q3) at (0.0,-3) {$q_3$};
\node[state] (q2) at (3.5,-3) {$q_2$};

\path[->]
(q0) edge [bend left=0,pos=0.5,above] node {$(\ep,\ep\rightarrow\$)$} (q1)
(q1) edge [loop right] node {$(a,\ep\rightarrow a)$} ()
(q1) edge [] node {$(\ep,\ep\rightarrow\ep)$} (q2)
(q2) edge [bend left=0,pos=0.5,below] node {$(\ep, \$\rightarrow\ep)$} (q3)
(q2) edge [loop right] node {$(b,a\rightarrow \ep)$} ()
;
\end{tikzpicture}
\end{center}

Let's try it with $aabb$.
Here's the picture of a computation:

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', 'a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 2)

x0,y0 = r.bottomleft()
x1,y1 = r.bottom()
x2,y2 = r0.bottom(); y2 -= 1
p += Line(points=[(x1,y1-0.25),
                  (x1,y1-0.50),
                  (x2,y1-0.50),
                  (x2,y2-0.85)],linewidth=0.2,endstyle='>')

y0 = y2-1.5
r = pda0(p, x0=0, y0=y0,
    stackvalues = ['a', 'a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 2)

x0,_ = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=y0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 3)

x0,_ = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=y0,
    stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 4)

x0,_ = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=y0,
    stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_3$', head_index = 4)


print p
\end{python}

Formally, I would write
\begin{align*}
  (q_0, aabb, \ep)
  &\vdash (q_1, aabb, \$) \\
  &\vdash (q_1, abb, a\$) \\
  &\vdash (q_1, bb, aa\$) \\
  &\vdash (q_2, bb, aa\$) \\
  &\vdash (q_2, b, a\$) \\
  &\vdash (q_2, \ep, \$) \\
  &\vdash (q_3, \ep, \ep) 
\end{align*}

In this PDA, the transition from $q_1$ to $q_2$ represents
nondeterministically going from \lq\lq remembering $a$'s'' (using the stack)
and \lq\lq matching $b$'s with $a$'s''.
Another execution might go like this:

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')
r = pda0(p, x0=x0+1, y0=0,
        stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
        state = r'$q_1$', head_index = 0)
x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')

r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 1)

x0,y0 = r.right()
p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')

r = pda0(p, x0=x0+1, y0=0,
    stackvalues = ['a', r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 1)


print p
\end{python}

The derivation is
\begin{align*}
  (q_0, aabb, \ep)
  &\vdash (q_1, aabb, \$) \\
  &\vdash (q_1, abb, a\$) \\
  &\vdash (q_2, abb, a\$)
\end{align*}
At this point the derivation stops since there's no applicable
transition.
In this case, the PDA decides to go to state $q_2$ after reading one $a$
(and therefore there's only one $a$ in the stack.)
An even short derivation that does not accept is
\begin{align*}
  (q_0, aabb, \ep)
  &\vdash (q_1, aabb, \$) \\
  &\vdash (q_2, aabb, \$)
\end{align*}

Here's the picture:

\begin{python}
from latextool_basic import *
p = Plot()

def pda0(p, x0, y0, stackvalues, tapevalues, state, head_index):
    return pda(p,
           x0=x0,y0=y0,
           stackvalues = stackvalues,
           tapevalues = tapevalues,
           state = state,
           head_index = head_index,
           vsep=0.5, hsep=0.25,
           pda_w=1,pda_h=0.7,w=0.4,
           )

r = r0 = pda0(p, x0=0, y0=0,
         stackvalues = [], tapevalues = ['a','a','b','b',r'\SPACE'],
         state = r'$q_0$', head_index = 0)
x0,y0 = r.right()

p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')

r = pda0(p, x0=x0+1, y0=0,
    stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_1$', head_index = 0)
x0,y0 = r.right()

p += Line(points=[(x0+0.25,y0),(x0+0.75,y0)],linewidth=0.2,endstyle='>')

r = pda0(p, x0=x0+1, y0=0,
    stackvalues = [r'\$'], tapevalues = ['a','a','b','b',r'\SPACE'],
    state = r'$q_2$', head_index = 0)

print p
\end{python}

At this point, this PDA dies because at state $q_2$, there is no
transition for \lq\lq read $a$ on the input tape and the top of stack is $a$.''


In the above, there are three computations of $aabb$:
\begin{align*}
  (q_0, aabb, \ep)
  &\vdash (q_1, aabb, \$) \\
  &\vdash (q_1, abb, a\$) \\
  &\vdash (q_1, bb, aa\$) \\
  &\vdash (q_2, bb, aa\$) \\
  &\vdash (q_2, b, a\$) \\
  &\vdash (q_2, \ep, \$) \\
  &\vdash (q_3, \ep, \ep) 
\end{align*}
\begin{align*}
(q_0, aabb, \ep) 
&\vdash (q_1, aabb, \$) \\
&\vdash (q_1, abb, a\$) \\
&\vdash (q_2, abb, a\$) 
\end{align*}
\begin{align*}
(q_0, aabb, \ep) 
&\vdash (q_1, aabb, \$) \\
&\vdash (q_2, aabb, \$) 
\end{align*}
The first computation reads all characters in the input and ends in an
accept state.
The other two are not able to finish reading all the characters of the input.
Therefore $aabb$ is accepted by this PDA.

\newpage
\begin{ex}
Here's the PDA state diagram again:

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (q1) at (3.5,0.0) {$q_1$};
\node[state,initial,accepting] (q0) at (0.0,0.0) {$q_0$};
\node[state,accepting] (q3) at (0.0,-3) {$q_3$};
\node[state] (q2) at (3.5,-3) {$q_2$};

\path[->]
(q0) edge [bend left=0,pos=0.5,above] node {$(\ep,\ep\rightarrow\$)$} (q1)
(q1) edge [loop right] node {$(a,\ep\rightarrow a)$} ()
(q1) edge [] node {$(\ep,\ep\rightarrow\ep)$} (q2)
(q2) edge [bend left=0,pos=0.5,below] node {$(\ep, \$\rightarrow\ep)$} (q3)
(q2) edge [loop right] node {$(b,a\rightarrow \ep)$} ()
;
\end{tikzpicture}
\end{center}

\begin{tightlist}
\item There are two possible executions that will accept the string $\ep$.
What are the list of states visited by these two executions?
\item Is $a$ accepted by the PDA? Describe all possible executions.
\item Is $b$ accepted by the PDA? Describe all possible executions.
\item Is $ab$ accepted by the PDA? Describe all possible executions.
\item Is $ba$ accepted by the PDA? Describe all possible executions.
\item Is $aab$ accepted by the PDA? Describe all possible executions.
\item Is $abb$ accepted by the PDA? Describe all possible executions.
\item Is $aabb$ accepted by the PDA? Describe all possible executions.
\item Is $bbaa$ accepted by the PDA? Describe all possible executions.
\item Now can you tell me the language accepted by this PDA?
\item What if I make the first state a non--accepting state? What is the 
resulting language?
\end{tightlist}
\end{ex}



\newpage
\begin{ex}
Design a PDA that accepts $\{a^n b^{2n} \mid n \geq 0\}$.
\end{ex}


\newpage
\begin{ex}
Design a PDA that accepts $\{a^{2n} b^{n} \mid n \geq 0\}$.
\end{ex}


\newpage
\begin{ex}
Design a PDA that accepts $\{a^m b^{n} \mid m = 2n \text{ or } 2m = n\}$.
\end{ex}


\newpage
Here's the formal definition of a PDA.


\begin{defn}
A \defterm{pushdown automata} (PDA) is $P = (Q, \Sigma, \Gamma, \delta,
q_0, F)$ (phew!) where
\begin{tightlist}
\item[$\bullet$] $Q$ is a finite set of states
\item[$\bullet$] $\Sigma$ is a finite set of input symbols (the input alphabet)
\item[$\bullet$] $\Gamma$ is a finite set of stack symbols (the stack alphabet)
\item[$\bullet$] $q_0 \in Q$ is the initial state
\item[$\bullet$] $F \subseteq Q$ is the set of accepting states
\item[$\bullet$] $\delta : Q \times \Sigma_\ep \times \Gamma_\ep
\rightarrow P(Q \times \Gamma^*)$ is the transition function.
Recall that $\Sigma_\ep = \Sigma \cup \{\ep\}$ and
$\Gamma_\ep = \Gamma \cup \{\ep\}$.
If
\[
\delta(q, a, b) = \{(p_1, c_1), ..., (p_n, c_n)\}
\]
this means that while at state $q$, reading character $a$ 
(allowing the case $a = \ep$, i.e., reading anything or nothing)
from the input string, and there is
a character $b$ on top of the stack (allowing the case $b = \ep$, i.e.,
anything or nothing),
then you can transition to state $p_i$ after popping off $b$
(popping $\ep$ is the same as not popping), and
pushing $c_i$ onto the stack
(pushing $\ep$ is the same as not pushing).
In other words from the fact
\[
(p_i, c_i) \in \delta(q, a, b)
\]
you have the following transition in the PDA's state diagram:
\[
q \xrightarrow{\,\,\,{a, b\rightarrow c_i}\,\,\,} p_i
\]
\end{tightlist}
\end{defn}

\begin{defn}
The following definition models the way we compute with PDAs.
A \defterm{configuration}
or \defterm{instantaneous description}
for a PDA $P = (Q, \Sigma, \Gamma, \delta, q_0, F)$
is a tuple of the form
\[
(q, x, y)
\]
where $q \in Q$, $x \in \Sigma^*$, $y \in \Gamma^*$.
In other words a configuration is just an element of 
$Q \times \Sigma^* \times \Gamma^*$.
We define the \defterm{derives} relation, denoted $\vdash$,
on $Q \times \Sigma^* \times \Gamma$ as follows:
Let $(q, x, y)$ and $(q', x', y')$ be configurations in 
$Q \times \Sigma^* \times \Gamma^*$. Then 
\[
(q, x, y)  \vdash (q', x', y')
\]
if there is some $a, b, c \in \Sigma_\ep$ such that
\begin{mylist}
\item[(i)] $x = ax'$
\item[(ii)] $y = bz$
\item[(iii)] $y' = cz$
\item[(iv)] $(q', c) \in \delta(q, a, b)$
\end{mylist}

We also define $\vdash^*$ as follows: 
Let
$(q, x, y)$ and $(q', x', y')$ be configuration in 
$Q \times \Sigma^* \times \Gamma^*$. 
Then 
\[
(q, x, y)  \vdash^* (q', x', y')
\]
if either $(q, x, y) = (q', x', y')$ or
there is a sequence of configurations $(q_i, x_i, y_i)$
($i = 1, \ldots, n$) such that
\[
(q, x, y)  = (q_1, x_1, y_1) 
\vdash \cdots 
\vdash (q_n, x_n, y_n) = (q', x', y')
\]
\end{defn}

\begin{defn}
Let $x \in \Sigma^*$ and $P = (Q, \Sigma, \Gamma, \delta, q_0, F)$ 
be a PDA. We say that $x$ is \defterm{accepted} by $P$ if
there is a computation
\[
(q_0, x, \ep) \vdash^* (q, \ep, y)
\]
where $q \in F$ and $y \in \Gamma^*$.
Define the \defterm{language} accepted by $P$, denoted $L(P)$,
to be the set of strings in $\Sigma^*$ accepted by $P$:
\[
L(P) = \{x \in \Sigma^* \st P \text{ accepts } x\}
\]
\end{defn}


\newpage
The next example is important and 
uses nondeterminism as a guessing mechanism:

\begin{eg}
Let's design a PDA that accepts $\{ww^R \st w \in \Sigma^*\}$
where $\Sigma = \{a, b\}$. 
The intuition is
\begin{mylist}
\item[1.] Push $w$ onto the stack
\item[2.] Guess nondeterministically where the middle is
\item[3.] Pop $w^R$ while comparing with the rest of the input
\end{mylist}
Of course we need to know when the stack is empty.
So the first thing we do is to push \$ onto the stack.
So here's the PDA:


\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=]
\node[state] (q1) at (3.5,0.0) {$q_1$};
\node[state,initial,accepting] (q0) at (0.0,0.0) {$q_0$};
\node[state,accepting] (q3) at (0.0,-3) {$q_3$};
\node[state] (q2) at (3.5,-3) {$q_2$};

\path[->]
(q0) edge [bend left=0,pos=0.5,above] node {$(\ep,\ep\rightarrow\$)$} (q1)
(q1) edge [loop right] node {$(a,\ep\rightarrow a), (b,\ep\rightarrow b)$} ()
(q1) edge [] node {$\ep,\ep\rightarrow \ep$} (q2)
(q2) edge [bend left=0,pos=0.5,below] node {$(\ep, \$\rightarrow\ep)$} (q3)
(q2) edge [loop right] node {$(a,a\rightarrow\ep), (b,b\rightarrow\ep)$} ()
;
\end{tikzpicture}
\end{center}
Note that at state $q_1$, we push some input characters onto the stack.
At $q_2$, we pop contents of the stack for every matching character in the
remaining input.
There's a transition
\[
(\ep, \ep \rightarrow \ep)
\]
from $q_1$ to $q_2$.
This represents the nondeterministic guessing of the middle of the string.
For the input $abba$, one possible derivation is
\begin{align*}
(q_0, abba, \ep)
&\vdash (q_1, abba, \$) &\text{using $(\ep, \ep \rightarrow \$)$} \\
&\vdash (q_1, bba, a\$) &\text{using $(a, \ep \rightarrow a)$} \\
&\vdash (q_2, bba, a\$) &\text{using $(\ep, \ep \rightarrow \ep)$}
\end{align*}
and at this point, the machine crashes because there is no valid transition
to take.
So this machine does not accept $abba$.
But that's OK since {\it this} machine will accept $abba$:
\begin{align*}
(q_0, abba, \ep)
&\vdash (q_1, abba, \$) &\text{using $(\ep, \ep \rightarrow \$)$} \\
&\vdash (q_1, bba, a\$) &\text{using $(a, \ep \rightarrow a)$} \\
&\vdash (q_1, ba, ba\$) &\text{using $(a, \ep \rightarrow a)$} \\
&\vdash (q_2, ba, ba\$) &\text{using $(\ep, \ep \rightarrow \ep)$} \\
&\vdash (q_2, a, a\$) &\text{using $(b, b \rightarrow \ep)$} \\
&\vdash (q_2, \ep, \$) &\text{using $(a, a \rightarrow \ep)$} \\
&\vdash (q_3, \ep, \ep) &\text{using $(\ep, \$ \rightarrow \ep)$} \\
\end{align*}
\end{eg}



\newpage
\begin{ex}
Design a PDA that accepts
\[
L = \{a^n b^{2n} \st n \geq 0\}
\]
make sure your PDA has a transition labeled $(\ep, \ep\rightarrow\ep)$. 
Write down a derivation for $a^4 b^2$ that ends in an accept state.
\end{ex}



\newpage
\begin{ex}
Design a PDA that accepts
\[
L = \{ a^m b^{n} \st m < n \}
\]
Write down a derivation for $a^2 b^5$ that ends in an accept state.
\end{ex}



\newpage
\begin{ex}
Can you design a PDA that accepts
\[
L = \{ a^p b^q a^r \st p < q, r > 3 \}
\]
Write down a derivation for $a^2 b^5$ that ends in an accept state.
\end{ex}


\newpage
\begin{ex}
Can you design a PDA that accepts
\[
L = \{ w \st w \text{ has an equal number of $a$'s and $b$'s} \}
\]
(Obviously this is not the same as
$\{a^n b^n \,|\, n \geq 0\}$.)
\end{ex}


\newpage
\begin{eg}
Suppose you have two PDAs, say $P_1$ and $P_2$.
How would you construct a PDA $P$ such that $L(P) = L(P_1) \cup L(P_2)$?
Sounds tough ... but ... NONDETERMINISM TO THE RESCUE!!!

You build a new $P$ that includes all the information from $P_1$ and $P_2$
but you add a new start state that transitions to the start state of $P_1$
and $P_2$ without consuming any characters from the input or modifying the
stack; of course the start states of $P_1$ and $P_2$ are not not start
state of the new $P$.
And that's it! In terms of a diagram, say $P_1$ has start state $q$ and
$P_2$ has start state $r$, and $s$ is the start state of $P$, then the new
PDA would look like this:

\begin{samepage}
\begin{verbatim}
  P
  +-------------------------------------------+
  |                                           |
  |                        |                  |
  |                        v                  |
  |  +-------------------- s                  |
  |  |(e, e->e)            |(e, e->e)         |
  |  |                     |                  |
  |  |  P1                 |  P2              |
  |  |  +-----------+      |  +-----------+   |
  |  |  |           |      |  |           |   |
  |  +----> q ...   |      +----> r ...   |   |
  |     |           |         |           |   |
  |     +-----------+         +-----------+   |
  |                                           |
  +-------------------------------------------+
\end{verbatim}
\end{samepage}

Of course the accept states of $P$ is the set of all the accept states of
$P_1$ and $P_2$, the transitions are all the transitions from $P_1$ and
$P_2$ together with the transitions from $s$ to $q$ and $r$ through
\[
(\ep, \ep \rightarrow \ep)
\]
and the set of stack symbols is the union of the stack symbols of $P_1$
and $P_2$.
(We do have to assume that the states of $P_1$ are named differently from
the states in $P_2$.)
\end{eg}

\newpage
\begin{eg}
Now let's think about concatenation ...
Suppose you have two PDAs, say $P_1$ and $P_2$.
How would you construct a PDA $P$ such that $L(P) = L(P_1)L(P_2)$?
You just need to transition from the accept states of $P_1$
to the start state of $P_2$ right?
Whoa ... hold your horses there ... you need to remember that 
the state of computation during the computation of $P_2$
is exactly as it should be for $P_2$
when $P_2$ starts executing by itself.
This means that you need to ensure that the stack is empty -- 
there's no requirement on $P_1$ to clear the stack when the string is accepted.
So suppose $q$ is the start state of $P_1$; it will stay as the start
state in $P$.
Suppose the start state of $P_2$ is $r$.
Next suppose the accept states of $P_1$ (there might be more than one!!!)
be $f_1, f_2, f_3$, etc.
Create a new state $s$ for clearing the contents of the stack after $P_1$
accepts:
you must also ensure that $P_1$ pushes a \$ to the bottom of the stack if it 
did not do so.
Then at $s$, you continually pop contents off the stack until the last one 
popped off is \$.
Once you're done with that you go to $P_2$.
Of course the accept states of $P_1$ are not {\it not} accepts states of $P_2$.
The picture looks like this:
\begin{verbatim}
P
+--------------------------------------------------------+
| P1                                        P2           |
| +------------+                            +---------+  |
| |            | (e, e->e)   +--+           |         |  |
| |         f1 ------------  | /            |         |  |
| |            | (e, e->e) \ |v  (e, $->e)  |         |  |
|---> q ... f2 ------------> s --------------> r ...  |  |
| |            | (e, e->e) /                |         |  |
| |         f3 ------------                 |         |  |
| |            |                            |         |  |
| +------------+                            +---------+  |
+--------------------------------------------------------+
\end{verbatim}
Note that there are transitions from $s$ to $s$ labeled 
$(\ep, a \rightarrow \ep)$ for each $a \in \Gamma_1$ (the stack symbols of 
$P_1$)
this is just clearing the stack of all symbols in the stack.
The transition from $s$ to $r$ will clear the last symbol on the stack, i.e.
\$, and immediately go into the execution of $P_2$.
Once again the first thing $P_1$ must do is to push a \$ onto the stack. 
\end{eg}




