\mysection{Regular Expressions}

\object{
 \mbox{}
 \begin{itemize}
  \item[(1)] The student can verify if an expression is an regular
  expression
  \item[(2)] The student can describe informal the language generated by a
  regex
  \item[(3)] Given an informal description of a regular language,
  the student can write down the corresponding regex
  \item[(4)] The student can translate between a regex and a state
  diagram
  \item[(5)] The student can translate between a regex and a DFA
  \item[(6)] The student can translate between a regex and an NFA
  \item[(7)] The student can write simple UNIX-based regex.
 \end{itemize}
}


\subsection{Regular Expressions}

Note that both DFA and NFA description of a finite state automata
uses sets and functions.

A {\bf regular expression} is a concise {\bf textual} description
of a regular language. This is the method used in most software
systems. In particular, regular expressions are absolutely crucial
to web application where there are lots of check for validity of
input strings.

\begin{defn} Let $\Sigma$ be a finite set. A \defterm{regular
expression} (regex) over $\Sigma$ is a string which is define
recursively as follows:
 \myitemize{
  \item $\emptyset$ is a regular expression
  \item $a$ (for $a \in \Sigma$) is a regular expression
  \item If $R$ is a regular expression, then so is $R^*$
  \item If $R$,$R'$ are regular expressions, then so is $R
  \cup R'$
  \item If $R$,$R'$ are regular expressions, then so is $RR'$
 }
\end{defn}

You should think of the regex as a string. So the $\cup$ is just a
special character; later we'll see that this character corresponds
to union. Likewise $a \in \Sigma$ is a regex should be thought of
as a character in a regex. In fact some authors will use a
different symbol to denote $\emptyset$, $a \in \Sigma$, $+$,
${}^*$, $\cdot$ in describing a regex.

\begin{ex}
Let $\Sigma = \{a,b\}$. The $aa^* + ba^*b$ is a regular expression
since: \myitemize{
 \item[(1)] $a \in \Sigma$ $\implies$ $a$ is a regex
 \item[(2)] (1) $\implies$ $a^*$ is a regex
 \item[(3)] (1),(2) $\implies$ $aa^*$ is a regex
 \item[(4)] $b \in \Sigma$ $\implies$ $b$ is a regex
 \item[(5)] (4),(2) $\implies$ $ba^*$ is a regex
 \item[(6)] (5),(4) $\implies$ $ba^*b$ is a regex
 \item[(7)] (3),(6) $\implies$ $aa^* \cup ba^*b$ is a regex
 }
\end{ex}

For those authors who prefer to invent new symbols to use in a
regex, they usually use bold. For instance instead of writing the
regex $aa^* + ba^*b$, they would write $\mathbf{ aa^* + ba^*b}$.
(Sorry, I can't bold the union and Kleene star).


\subsection{Language of a Regex}

\begin{defn}
 Let $R$ be a regex defined over $\Sigma$. Then $L(R)$ denotes a
 language generated by $R$ which is defined as follows:
 \begin{itemize}
  \item $L(\emptyset) = \emptyset$
  \item $L(a) = \{a\}$ for $a \in \Sigma$
  \item $L(R^*) = (L(R))^*$ for $a \in \Sigma$
  \item $L(R + R') = L(R) \cup L(R')$
  \item $L(RR') = L(R)L(R')$
 \end{itemize}
\end{defn}

\begin{eg}
 \myitemize{
 \item $L((a+b)^*) = L(a+b)^* = (L(a) \cup L(b))^* = (\{a\} \cup
 \{b\})^* = \{a,b\}^*$
 \item $L(\emptyset 0) L(\emptyset) L(0) = \{\}  \{0\} = \{\}$
 \item $L( 0^* + (0^*10^*10^*10^*)^*)$ is the language of strings
 where the number of 1s is divisible by 3.
 }
\end{eg}

\begin{ex}
 What is the language generated by the regex $aa^* \cup ba^*b$?
\end{ex}

Obviously we need to decide which goes first, concatenation or
union of regex. The convention is concatenation has high
precedence. So $RR'\cup R'' = (RR') \cup R''$.

{\bf Solution.}
\begin{align*}
 L(aa^* \cup ba^*b)
  &= L(aa^*) \cup L(ba^*b) \cr
  &= L(a)L(a^*) \cup L(b)L(a^*)L(b) \cr
  &= \{a\}L(a)^* \cup \{b\}L(a)^*\{b\} \cr
  &= \{a\}\{a\}^* \cup \{b\}\{a\}^*\{b\} \cr
  &= \{ a^n \,|\, n \geq 1 \} \cup \{ ba^nb \,|\, n \geq 0 \}
 \end{align*}


\begin{ex}
 Write down the regex for the language over $\{a,b\}$ containing strings
  containing either exact 3 a's or the substring $aba$.
\end{ex}

\subsection{Regular Languages and Regex: Part 1}

\begin{thm}
 \myitemize{
  \item If $R$ is a regex, then $L(R)$ is a regular
  language
  \item If $L$ is a regular language, then there is a regex $R$
  such that $L(R) = L$.
}
\end{thm}


\begin{ex}
 Prove (a) of the above theorem. (Don't worry this is the easy
 one).
\end{ex}

\subsection{Regular Languages and Regex: Part 2}

Now to prove (b) of the main theorem of this section. The proof
includes an algorithm for converting a DFA to a regex.

The proof is actually constructive.

\begin{proof}
\end{proof}

\begin{eg}
Write down the regex for the following DFA or NFA.
\end{eg}



\subsection{Regex and Python}

Now just image you're writing a computer program using a high
level programming language. Suppose the there is a function
provided for you to check if a string is in a regular language.
Obviously you have to specify your regular language. Clearly
finite sets are easy: just specify everything in the set. But
there are regular languages which are infinite. You now know that
regular languages can be described using (1) a DFA, (2) an NFA, or
(3) regex.
\\

Regex is the simplest.
\\

Here is an example of using the regex provided by the programming
language Python. The regex in Python allows you to verify if a
string matches a regex. (There are actually three modes of
matchings). Clearly you can't find a key on your keyboard for
$\cup$: In most programming languages or packages with regex
facilities, the $|$ is used in place of $\cup$. The search
function in the re module accepted a regex and a string.

\begin{eg} You want to check if "ab" is accepted by the regular
expression $aa^* \cup ba^*b$.

import re

regex = \lq\lq aa*+ba*b"

match = re.search(regex, "ab")

\end{eg}

To make life simpler for programmers, the regex in Python has
extra characters or strings to simplify programming.
\begin{itemize}
 \item $[abcdef]$ is the same as $a|b|c|d|e|f$.
 \item $[0-9]$ is the same as $0|1|2|3|4|5|6|7|8|9$
 \item $[a-z]$ will match any ASCII character from 'a' to 'z'
 \item $[a-z]\{3-5\}$ will accept 3 or 4 or 5 ASCII characters from 'a' to 'z'.
\end{itemize}
This list is incomplete. For more information, use google to check
regular expressions for UNIX.
\\

Regex is used not just in work related to compilers. Regex is also
used to verify for instance if a user's input is valid.

\begin{ex}
Write a regex for telephone numbers. Valid phone numbers are
"1-888-123-4567", "123-4567", "888-123-4567". You need not
consider extensions.
\end{ex}

\begin{ex}
Write a regex for dollar amounts up to 1/100 of a cent. Valid
dollar amounts are "$1234", "$1,234$, "$1234.56", "$1234.567",
"$0.123", "0.123c", "$123.456c$.
\end{ex}

\begin{ex}
[Text mining]
\end{ex}
