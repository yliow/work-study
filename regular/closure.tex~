\section{Closure Rules}

Now suppose if you want to show $L$ is regular, you can try to
construct a DFA for it. That would mean that you're always starting
from scratch. In this section we'll adopt a more sophisticated
approach. In particular, we see how to show a language is regular by
looking at other language(s).

We fix a alphabet $\Sigma$. Every language over $\Sigma$ is a
subset of $\Sigma^*$. Therefore the set of {\it all} languages
over $\Sigma$ is the powerset of $\Sigma^*$, i.e., $P(\Sigma^*)$.
In this collection of languages is the set of regular languages
over $\Sigma$. Let's call this set $\Reg(\Sigma)$. Therefore
$\Reg(\Sigma) \subsetneq P(\Sigma^*)$.

Here's why the above are called closure rules. Consider all
languages over $\Sigma$. This is $P(\Sigma^*)$. Right? Remember
powerset? You can think of $\cup$ (union) as a binary operation on
$P(\Sigma^*)$. In other words let $L, L' \in P(\Sigma^*)$, $L \cup
L' \in P(\Sigma^*)$. Now suppose $L,L' \in \Reg(\Sigma)$. We want
to know if $L \cup L' \in \Reg(\Sigma)$. If this is the case, then
we say that $\cup$ is a closed binary operation on $\Reg(\Sigma)$.

Why is this useful? Such rules will allow us to re-use previously
known regular languages. For instance if $\cup$ is a closed
operator on regular languages and you know that
\begin{align*}
 L &= \{ x \in \{a,b\}^* \,|\, \text{number of $a$ in $x$ is } \equiv 1 \pmod{5}
 \}\\
 L &= \{ x \in \{a,b\}^* \,|\, x \text{ contains } a^3 \}
\end{align*}
are both regular, then you know immediately that
\[
  \{ x \in \{a,b\}^* \,|\, \text{ number of $a$ in $x$ is } \equiv 1 \pmod{5}
  \text{ or $x$ contains $a^3$} \}
\]
is also regular.

We will look at union, intersection and difference. Note that if $L$
is a language over $\Sigma$, complementation of $L$ will be with
respect to $\Sigma^*$, i.e., $\overline L = \Sigma^* - L$. There are
two other operations on languages we will look at.


\begin{defn}
 Let $L$ and $L'$ be languages over $\Sigma$. 
 \begin{itemize}
 \item
  The
  \defterm{concatenation} of $L$ and $L'$ is defined as follows:
  \[
   LL' = \{ z \in \Sigma^* \,|\, z = xx' \text{ for some } x\in L \text{ and } x' \in L'\}
  \]
 \item We can define $L^n$ for $n \geq 0$ as follows:
  \begin{itemize}
   \item $L^0 = \{\ep\}$
   \item $L^{n+1} = L^n L$ for $n \geq 0$.
  \end{itemize}
 \item The Kleene star of $L$, written $L^*$ is defined by
  \[
   L^* = \bigcup_{n \geq 0} L^n = \{x_1\cdots x_n \,|\, x_i \in L  \text{ for } i=1,\ldots,n \}
  \]
 \end{itemize}
\end{defn}

Note that you can think of $\cup$ as an operator on $P(\Sigma^*)$:
if $L, L' \in P(\Sigma^*)$, then $L \cup L' \in P(\Sigma^*)$.


 
We will prove the following closure rules. In the proofs you will
see the power of NFAs.

\begin{prop}
 Let $L,L'$ be regular languages.
 \begin{tightlist}
  \item $L,L'$ regular $\implies$ $L \cup L'$ regular
  \item $L,L'$ regular $\implies$ $L \cap L'$ regular
  \item $L$ regular $\implies$ $\overline{L}$ regular
  \item $L,L'$ regular $\implies$ $L - L'$ regular
  \item $L,L'$ regular $\implies$ $LL'$ regular
  \item $L$ regular $\implies$ $L^*$ regular
 \end{tightlist}
\end{prop}


\newpage
\section{Closure: Intersection}

Let's prove closure of $\cap$ on $\Reg_\Sigma$.

Since we assumed that $L$ and $L'$ are regular, by definition,
there must be DFAs $M$ and $M'$ such that $L = L(M)$ and $L' =
L(M')$. To show that $L \cap L'$ is regular, we must construct a
DFA $M''$ such that $L(M'') = L\cap L'$. Right? This is all by
definition.

Of course $M''$ must be constructed from $M$ and $M'$. What do you
want $M''$ to do? Suppose you're given a string $x \in \Sigma^*$. By
definition a string $x$ is in $L''$ if and only if $x$ is in both
$L$ and $L'$. This means that $M''$ must be a machine that will
accept $x$ if and only if $x$ is accepted by both $M$ and $M'$. This
means that $M''$ must be able to \lq\lq run" $M$ and $M'$ separately
and must ``know" if $M$ and $M'$ accepted the $x$ or not. So in
other words suppose that when you run $M$ and $M'$ with $x$, you get
the following sequence of states:
\begin{align*}
M: \,\,\, &q_0 \rightarrow s_1 \rightarrow s_2 \rightarrow \cdots \rightarrow s_n \\
M': \,\,\, &q_0' \rightarrow s'_1 \rightarrow s'_2 \rightarrow
\cdots \rightarrow s'_n
\end{align*}
where $s_i$ are states in $M$ and $s_i'$ are states in $M'$. Of
course $M''$ is a single DFA and so as you run $M''$ you should
only see a single sequence of states, not two. How would you
create a single sequence of states from the above? What if we do
this:
\[
M'' \,\,\, (???): \,\,\, q_0,q_0' \rightarrow s_1,s_1' \rightarrow
s_2, s'_2 \rightarrow \cdots \rightarrow s_n,s'_n
\]
So we want ``$q_0,q_0'$'' to be a single ``thing''. AHA!!!
Tuples!!!
\[
M'': \,\,\, (q_0,q_0') \rightarrow (s_1,s_1') \rightarrow (s_2,
s'_2) \rightarrow \cdots \rightarrow (s_n,s'_n)
\]
Note in particular that $(s_i,s'_i)$ is not the same as
$(s_i',s_i)$.
This is the first hint that the states of $M''$ must
be
\[
 Q'' = Q \times Q' = \{(q,q') \,|\, q\in Q, q'\in Q'\}
\]
i.e., the product of $Q$ and $Q'$, the set of states of $M$ and
$M'$.

How should we initialize our $M''$ engine? Obviously $q''_0 =
(q_0,q_0')$ where $q_0$ and $q_0'$ are the initial states of $M$
and $M'$ respectively.

When is $x$ accepted? Obviously if the final state after running
$x$ through the $M''$ is $(q,q')$, then
\[
 x \in L'' \iff x \in L \text{ and } x \in L'
\]
forces us to say that $(q,q')$ is an accepting state exactly when
$q \in F$ and $q'\in F'$ where $F,F'$ are sets of accepting states
of $M$,$M'$ respectively:
\[
   (q,q') \in F'' \iff q \in F, \,\,\, q' \in F'
\]
This means that we must have
\[
 F'' = F \times F'
\]

Furthermore it's now clear how to define $\delta''$ the transition
function of $M''$ in terms of $\delta, \delta'$ the transition
functions of $M,M'$ respectively. If the symbol is $a \in \Sigma$
and $\delta$ and $\delta'$ have the following effect:
\begin{align*}
 q &\mapsto r \\
 q' &\mapsto r' \\
\end{align*}
for an $a$--transition, then $\delta''$, the transition function
of $M''$ (if $M''$ exists) must have the following effect
\[
(q,q') \mapsto (r,r')
\] In other words
\[
 \delta'' \biggl( (q,q'),a \biggr) = \biggl( \delta(q,a), \,\,\, \delta'(q',a) \biggr)
\]

The above gives the intuition on how to construct $M''$. Now to
present the formal proof:

\begin{proof}
Let $M = (\Sigma, Q, q_0, F, \delta)$ and $M' = (\Sigma,Q', q_0',
F', \delta')$ such that $L = L(M)$ and $L' = L(M')$.

Define $M'' = (\Sigma, Q'', q_0'', F'', \delta'')$ as follows:
 \begin{itemize}
 \item $Q'' = Q \times Q'$
 \item $q_0'' = (q_0,q_0')$. Note that $q_0'' \in Q''$.
 \item $F'' = F \times F'$. Note that $F'' \subseteq Q''$. [Prove
 this yourself.]
 \item $\delta'' : Q'' \times \Sigma \rightarrow Q''$ by
 \[
   \delta''((q,q'),a) = (\delta(q,a), \delta'(q',a))
 \]
 where $a \in \Sigma$ and $(q,q') \in Q''$.
 Note that $\delta''$ is well-defined since $(\delta(q,a),
 \delta'(q',a)) \in Q''$. Recall that $\delta''$ induces the function
 $\delta''^* : \Sigma^* \times Q'' \rightarrow Q''$
 \end{itemize}
By definition, $M''$ is a DFA.

We now want to show that $L(M'') = L(M) \cap L(M')$. Let $x \in
\Sigma^*$. Then
\begin{align*}
x \in L(M'')
&\iff \delta''^*(q_0'',x) \in F'' \\
&\iff \delta''^*((q_0,q'_0),x) \in F \times F' \\
&\iff (\delta^*(q_0,x), \delta'^*(q',x)) \in F \times F' \\
&\iff \delta^*(q_0,x) \in F, \,\,\, \delta'^*(q_0',x) \in F' \\
&\iff x \in L(M), \,\,\, x \in L(M') \\
&\iff x \in L(M) \cap L(M')
\end{align*}
Hence $L(M'') = L(M) \cap L(M')$.
\end{proof}

So the proof is complete, right? Are you sure?
\\

\begin{lem}
Assume the notation in the above proof. Then
\[
 \delta''^*((q,q'),x) = (\delta^*(q,x), \delta^*(q',x))
\]
for any $x \in \Sigma^*$, $q \in Q$ and $q' \in Q'$.
\end{lem}

\begin{proof}
We will prove this by Mathematical Induction on $|x|$.
In other words let $P(n)$ be the statement that for any
string $x \in \Sigma^*$ with $|x| = n$, we have
\[
 \delta''^*((q,q'),x) = (\delta^*(q,x), \delta^*(q',x))
\]

When $|x| = 0$, i.e., $x = \ep$, we have, by definition
\begin{align*}
 \delta''^*((q,q'),x) &= (q,q') \\
 \delta^*(q,x) &= q \\
 \delta^*(q',x) &= q' \\
\end{align*}
Hence $\delta^*((q,q'),x) = (\delta^*(q,x), \delta^*(q',x))$.
Therefore $P(0)$ holds.

Now we want to prove that for $n \geq 0$, if $P(n)$ is true,
then $P(n+1)$ is also true.
Now assume that
\[
 \delta^*((q,q'),x) = (\delta^*(q,x), \delta^*(q',x))
\]
for any string $x \in \Sigma^*$ with $|x| = n
\geq 0$. Consider a string $y\in\Sigma^*$ of length $n+1$. Then $y
= ax$ where $a \in \Sigma$ and $x \in \Sigma^*$ with $|x| = n$.
Then by the recursive definition of $\delta''^*$
\[
\delta''^*((q,q'),ax)
 = \delta''^*\biggl( \delta''((q,q'),a), \,\,\, x\biggr)
\]
For clarity, since $\delta''((q,q'),a) \in Q'' = Q \times Q'$, we
can write $\delta''((q,q'),a) = (\delta(q,a), \delta(q',a)) =
(r,r')$ for some $r \in Q$ and $r' \in Q'$. Continuing the above,
\begin{align*}
\delta''^*((q,q'),ax)
 = \delta''^* ( (r,r'), x )
 = (\delta^*(r,x), \,\,\, \delta'^*(r',x) )
\end{align*}
using the induction hypothesis since $|x| = n$.
 Therefore substituting back the expression for $r$ and $r'$:
\begin{align*}
\delta''^*((q,q'),y)
 &= \biggl(\delta^*(r,x), \,\,\, \delta'^*(r',x) \biggr) \\
 &= \biggl( \delta^*(\delta(q,a),x), \,\,\, \delta'^*(\delta(q',a),x) \biggr) \\
 &= ( \delta^*(q,ax), \delta'^*(q',ax) ) \\
 &= ( \delta^*(q,y),\delta(q',y) )
\end{align*}
Therefore the statement holds for any string $y$ of length $n+1$.

By Mathematical Induction, the statement holds for any string.
\end{proof}

I will call this either the product construction 
(because we're using cross product to form the new states) or the 
intersection construction.



\newpage
\begin{ex}
Design a $\DFA$ that accepts strings which contains at least three $0$'s
and $010$.
\qed
\end{ex}


\newpage
\section{Closure: Union}

In this section, we will prove the closure rule for union.

Let $L = L(M)$ and $L' = L(M')$ where $M = (\Sigma, Q, q_0, F,
\delta)$ and $M' = (\Sigma, Q', q'_0, F', \delta')$.

Define $M'' = (\Sigma, Q'', q_0'', F'', \delta'')$ as follows:
\begin{itemize}
 \item $Q'' = Q \cup Q' \cup\{q_0''\}$. Note that technically
 speaking $Q$ and $Q'$ are sets in different universes. We need to
 assume that we can put them both into the same universe in such a
 way that if $q \in Q$ and $q' \in Q'$, then $q \neq q'$ in this new
 universe. Furthermore $q''_0$ must obviously be an element in this
 universe distinct from any element in $Q$ and $Q'$.
 \item $q_0''$ is already explained above
 \item $F'' = F \cup F'$
 \item Define $\delta'' : \Sigma \times Q'' \rightarrow Q''$ as
 follows: Let $q \in Q''$ and $a \in \Sigma$. Note that since $Q'' = Q \cup Q'$, either
 $q \in Q$ or $q in Q'$. Furthermore since $Q \cap Q' = \empty$, $q$
 cannot be in both $Q$ and $Q'$. We define
 \[
  \delta''(q,a) =
  \begin{cases}
   \delta(q,a) & \text{ if } q \in Q \\
   \delta'(q,a) & \text{ if } q \in Q'
  \end{cases}
 \]
 \end{itemize}
 Note that by definition, $M''$ is a DFA.

 Now prove that $L(M'') = L \cup L'$. (Exercise).

I'll call this the \defterm{union construction}.



\newpage
\begin{ex}
Construct a DFA that accepts strings containing $0110$ or $1001$.
\end{ex}



\newpage
\section{Closure: Complement}

Given a DFA $M$, you can easily construct another DFA $\overline M$
such that 
\[
L(\overline{M}) = \overline{L(M)}
\]
Here's what you do: you simply change the accept state to non--accept state
and non--accept state to accept state.

WARNING: This method does not work when the construction is applied to an
NFA.

\begin{ex}
Construct a DFA that does not accept strings containing $0110$.
\end{ex}




\newpage
\section{Closure: Difference}

This will be an exercise in the future.

Let $L, L'$ be languages.
Then
\[
L - L' = L \cap \overline{L'}
\]

That's it.

\begin{ex}
Let $\Sigma = \{a, b\}$.
Design a DFA that accepts the following languages:
\[
L = \{w \in \Sigma^* \mid w \text{ contains 4 $a$'s and does not contain $a^3$}\}
\]
\end{ex}




\newpage
\section{Closure: Concatenation}

We will use an NFA construction.

If $L = L(M)$ and $L' = L(M')$. The intuition is as follows.
For a string $x \in \Sigma^*$, $x \in LL'$
if and only if $x$ is accepted by $M$ and after that if
you run it on $M'$, it is again accepted.

But how do you do "\ldots after that if you run it on $M'$\ldots"?
Easy. Join up the two machines using $\ep$-transitions.
Just add $\epsilon$-transitions from the accepting states of $L$ to
the starting state of $L$. Where do you start? At the starting state
of $L$. When do you finally accept? When the string reaches the
an accepting state of $M'$.

It's clear that $M''$ constructed above is an NFA.
Furthermore, it's clear that $L(M'') = LL'$.
Since we know that any language accepted by an NFA is also accepted by a DFA,
we're done.

Don't you think NFAs are nice?

I'll call this the \defterm{concatenation construction}.


\newpage
\begin{ex}
Construct a DFA that does not accept strings $w = w_1 w_2$
where $w_1$ contains $aba$ and $w_2$ begins with $bbaa$.
\end{ex}



\newpage
\section{Closure: Kleene Star}

The construction of a DFA of $L^*$ given a DFA of $L$
is simple once you have seen the
construction of the machine for concatenation of languages.

Given an NFA or DFA, we will be constructing an NFA.
First you add a new state to this NFA/DFA and make it the initial state of
the new machine.
Next you join the accept states of the old machine to the 
new initial state with 
$\ep$-transitions.

Old NFA:
\begin{python}
from latextool_basic import *
print automata(layout=r'''
            E
      B     
A           F
      D
            G
''',
A='initial|label=$q_0$',
E='accept',
F='accept',
G='accept',
)
\end{python}

That's it. 
I'll call this the Kleene star construction.

\begin{thm}
Let $N$ be an NFA and $N^*$ be the NFA obtained by the Kleene star 
construction.
Then
\[
L(N^*) = L(N)^*
\]
\end{thm}



\newpage
\begin{ex}
Construct an NFA that accepts $\{a, aba, abba\}^*$.
\qed
\end{ex}

\newpage
\begin{ex}
Let $\Sigma = \{a,b\}$.
Construct an NFA that accepts 
\[
( 
\{ w \in \Sigma^* \mid w \text{ ends with $bb$} \} \cdot
\{ w \in \Sigma^* \mid w \text{ starts with $aa$} \}
)^*
\]
\qed
\end{ex}


\newpage
\begin{ex}
Let $L = \{aba, bab\}$.
Construct a $\DFA$ that accepts $L^*$.
\qed
\end{ex}


\newpage
\section{Closure: Miscellaneous}

There are a lot more closure rules/operations.
Here one:

\begin{ex}
 Prove or disprove the following:
 $L$ regular $\implies$ $L^R$ regular.
\end{ex}




\newpage
\section{Closure: Homomorphism}

WATCHOUT! The following is not in the textbook!

\begin{defn}
Let $f : \Sigma \rightarrow \Sigma'$ be a map. Note that $f$
induces a map $f^* : \Sigma^* \rightarrow \Sigma'^*$ which is
defined as follows: First of all for $x \in \Sigma$,
\[
 f^*(x) =
 \begin{cases}
 f(x') \cdot f(x'') & \text{ if } x = x'x'' \neq \ep \text{ where } x' \in \Sigma, x'' \in \Sigma^*\cr
 \ep & \text{ if } x = \ep \cr
 \end{cases}
\]
\end{defn}

(For the Math experts: $f^*$ is a semigroup homomorphism. You can
also extend it to be group homomorphism on corresponding free
group. The $(\cdot)^*$ is a function from sets to semigroups or to
groups).

[CHECK]

\begin{ex}
 Let $f : \{a,b,c\} \rightarrow \{0,1\}$, $f(a) = f(b) = 0$, $f(c) = 1$.
 \itemize{
  \item Let $L$ be the set of strings with 3 $a$'s. What is $f^*(L)$?
  \item Let $L'$ be the set of strings with 3 1's. What is
  ${f^*}^{-1}(L')$?
 }
\end{ex}

\begin{ex}
 Let $f : \Sigma \rightarrow \Sigma'$ as above.
 \itemize{
  \item $L  \subseteq \Sigma^*$ regular $\implies$ $f^*(L)$
  regular
  \item $L' \subseteq\Sigma'^*$ regular $\implies$
  $(f^*)^{-1}(L')$ regular
 }
\end{ex}

