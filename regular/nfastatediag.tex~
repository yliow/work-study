\section{NFA State Diagram}

The following is a \defterm{state diagram} or the transition
diagram of a
\defterm{nondeterministic finite automata NFA} 
(or \defterm{nondeterministic finite state machine NFSM})

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=,
initial where=above]
\node[state,initial]   (q0) [shape=circle, draw] at ( 0,  0) {$q_0$};
\node[state]           (q1) [shape=circle, draw] at (-1, -4) {$q_1$};
\node[state]           (q3) [shape=circle, draw] at ( 1, -2) {$q_3$};
\node[state,accepting] (q4) [shape=circle, draw] at ( 1, -4) {$q_4$};
\node[state,accepting] (q2) [shape=circle, draw] at (-1, -6) {$q_2$};

\path[->]
(q0) edge [loop right] node {$a,b$} ()
(q0) edge node {$b$} (q1)
(q0) edge node {$\epsilon$} (q3)
(q1) edge node {$b$} (q2)
(q3) edge node {$\epsilon$} (q1)
(q3) edge node {$a$} (q4)
;
\end{tikzpicture}\end{center}


An edge labeled with symbol $a$ is called an {\bf
$a$--transition}.


\begin{ex}
 Visually, what are the differences between the state diagram of an
 NFA and a DFA?
\qed
\end{ex}

This is how you use the machine. It's very similar to the state
diagram of a DFA except that you keep track of a {\bf set} of states
instead of just one.

\begin{itemize}
 \item[(1)] Start at the {\bf start state}.
   This is the same as DFA. Look for it now. Keep track of this
   state.
 \item[(2)] Read the first character of the string; you always {\bf start
 from the left} of the string and {\bf move right}.
 \item[(3)] Go from the node you're pointing at to the {\bf nodes}
 (there might be more than one!)
 using
 the {\bf edges} labeled with the character you've just read.
 Note that you might have more than one path!
 \item[(4)] If there are $\ep$-transition, you need to keep the
  states
 you can get to via these $\ep$-transitions too.
 \item[(5)] If a path cannot have a transition, that path dies.
 \item[(6)] Repeat the above process (2)-(3) until you have no more characters.
 \item[(7)] A \defterm{final}, \defterm{accepting} or \defterm{end
 state} is a node with a double-circle boundary.
 When you have finished scanning your string left to right, you will have a set of paths.
 If there is a path that ends in an accepting state, then the
 string is accepted.
\end{itemize}






Now let's execute our NFA for several different words $w$. 
Let's call the above NFA $N_1$.

\begin{center}
\begin{tikzpicture}[shorten >=1pt,node distance=2cm,auto,initial text=,
initial where=above]
\node[state,initial]   (q0) [shape=circle, draw] at ( 0,  0) {$q_0$};
\node[state]           (q1) [shape=circle, draw] at (-1, -4) {$q_1$};
\node[state]           (q3) [shape=circle, draw] at ( 1, -2) {$q_3$};
\node[state,accepting] (q4) [shape=circle, draw] at ( 1, -4) {$q_4$};
\node[state,accepting] (q2) [shape=circle, draw] at (-1, -6) {$q_2$};

\path[->]
(q0) edge [loop right] node {$a,b$} ()
(q0) edge node {$b$} (q1)
(q0) edge node {$\epsilon$} (q3)
(q1) edge node {$b$} (q2)
(q3) edge node {$\epsilon$} (q1)
(q3) edge node {$a$} (q4)
;
\end{tikzpicture}\end{center}


First let me run $N_1$ on $w = \epsilon$. We start $N_1$ at $q_0$. 
\begin{enumerate}
\li $N_1$ stops immediately at $q_0$ since there is no character to process.
\li However $N_1$ is greedy and sees that it can also go to state $q_3$
    without processing any character and $N_1$ wants both states. 
    So it spawns a copy of itself, say $N_2$, at state $q_3$ while
    it stays at $q_0$.
    Note that $N_2$ is an exact copy of $N_1$ -- it behaves the say
    way and it has the exact same input as $N_1$. 
    The new machine $N_2$ at state $q_3$ and stops there since there's
    nothing to process.
\li However $N_2$ being just as greedy as $N_1$,
    sees that it can also go to $q_1$ without processing any character.
    So $N_2$ stays at $q_3$ while it spawns off another machine, 
    say $N_3$, at state $q_1$ while $N_2$ stays at $q_3$.
    $N_3$ stops at state $q_1$. 
\end{enumerate}
At this point, all machines stops processing characters and 
they have spawn the maximum number of machines along 
$\epsilon$-transitions. 
Everyone (everyit?) now reports their states to $N_1$ and disappears.
$N_1$ looks at all the states its descendents (and itself) have reached.
None of the $3$ machine manage to reaach an accepting state.
So $N_1$ does not accept, i.e rejects, $\epsilon$.

Now let me run $N_1$ on $w = a$. Again I start $N_1$ at $q_0$.
\begin{enumerate}
\li $N_1$ state $q_0$. It's about to process $a$.
\li $N_1$ is greedy and spawns another machine $N_2$ which is at state $q_3$.
    $N_2$'s input looks exactly like the input of $N_1$, i.e., 
    $N_2$ is about to process $a$.
\li $N_2$ is also greedy and spawns another machine $N_3$ which is at state 
    $q_1$. $N_3$ is also about to process $a$.
\end{enumerate}
At this point, we have 3 machines:
\[
	\text{$N_1$ at $q_0$, $N_2$ at $q_3$, $N_3$ at $q_1$}
\]
Each of them has an input of $w = a$ 
(i.e. none of them has processed any character yet).
\begin{enumerate}
\li Machine $N_1$ at state $q_0$ read $a$ and arrives at state $q_0$. 
However $N_1$, at state $q_0$, can spawn new machines. 
$N_1$ spawns $N_4$ at state $q_3$. $N_4$ spawns another machine $N_5$ at state $q_1$.
\li Machine $N_2$ at state $q_3$ processes character $a$ and arrives at $q4$. 
$N_2$ cannot spawn new machines since there are no 
$\epsilon$-transitions from state $q4$.
\li Now $N_3$ at $q_1$ attempts to process $a$. 
But it fails!!!  $N_3$ does not have an $a$-transition: 
it does not know what to do!!! Alas ... $N_3$ dies.
\end{enumerate}
Altogether we now have the following machines:
\[
	\text{$N_1$ at $q_0$, $N_2$ at $q4$, $N_4$ at $q_3$, $N_5$ at $q_1$}
\]
(Don't forget that $N_3$ died.) 
Now note that machine $N_2$ arrived at $q4$ 
which is an accepting state. 
It does not matter that the other machines did not arrive at an 
accepting state. 
For the original machine $N_1$ to \lq\lq win'', 
it only requires one of its \lq\lq descendents'' 
arrives at an accepting state. 
Get it? So anyway, all the other machines disappear and only $N_1$ is left and 
$N_1$ says \lq\lq YES'' to the string $a$.
Note that $N_1$ might have died during it's computation.
It does not matter: in that case just think of $N_1$ as just sitting
around and not doing any computation but simply waiting for
all the results to come back.

Sometimes you don't have to follow all the \lq\lq descendents''. 
You can see in this simple example that you if you go from 
$q_0$ to $q_3$ to $q4$, the string processed is
\[
	\epsilon a
\]
which is of course
\[
	a
\]
However when the nondeterministic state diagram is complex and the string is 
long, you might not be so lucky: the \lq\lq lucky” “descendent'' 
might be hard to find if you're not systematic.


Now let me run $N_1$ with input $w = b$. 
We start $N_1$ at $q_0$.
\begin{enumerate}
\li Machine N1 is at q0. 
\li N1 spawns N2 at q3. 
\li N2 spawns N3 at q1.
\end{enumerate}
At this point, we have 3 machines:
\[
\text{$N_1$ at $q_0$, $N_2$ at $q_3$, $N_3$ at $q_1$}
\]
Note that all 3 machines have the same input, i.e., their own copy of 
$w = b$ with no character read. 
Now these 3 machines are ready to process the first character of $w$ 
(in fact the only character in $w$).
\begin{enumerate}
\li $N_1$ processes $b$. But $N_1$ notices that it can go to either $q_0$ or $q_1$!!! 
$N_1$ is greedy and wants both options. So $N_1$ goes to $q_0$, 
but before that it spawns $N_4$ and let $N_4$ go to $q_1$. 
Now $N_1$ sees that it can spawn off a new machine $N_4$ 
at state $q_3$ and $N_4$ can spawn a new machine $N_5$ at $q_1$.
\li $N_2$ at $q_3$ begin to process $b$ ... but it does not know what to do 
with $b$!!! $N_2$ dies!!! 
\li $N_3$ at $q_1$ reads $b$ and go to state $q_2$. Unfortunately $N_3$ 
cannot spawn off a new machine.
\end{enumerate}

Altogether, we now have the following machines:
\[
\text{$N_1$ at $q_0$, $N_3$ at $q_2$, $N_4$ at $q_3$, $N_5$ at $q_1$}
\]
Note they have no more characters to process. 
Is there at least one \lq\lq winner''? Yes. 
$N_3$ manage to arrive at $q_2$ which is an accepting state. 
So the original machine $N_1$ says \lq\lq YES'' and accept $b$.

At this point we know that the language accepted by $N_1$, i.e., 
$L(N_1)$ does not contain $\epsilon$, but contains both $a$ and $b$.

Get the idea? You \lq\lq bootup'' 
the machine at the start state. 
Before the machine process any character, it greedily spawns of greedy descendents along e-transitions. Next each descendent reads one character x along as many transitions labeled x as they can – there might be more than one transition labeled with x. Not that there might be a machine at a state where it does not know what to do with x. In that case, the machines crashes and dies. After reading that character x, they all greedily spawns off greedy descendents. 
Start at start state. Take all the free steps (the $\epsilon$-transitions).
Each machine read one character greedily, 
and spawns greedy descendents along the free steps.
Repeat the above.
The original machine will accept the word is (at least) one of its descendents accept.

Suggestion: To be organized, I suggest you draw your computation this way. Whenever you spawns machine, line them up vertically like this:

\begin{console}
q0
 | e
 |
 V
q3
 | e
 |
 V
q1
\end{console}

When they all read a character, say a, draw horizontal arrows:

\begin{console}
       a
q0 --------> q0
 | e
 |
 V     a
q3 --------> q4
 | e
 |
 V     a
q1 ---------> X
\end{console}

Draw an X when a machine crashes. Now you spawn for the machine at q0 and q4, drawing the e-arrows vertically again. Repeat. You will find this more organized and harder to miss things.















\begin{defn}
If the NFA is denoted $N$, then $L(N)$ is the language accepted by
$N$, in other words $L(N)$ is the set of {\bf all} strings over
$\Sigma$ accepted by $N$.
\end{defn}

\newpage
\begin{ex}
Is $b$ accepted by the above NFA? Is $ba$ accepted? Is $bab$
accepted? What is the language accepted by the NFA with the above
transition diagram.
\qed
\end{ex}

\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{\}
\]
Compare with a DFA.
\qed
\end{ex}


\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{a\}
\]
Compare with a DFA.
\qed
\end{ex}


\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{\ep\}
\]
Compare with a DFA.
\qed
\end{ex}


\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{\ep, a\}
\]
Compare with a DFA.
\qed
\end{ex}


\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{a, b\}
\]
Compare with a DFA.
\vspace{2in}
\qed
\end{ex}


\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{a, a^2\}
\]
Compare with a DFA.
\vspace{2in}
\qed
\end{ex}


\newpage
\begin{ex}
Draw an NFA diagram that accepts the following
language of strings over $\Sigma =
\{ a, b \}$ 
\[
L = \{ab, ba\}
\]
Compare with a DFA.
\qed
\end{ex}


\newpage
\begin{ex}
Draw a state diagram of an NFA that accepts the language of
strings over $\Sigma = \{a,b\}$ that contains $aaa$, i.e.,
\[
 L = \{\, x \in \Sigma^*
 \,|\, x = ya^3z \text{ \, for some \, } y,z \in \Sigma^* \,\}
\]
Compare with a DFA.
\vspace{2in}
\qed
\end{ex}


\newpage
\begin{ex}
Draw a transition diagram of an NFA that accepts the language of
strings over $\Sigma$ that does not contain $aaa$.
\vspace{2in}
\qed
\end{ex}

\newpage
\begin{ex}
Draw a transition diagram of an NFA that accepts the language of
strings over $\Sigma = \{a,b\}$ that contains $abab$.
Compare with a DFA.
\vspace{2in}
\qed
\end{ex}

\newpage
\begin{ex}
Draw a transition diagram of an NFA that accepts the language of
strings over $\Sigma = \{a,b\}$ where the number of $a$ is exactly
$\equiv 1\pmod 4$. So the number of $a$s can be $1,5,9,\ldots$.
Compare with a DFA.
\vspace{2in}
\qed
\end{ex}

\newpage
\begin{ex}
 Let $N$ be an NFA. Define a DFA $M$ such that $L(M) = L(N)$. We
 will see later that in fact the converse is also true.
\end{ex}
