\section{Deterministic Finite State Machines}

We need to formalize DFAs.

\begin{defn}
 A \defterm{deterministic finite automata} 
 or a \defterm{deterministic finite state machine}
 is defined by $(\Sigma,Q,q_0,F,\delta)$ where
 \begin{tightlist}
  \item $\Sigma$ is a finite set
  \item $Q$ is a set of \defterm{states}
  \item $q_0 \in Q$ is the \defterm{initial state}
  \item $F \subseteq Q$ is the set of \defterm{final} or \defterm{accepting
  states}
  \item $\delta : Q \times \Sigma \rightarrow Q$ is the \defterm{transition
  function}.
 \end{tightlist}
 In this case we will say that $M$ is defined over $\Sigma$.
\end{defn}

(Note: In books the ingredients
for a DFA is listed in this order $(Q, \Sigma, \delta, q_0, F)$
instead.)


\newpage
\begin{ex} Write down the formal definition of the DFA from the
state diagram in the previous section.
\begin{python}
from latextool_basic import *
print automata(layout="""
A  B  C
""",
edges="A,$a$,A|A,$b$,B|B,$a$,A|B,$b$,C|C,$a,b$,C",
A="initial|label=$q_0$",
B="label=$q_1$",
C="accept|label=$q_2$",
)
\end{python}
\qed
\end{ex}


\newpage
With the above formal definition of a DFA, we can now formally
define what we mean when we say that a string is accepted by a
DFA.

\begin{defn}
Let $M=(\Sigma,Q,q_0,F,\delta)$ be a DFA, $a\in\Sigma$ and $x \in
\Sigma^*$.
\begin{itemize}
  \item We write
   \[ (q,ax) \vdash (q',x) \]
   if
   \[ \delta(q,a) = q' \]
   This is a \textbf{computation} for string $ax$.
  \item We write
  \[ (q,x) \vdash^* (q',x') \]
  if either $(q,x) = (q',x')$ or there is a sequence of
  computations from $(q,x)$ to $(q',x')$:
  \[ (q,x) \vdash \cdots \vdash (q',x') \]
\end{itemize}
\end{defn}

Note that $(q, x) \in Q \times \Sigma^*$.
Therefore $\vdash$ is a relation on $Q \times \Sigma^*$.

\begin{defn}
Given $x \in \Sigma^*$, we say that $x$ is
\defterm{accepted} by $M$ iff
\[(q_0,x) \vdash^* (q',\ep) \quad \text{where \,} q' \in F \]
\end{defn}

You can also define acceptance using an \lq\lq extension'' of $\delta$:

\begin{defn}
It is convenient to extend the transition function $\delta$ so that
we allow strings for the second argument instead of just character.
Define
\[
 \delta^* : Q \times \Sigma^* \rightarrow Q
\]
\begin{itemize}
 \item[(a)] $\delta^*(q, \ep) = q$ for all $q \in Q$
 \item[(b)] $\delta^*(q, ax) = \delta^*( \delta(a,q), x)$ for $a \in
 \Sigma$, $x \in \Sigma^*$, $q \in Q$.
\end{itemize}
\end{defn}


Now we can define the {\it whole} language accepted by $M$:

\begin{defn} Let $M$ be a DFA. Then the \defterm{language} accepted by $M$,
denoted $L(M)$, is the language of strings over $\Sigma$ accepted
by $M$, i.e.,
\[
L(M) = \{x \in \Sigma^* \mid (q_0, x) \vdash^* (q, \ep) \text{ where } q \in F \}
\]
or
\[
L(M) = \{x \in \Sigma^* \mid \delta^* (q_0, x) \in F \}
\]
\end{defn}

\newpage
\begin{ex}
\begin{tightlist}
\item Draw DFA $M$ over $\Sigma = \{0\}$ such that $L(M) = \{\}$.
\item Next, define this DFA formally.
\item Now, draw a graph where the nodes are $(q, x)$ where
$q$ runs through all the states of your DFA and $x$
runs through all the words $\Sigma^*$ ... wait
that's infinite ... you can't do that.
OK ... just draw $(q, x)$ where $q$ runs over all states
and $x$ runs over all words of length $<= 5$.
Draw directed edges in the graph so that
there's an arrow from $(q,x)$ to $(q', x')$ if
$(q, x) \vdash (q', x')$, i.e., $\delta(q, x) = \delta(q', x')$.
\item Finally graph the graph as the above except that
there's an arrow from $(q, x)$ to $(q', x')$
if $(q, x) \vdash (q', x')$, i.e.,
$\delta^*(q, x) = (q', x')$.
\end{tightlist}
\qed
\end{ex}

\newpage
\begin{ex}
  Do the exercise but this time for this language:
  The DFA accepts the language of strings over 
  $\Sigma = \{a, b\}$ that contains $abab$.
  \qed
\end{ex}


\newpage
Languages over $\Sigma$ of the above kind is important.
So let's give them a name: 

\begin{defn}
A language $L$ over $\Sigma$
is \defterm{regular} if $L = L(M)$ where $M$ is a DFA over $\Sigma$.
We will write $\Reg_\Sigma$ for the collection of all 
regular languages over $\Sigma$.
\end{defn}

\begin{python}
from latextool_basic import *

p = Plot()
r0 = Rect(0, 0, 2, 2)
x,y = r0.top()
y += 0.25
t0 = Rect(x, y, x, y, label=r'$\DFA_\Sigma$', linewidth=0)
p += r0
p += t0

r1 = Rect(4, 0, 8, 4)
x,y = r1.top()
y += 0.25
t1 = Rect(x, y, x, y, label=r'$\LANG_\Sigma$', linewidth=0)
p += r1
p += t1

r2 = Rect(4, 0, 5.5, 1.5, background='black!10')
p += r2
x,y = r2.top()
y += 0.25
t2 = Rect(x, y, x, y, label=r'$\Reg_\Sigma$', linewidth=0)
p += t2


x0,y0 = r0.right()
x1,y1 = r1.left()
p += Line(points=[(x0,y0), (x1,y0)], endstyle='>')

print p
\end{python}



\newpage
\section{Simple implementation}
You can actually simulate the computation
of a DFA using a programming language such as C++, Java, etc.
Let's write a C++ program to simulate this DFA:


\begin{python}
from latextool_basic import *
print automata(layout="""
A  B  C
""",
edges="A,$a$,A|A,$b$,B|B,$a$,A|B,$b$,C|C,$a,b$,C",
A="initial|label=$q_0$",
B="label=$q_1$",
C="accept|label=$q_2$",
)
\end{python}


Here's the program:

{\small
\begin{console}
#include <iostream>
#include <string>

int main()
{
    std::string x;
    std::cin >> x;

    int state = 0;
    std::cout << 'q' << state << ", ";
    for (int i = 0; i < x.length(); i++)
    {
        char c = x[i];
        switch (state)
        {
            case 0:
                if (c == 'a') state = 0;
                else if (c == 'b') state = 1;
                break;
            case 1:
                if (c == 'a') state = 0;
                else if (c == 'b') state = 2;
                break;
            case 2:
                break;
        } 
        std::cout << 'q' << state << ", ";
    }
   
    std::cout << (state == 2 ? "" : "not ") << "accepted\n";
    return 0;
}
\end{console}
}

For this program, the states of a computation is shown as well as whether is
is accepted or not.
