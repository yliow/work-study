\section{Non-array implementation}

For a non-array implementation of heaps,
consider this:

\begin{python}
from latextool_basic import *
print r"""
\begin{center}
%s
\end{center}
""" % graph(yscale=1, xscale=1,
layout="""
        A 
    B       C 
  D   E   F   G
 H I J K L M 
""",
minimum_size='8mm',
edges='A-B,A-C,B-D,B-E,C-G,C-F,D-H,D-I,E-J,E-K,F-L,F-M',
A=r'label=\texttt{34}',
B=r'label=\texttt{28}',
C=r'label=\texttt{16}',
D=r'label=\texttt{23}',
E=r'label=\texttt{25}',
F=r'label=\texttt{13}',
G=r'label=\texttt{7}',
H=r'label=\texttt{10}',
I=r'label=\texttt{8}',
J=r'label=\texttt{24}',
K=r'label=\texttt{14}',
L=r'label=\texttt{3}',
M=r'label=\texttt{9}',
) 
\end{python}

Of course I need a pointer to the root.
That's pretty obvious.
Another thing to note is that because of the way I add nodes,
i.e., always at the lowest level and left-to-right, I should have a pointer
to the parent where I have a new node.

Of course with the pointer to the root, you can always compute where
the next insert should be.

\begin{ex}
  Write a function that takes the pointer-to-root of a
  max heap (or more generally a complete binary
  tree) and returns the pointer to the node that will be the parent
  of the next insert.
  \qed
\end{ex}

However that takes $(\log n)$ time.
So we might as well have a pointer that records where the
insert should go.
But that's not enough.
Once a level is full, we need to go to the next level.
Therefore we need two (and not one) extra pointer.
Like this:

\begin{python}
from latextool_basic import *
p = Plot()
h = graph2(yscale=1, xscale=1,
layout="""
        A 
    B       C 
  D   E   F   G
 H I J K L M N
""",
minimum_size='8mm',
edges='A-B,A-C,B-D,B-E,C-G,C-F,D-H,D-I,E-J,E-K,F-L,F-M,G-N',
A=r'label=\texttt{34}',
B=r'label=\texttt{28}',
C=r'label=\texttt{16}',
D=r'label=\texttt{23}',
E=r'label=\texttt{25}',
F=r'label=\texttt{13}',
G=r'label=\texttt{7}',
H=r'label=\texttt{10}',
I=r'label=\texttt{8}',
J=r'label=\texttt{24}',
K=r'label=\texttt{14}',
L=r'label=\texttt{3}',
M=r'label=\texttt{9}',
N=r'label=\texttt{5}',
)
p += h

p += r'\node (proot) at (7,0.5) {\texttt{proot}} ;'
p += r'\path [-triangle 60] (proot) edge[] (A);'

p += r'\node (p0) at (1,-4.5) {\texttt{p0}} ;'
p += r'\path [-triangle 60] (p0) edge[] (D);'

p += r'\node (p1) at (13,-4.5) {\texttt{p1}} ;'
p += r'\path [-triangle 60] (p1) edge[] (G);'

p += r'\node (p) at (13,-1.5) {\texttt{p}} ;'
p += r'\path [-triangle 60] (p) edge[] (G);'

print p
\end{python}

Note that each node has not just left child and right child pointer.
When we do delete, we might need to go to the previous level.
That means that each node must have a parent pointer too.
Of course the parent pointer is also needed when I do heapify-up, right?

If I insert \texttt{4} to the above, then I get this:

\begin{python}
from latextool_basic import *
p = Plot()
h = graph2(yscale=1, xscale=1,
layout="""
        A 
    B       C 
  D   E   F   G
 H I J K L M N O
""",
minimum_size='8mm',
edges='A-B,A-C,B-D,B-E,C-G,C-F,D-H,D-I,E-J,E-K,F-L,F-M,G-N,G-O',
A=r'label=\texttt{34}',
B=r'label=\texttt{28}',
C=r'label=\texttt{16}',
D=r'label=\texttt{23}',
E=r'label=\texttt{25}',
F=r'label=\texttt{13}',
G=r'label=\texttt{7}',
H=r'label=\texttt{10}',
I=r'label=\texttt{8}',
J=r'label=\texttt{24}',
K=r'label=\texttt{14}',
L=r'label=\texttt{3}',
M=r'label=\texttt{9}',
N=r'label=\texttt{5}',
O=r'label=\texttt{4}',
)
p += h

p += r'\node (proot) at (7,0.5) {\texttt{proot}} ;'
p += r'\path [-triangle 60] (proot) edge[] (A);'

p += r'\node (p0) at (0,-5.5) {\texttt{p0}} ;'
p += r'\path [-triangle 60] (p0) edge[] (H);'

p += r'\node (p1) at (14,-5.5) {\texttt{p1}} ;'
p += r'\path [-triangle 60] (p1) edge[] (O);'

p += r'\node (p) at (0,-2.5) {\texttt{p}} ;'
p += r'\path [-triangle 60] (p) edge[] (H);'

print p
\end{python}

If I add \texttt{8}, I get this:

\begin{python}
from latextool_basic import *
p = Plot()
h = graph2(yscale=1, xscale=1,
layout="""
        A 
    B       C 
  D   E   F   G
 H I J K L M N O
P
""",
minimum_size='8mm',
edges='A-B,A-C,B-D,B-E,C-G,C-F,D-H,D-I,E-J,E-K,F-L,F-M,G-N,G-O,H-P',
A=r'label=\texttt{34}',
B=r'label=\texttt{28}',
C=r'label=\texttt{16}',
D=r'label=\texttt{23}',
E=r'label=\texttt{25}',
F=r'label=\texttt{13}',
G=r'label=\texttt{7}',
H=r'label=\texttt{10}',
I=r'label=\texttt{8}',
J=r'label=\texttt{24}',
K=r'label=\texttt{14}',
L=r'label=\texttt{3}',
M=r'label=\texttt{9}',
N=r'label=\texttt{5}',
O=r'label=\texttt{4}',
P=r'label=\texttt{8}',
)
p += h

p += r'\node (proot) at (8,0.5) {\texttt{proot}} ;'
p += r'\path [-triangle 60] (proot) edge[] (A);'

p += r'\node (p0) at (1,-5.5) {\texttt{p0}} ;'
p += r'\path [-triangle 60] (p0) edge[] (H);'

p += r'\node (p1) at (15,-5.5) {\texttt{p1}} ;'
p += r'\path [-triangle 60] (p1) edge[] (O);'

p += r'\node (p) at (1,-2.5) {\texttt{p}} ;'
p += r'\path [-triangle 60] (p) edge[] (H);'

print p
\end{python}

Once I add a \texttt{9}, I get this:


\begin{python}
from latextool_basic import *
p = Plot()
h = graph2(yscale=1, xscale=1,
layout="""
        A 
    B       C 
  D   E   F   G
 H I J K L M N O
P Q
""",
minimum_size='8mm',
edges='A-B,A-C,B-D,B-E,C-G,C-F,D-H,D-I,E-J,E-K,F-L,F-M,G-N,G-O,H-P,H-Q',
A=r'label=\texttt{34}',
B=r'label=\texttt{28}',
C=r'label=\texttt{16}',
D=r'label=\texttt{23}',
E=r'label=\texttt{25}',
F=r'label=\texttt{13}',
G=r'label=\texttt{7}',
H=r'label=\texttt{10}',
I=r'label=\texttt{8}',
J=r'label=\texttt{24}',
K=r'label=\texttt{14}',
L=r'label=\texttt{3}',
M=r'label=\texttt{9}',
N=r'label=\texttt{5}',
O=r'label=\texttt{4}',
P=r'label=\texttt{8}',
Q=r'label=\texttt{9}',
)
p += h

p += r'\node (proot) at (8,0.5) {\texttt{proot}} ;'
p += r'\path [-triangle 60] (proot) edge[] (A);'

p += r'\node (p0) at (1,-5.5) {\texttt{p0}} ;'
p += r'\path [-triangle 60] (p0) edge[] (H);'

p += r'\node (p1) at (15,-5.5) {\texttt{p1}} ;'
p += r'\path [-triangle 60] (p1) edge[] (O);'


p += r'\node (p1) at (3,-5.5) {\texttt{p}} ;'
p += r'\path [-triangle 60] (p1) edge[] (I);'

print p
\end{python}

Get it?

  
Clearly the above idea works for complete trees where
nodes are added left-to-right at the last level.

Note that \verb!p! points to the parent where new nodes should be
attached but does not have information on whether it should be
as a left or as a right child.
You can also include an integer variable \texttt{num\_children}
to tell you how many children
there are.
If the number of children is 0, then the new node should be
attached as a left child.
If the number of children is 1, then the new node should be attached
as a right child.

\begin{ex}
  Implement a max heap using the above idea.
  \qed
\end{ex}

Clearly if the whole level is linked up as a doubly linked list,
then that would work too.
However that's an overkill. Plus we would need more pointers
at each node (parent, left child right child, next, previous)
which would be a waste of memory.
