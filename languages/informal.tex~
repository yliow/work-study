\section{Informal Introduction to Languages}

We will now introduce some terms used in the study of Languages in
CS. Most of it is just giving terms in set theory some new names.

Let $\Sigma = \{a,b,c\}$. The following is a \defterm{string} of
\textbf{length} 5:
\[ x = bccab \]
Two strings are \textbf{equal} if elements of $\Sigma$ appears in the
string in the same order. You can \textbf{concatenate} strings: For
instance
\[ x \cdot (aaab) = bccabaaab \]
We include an \textbf{empty string} written $\ep$. The following
holds for $\ep$:
\[ \ep bccab = bcca\ep\ep b = bccab\ep\ep\ep \]
Given a string $x$ we can define $|x|$, the \defterm{length} of $x$.
For instance:
\[
  |\ep| = 0, \quad |ab| = 2, \quad |a\ep\ep\ep b| = 2
\]
If $L$ is a set of strings (not necessarily all the strings) is a
\defterm{language} over $\Sigma$. $\Sigma$ is said to be the alphabet of
$L$. Elements of $L$ are called \defterm{words}. If a word has
length $k$, it's also called a \defterm{$k$--word}.

For instance take your favorite programming language, say C++. A
string of the form:
\[
\text{\texttt{ if ( x == 0 ) x = 1; }}
\]
is a string in the C++ language.
You can already see words such as
\[
\texttt{if}
\]
and
\[
\texttt{==}
\]
and even
\[
\texttt{(}
\]
In this case the alphabet is pretty much all the
visible character on your keyboard.
%Formally
%\[
% \token{ \text{ \texttt{IF}   }} \
% \token{ \text{ \texttt{(}    }} \
% \token{ \text{ \texttt{VAR}  }} \
% \token{ \text{ \texttt{==}   }} \
% \token{ \text{ \texttt{INT}  }} \
% \token{ \text{ \texttt{)}    }} \
% \token{ \text{ \texttt{VAR}  }} \
% \token{ \text{ \texttt{=}    }} \
% \token{ \text{ \texttt{INT}  }} \
% \token{ \text{ \texttt{;}    }}
%\]
%So you see the the alphabet $\Sigma$ include keywords like
%$\token{
%  \text{ \texttt{IF} }
%}$.
%Variables are changed to
%$\token{
%  \text{ \texttt{VAR} }
%}$. Etc.

The language therefore specifies all possible in \lq\lq words''
C++.
See how important the concept is now?

The above tells us that language theory (and automata theory ... later),
although it seems abstract, can be very practical and useful.

In fact it's even more important than for the sake of writing
programs.
Suppose we consider the symbols $\Sigma$ so be the set
\[
\Sigma = \{0,1,2,3,4,5,6,7,8,9,+,=\}
\]
Right now just think of 0,1,2,...,9 as symbols.
Forget about the fact that they look like numbers.
Also forget the fact that $+$ looks like addition: it's just a symbol.
Same for $=$: it's just a symbol.
Now consider the language
\[
L = \{x \mid \text{$x$ when re-interpreted as a math equation is valid}
\}
\]
For instance the word
\[
1+1=2
\]
is word over $\Sigma$. When we re-think this word (or string) as
representing the {\it mathematical} fact
\[
\text{1+1=2}
\]
we see that the mathematical fact is true.
Hence
\[
\text{1+1=2} \in L
\]
On the other hand although $\text{2+3=7}$ is a word over $\Sigma$,
it definitely does not represent a valid mathematical fact.
Hence
\[
\text{2+3=7} \notin L
\]
And of course the word
\[
\text{2+52=}
\]
is definitely not in $L$.

The point is that we can use languages to define problems.
For instance the problem 
\[
\text{{\it \lq\lq Determine all valid integer addition expressions of the form $x + y = z$.''}}
\]
essentially gives rise to $L$.
(Different problems will give rise to different languages.)

The question is then: Can we \lq\lq compute'' $L$?
More precisely, is there a way to tell, when we are given a word $x$
over the above $\Sigma$, that $x$ is in $L$?

The \lq\lq is there a way to tell'', essentially means that we
want to develop a mathematical way to give
us a YES or NO answer.
And that \lq\lq thing'' that will give us a YES or NO to the above $L$
is what we are aiming towards.

And that's what we call an automata.
Therefore an automata can be thought of as mathematical algorithms.

You will see that there are many classes of automatas.
For simple languages, we only need to define \lq\lq simple'' automatas.
For complex languages, we will need \lq\lq complex'' automatas.
We will for instance study the following classes of automatas:
\begin{enumerate}
\item Finite state automatas 
\item Pushdown automatas
\item Deterministic pushdown automatas (Optional)
\item Turing machines
\end{enumerate}
