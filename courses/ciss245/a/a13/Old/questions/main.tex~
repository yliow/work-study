\input{myassignmentpreamble.tex}
\input{yliow}
\input{ciss245}
\renewcommand\TITLE{Assignment 13}

\begin{document}
\topmatter

\objectives
{
    \begin{enumerate}
        \item Write a class template with member and non-member functions.
    \end{enumerate}
}

As always read the whole document carefully before diving into coding.


\newpage
Q1.

The goal is to convert a (regular) class to a template class. The class chosen is our
\verb!vec2d! class.


We already have a vec2d class. Objects of this class models 2-dimensional vectors with double coordinates. Frequently in games (or scientific simulation), floats are sufficient. Note that doubles can represent more real numbers than floats. Furthermore in many “simple” games such as 2-d games from the 80s, integer coordinates are enough and integer operation are a lot faster than double or float operations. 

The goal of this question is to build a template 2-dimensional vector class,
vec2. You should use the vec2d class from our previous assignment. With this class we
can create 2-dimensional vectors of different numeric types
(\verb!int!, \verb!float!, \verb!double!) like this:
\begin{Verbatim}[frame=single]
vec2< int > u(1, 2);         // u is a 2-d vector with integer coordinates
vec2< float > v(1.2f, 3.4f); // v is a 2-d vector with float coordinates
vec2< double > w(1.2, 3.4);  // w is a 2-d vector with double coordinates
\end{Verbatim}
  
In your \verb!vec2! header file you should include three typedefs:
\begin{tightlist}
\li \verb!vec2i! which is an alias for \verb!vec2< int >!
\li \verb!vec2f! which is an alias for \verb!vec2< float >!
\li \verb!vec2d! which is an alias for \verb!vec2< double >!
\end{tightlist}
Of course this depends on \verb!vec2!,
the these typedefs should be after the \verb!vec2! class.

With these typedefs the above examples become
\begin{Verbatim}[frame=single]
vec2i u(1, 2); // u is a 2-d vector with integer coordinates
vec2f v(1.2f, 3.4f); // v is a 2-d vector with float coordinates
vec2d w(1.2, 3.4); // w is a 2-d vector with double coordinates
\end{Verbatim}

Note that the length function,
\verb!len()!,
must return a \verb!double! regardless of the template type parameter.

Test your code thoroughly.
The test file must be named \verb!testvec2.cpp!.
(The test cases you should include should be very similar to the test code
for \verb!vec2d!.)

WARNING: I've already mentioned this. You must keep all the code for
templates in header files. 

This illustrates a very common approach to developing a class template.
You usually first pick a special case of the template and develop it as a
concrete class before you generalize it to a class template.
In many cases once the specific concrete case works correctly,
the generic template case works with very little extra work.
On the other hand, if you begin with the class template directly,
you usually end up getting lots of convoluted error messages.
In general error message from template classes requires a lot more
carefully reading. Hence it's more time consuming to work directly on
a class template.
 


\end{document}
