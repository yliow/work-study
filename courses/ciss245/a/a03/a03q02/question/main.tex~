Write the string copy function:
\begin{console}
void str_cpy(char x[], char y[]);
\end{console}
The prototype should be added to \verb!mystring.h!
while the implementation of the function is in \verb!mystring.cpp!.

The function copies \verb!y! to \verb!x!.
For instance, if \verb!y! is the string \verb!"hello world"!,
after calling \verb!str_cpy(x, y)!, then \verb!x! is \verb!"hello world"!.

The following \verb!main.cpp! must be included
{\small
\begin{Verbatim}[frame=single,commandchars=\~\!\@]
#include <iostream>
~textred!#include <limits>@
#include "mystring.h"

const int MAX_BUF = 1024;


void test_str_cmp()
{
    // earlier test function
}


void test_str_cpy()
{
    char x[MAX_BUF];
    char y[MAX_BUF];

    std::cin.getline(y, MAX_BUF);
    str_cpy(x, y);
    std::cout << x << std::endl;
    return;
}


int main()
{
    int i = 0;
    std::cin >> i;
    ~textred!std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');@

    switch (i)
    {
        case 0:
            test_str_cmp();
            break;
        case 1:
            test_str_cpy();
            break;
    }
    return 0;
}
\end{Verbatim}
}

{\small
\textsc{Test 1}
\begin{console}[commandchars=\\\{\}]
\underline{1}
\underline{hello world}
hello world
\end{console}
\textsc{Test 2}
\begin{console}[commandchars=\\\{\}]
\underline{1}
\underline{1 2 3}
1 2 3
\end{console}

You are strongly advised to try more test cases of your own.
