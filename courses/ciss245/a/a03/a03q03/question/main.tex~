Write a \lq\lq find character in string'' function
\begin{console}
int str_chr(char x[], char c);
\end{console}
that returns the index where \verb!c! first occurs in \verb!x!.
If \verb!c! does not occur in \verb!x!, then -1 is returned.

For instance if \verb!x! is \verb!"hello world"!
and \verb!c! is \verb!'o'!, then
\texttt{str\_\textred{chr}(x, c)} returns 4.

{\small
\begin{Verbatim}[frame=single,commandchars=\~\!\@]
#include <iostream>
#include <limits>
#include "mystring.h"

const int MAX_BUF = 1024;


void test_str_cmp()
{
    // earlier test function
}


void test_str_cpy()
{
    // earlier test function
}


void test_str_chr()
{
    char x[MAX_BUF];
    char c;

    std::cin.getline(x, MAX_BUF);
    std::cin >> c;
    
    std::cout << str_~textred!chr@(x, c) << std::endl;
    return;
}


int main()
{
    int i = 0;
    std::cin >> i;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    switch (i)
    {
        // earlier cases
        case 2:
            test_str_chr();
            break;
    }
    return 0;
}
\end{Verbatim}
}

{\small
\textsc{Test 1}
\begin{console}[commandchars=\\\{\}]
\underline{2}
\underline{hello world}
\underline{w}
6
\end{console}
\textsc{Test 2}
\begin{console}[commandchars=\\\{\}]
\underline{2}
\underline{hello world???}
\underline{?}
11
\end{console}

You are strongly advised to try more test cases of your own.
