The following is a practice on using pointers and
arrays in the free store.

Because your cellphone/smartphone went off in your history class,
you have been issued the following punishment.

You are sent off to a 
mansion with $n$ doors.
\begin{tightlist}
\li You run from door 0 to door $n-1$ and open all of them.
\li Next, you run from door $n - 1$ to door 0 and close every other door.
(Example: If $n$ is 10, then you close door 9, 7, 5, etc.)
\li Next, you run from door $0$ to door $n-1$ opening every third door.
(Example: You open door 0, 3, 6, ...)
This is your run \#3.
\li Next, you run from door $n-1$ to $0$, closing every fourth door.
\li Etc.
\end{tightlist}
You make $r$ runs altogether. 
(Besides programming, you now know something about the dangers of
leaving your smartphone on, right?)

The question is this: how many doors are open at the end of $r$ runs?


Complete the following program.
Note that you must use the skeleton code.
\begin{console}
int opendoors(int n, int r)
{
    bool * open;
    // TODO: Allocate an array of n values for open to point to
    // You want open[i] to be true when door i is open.

    // Scan open left-and-right r times.

    int count = 0;
    // Count number of values in the array open points to 
    // which are true

    // TODO: Deallocate the memory used by doors.

    return count;
}


int main()
{
    int n, r;
    std::cin >> n >> r;
    std::cout << opendoors(n, r) << std::endl;
    return 0;
}
\end{console}
