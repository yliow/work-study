\section{Quicksort: Inplace}



Now that I've given you one partition strategy, let's talk about
sorting inplace, 
i.e., without creating extra arrays.
The idea is just like mergesort.
In fact when you look at the first partition strategy I've shown,
you notice that I did not use any extra arrays.
Therefore if you have an inplace partition strategy, you apply it to
the whole array, and recursively on the \verb!left! and \verb!right! piles.
For instance if you have an array of integers values:
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.8, 
                 cellheight=0.8,
                 arr=[20*['']],
                )
p.add(s)
print p
\end{python}
and you apply a partition strategy to get this, say with a pivot of 
\verb!42!:
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.8,
                 cellheight=0.8,
                 arr=[7*[''], ['42'], 12*['']],
                 chunklabels=['left','','right'],
)
p.add(s)
print p
\end{python}

You of course also apply the partition strategy to the \verb!left!,
say with a pivot of \verb!23!:
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.8,
                   cellheight=0.8,
                   arr=[3*[''],['23'],3*[''], ['42'] + 12*['']],
                   chunklabels=['left','','right'],
)
p.add(s)
print p
\end{python}
And you keep doing it until you reach base cases.
Etc.
Get it?
Of course if you apply an inplace partition strategy say to the \verb!right!
pile of the above:
it will have its own \verb!left! and \verb!right! of course, say:
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.8,
                   cellheight=0.8,
                   arr=[7*[''] + ['42'], 4*[''], ['83'],7*['']],
                   chunklabels=['','left','','right'],
)
p.add(s)
print p
\end{python}

Of course this means that, in general, if we have an 
inplace partition strategy for an {\it array}, we need to modify it so that
the partition operate on a {\it subarray}.


\begin{ex}
Using partition strategy 1 with basic quicksort
(i.e., always choosing the first value in the array you're working on), 
perform quicksort on the following array

\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=1, 
                   cellheight=0.5,
                   arr=[[3,2,1,3,4,9,6,7,0,2,4,8]],
)
p.add(s)
print p
\end{python}

Here we go:

{\small
\begin{python}
from latextool_basic import *
p = Plot()

y = 0
def xyz(xs):
    global y
    y -= 1.8
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs,
                        chunklabels=['','left','TODO','right'])
    return t

def xyz2(xs):
    global y
    y -= 1.1
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs)
    return t

s = xyz([[3],[],[2,1,3,4,9,6,7,0,2,4,8],[]]); p.add(s)
s = xyz([[3],[2],[1,3,4,9,6,7,0,2,4,8],[]]); p.add(s)
s = xyz([[3],[2,1],[3,4,9,6,7,0,2,4,8],[]]); p.add(s)
s = xyz([[3],[2,1],[3,4,9,6,7,0,2,4,8],[]]); p.add(s)
s = xyz([[3],[2,1,3],[4,9,6,7,0,2,4,8],[]]); p.add(s)
s = xyz([[3],[2,1,3],[8,9,6,7,0,2,4],[4]]); p.add(s)
s = xyz([[3],[2,1,3],[9,6,7,0,2,4],[8,4]]); p.add(s)
s = xyz2([[3],[2,1,3],[6,7,0,2,4],[9,8,4]]); p.add(s)
s = xyz2([[3],[2,1,3],[7,0,2,4],[6,9,8,4]]); p.add(s)
s = xyz2([[3],[2,1,3],[0,2,4],[7,6,9,8,4]]); p.add(s)
s = xyz2([[3],[2,1,3,0],[2,4],[7,6,9,8,4]]); p.add(s)
s = xyz2([[3],[2,1,3,0,2],[4],[7,6,9,8,4]]); p.add(s)
s = xyz2([[3],[2,1,3,0,2],[],[4,7,6,9,8,4]]); p.add(s)

print p
\end{python}
}

and swapping the pivot \verb!3! with the rightmost value in the \verb!left!
pile:
\begin{center}
(1)
\end{center}
{\small
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=1,
                   cellheight=0.5,
                   arr=[[2,1,3,0,2],[3], [4,7,6,9,8,4],],
                   chunklabels=['left','pivot','right'],
)
p.add(s)
print p
\end{python}
}

Now I perform partitioning on the {\it above} \verb!left! pile:
{\small
\begin{python}
from latextool_basic import *
p = Plot()

y = 0
def xyz(xs):
    global y
    y -= 1.8
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs,
                        chunklabels=['','left','TODO','right'])
    return t

def xyz2(xs):
    global y
    y -= 1.1
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs)
    return t

s = xyz([[2],[],[1,3,0,2],[],[3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[2],[1],[3,0,2],[],[3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[2],[1],[2,0],[3],[3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[2],[1,2],[0],[3],[3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[2],[1,2,0],[],[3],[3,4,7,6,9,8,4]]); p.add(s)
print p
\end{python}
}

and swapping in the pivot to its right position:
\begin{center}
(2)
\end{center}
{\small
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=1, 
                   cellheight=0.5,
                   arr=[[0,1,2],[2],[3],[3,4,7,6,9,8,4]],
                   chunklabels=['left',('pivot',1.2),'right']
)
p.add(s)
print p
\end{python}
}
For this partitioning, 
the \verb!left! pile is \verb![0,1,2]!, the pivot is \verb!2!, and
the \verb!right! pile is \verb![3]!.

Now I partition the above \verb!left! pile using the first element
\verb!0! as pivot.
{\small
\begin{python}
from latextool_basic import *
p = Plot()

y = 0
def xyz(xs):
    global y
    y -= 1.8
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs,
                        chunklabels=['','left',('TODO', 1.2),'right'])
    return t

def xyz2(xs):
    global y
    y -= 1.1
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs)
    return t

s = xyz([[0],[],[1,2],[],[2,3,3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[0],[],[2],[1],[2,3,3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[0],[],[2,1],[2,3,3,4,7,6,9,8,4]]); p.add(s)
print p
\end{python}
}
Swapping with the \verb!left! pile is not necessary since the 
\verb!left! pile is empty.
We get
\begin{center}
(3)
\end{center}
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=1,
                   cellheight=0.5,
                   arr=[[],[0],[2,1],[2,3,3,4,7,6,9,8,4]],
)
p.add(s)
print p
\end{python}
Note that there the \verb!left! pile to the left of the pivot \verb!0!
is empty -- there's nothing to do!
We have arrived at a base case!

We continue to execute the partitioning on the \verb!right! pile 
of the pivot \verb!0!,
i.e., on \verb![2,1]!.
The first value \verb!2! is the pivot in this case.
{\small
\begin{python}
from latextool_basic import *
p = Plot()

y = 0
def xyz(xs):
    global y
    y -= 1.8
    t = chunkedarray(x=0, y=y,
                        cellwidth=1, 
                        cellheight=0.5,
                        arr=xs,
                        chunklabels=['','','left',('TODO', 1.2),'right'])
    return t

def xyz2(xs):
    global y
    y -= 1.1
    t = chunkedarray(x=0, y=y,
                        cellwidth=1.0, 
                        cellheight=0.5,
                        arr=xs)
    return t

s = xyz([[0],[2],[],[1],[],[2,3,3,4,7,6,9,8,4]]); p.add(s)
s = xyz2([[0],[2],[1],[],[],[2,3,3,4,7,6,9,8,4]]); p.add(s)
print p
\end{python}
}


Swapping the pivot \verb!2! 
with the rightmost value in the \verb!left! pile,
i.e., \verb!1!, we get
\begin{center}
(4)
\end{center}
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=1, 
                   cellheight=0.5,
                   arr=[[0],[1],[2],[],[],[2,3,3,4,7,6,9,8,4]],
)
p.add(s)
print p
\end{python}
I'm now done paritioning the \verb!left! and \verb!right! pile
from (3).
Note that (3) was the partition of the \verb!left! pile from (2).
So I partition the \verb!right! pile at (2).
But this \verb!right! pile is \verb![3]! which has size 1, i.e., 
this is the base case, so nothing is done.
So I'm doing to return from (2) to (1).
Recall that (2) is partitioning the \verb!left! of (1).
So now I need to partition the right of (1).
At (1), the array now looks like this, with the \verb!left! pile 
completely sorted:
\begin{center}
(1)
\end{center}
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=1,
                   cellheight=0.5,
                   arr=[[0,1,2,2,3],[3], [4,7,6,9,8,4],],
                   chunklabels=['left','pivot','right'],
)
p.add(s)
print p
\end{python}
I'll leave it to you to finish the quicksort.
\qed
\end{ex}




At this point, it's clear that the inplace
strategy works, executing a partition strategy a part of the array.
Of course to write a proper algorithm, we will need to specify
{\it which} part of the array a recursive call of the quicksort
is support to work on.
That's easy. For our recursive function call t,
we just need to carry two index variables
\verb!start! and \verb!end! that tells which the starting
index and ending index that particular quicksort invocation
is suppose to work on.
So during an invocation of quicksort, the picture is something like this:

\begin{python}
s = r'''
from quicksort_init import *
p = Plot()
from quicksort_init import *
s = chunkedarray(cellwidth=0.4, 
                   cellheight=0.4,
                   arr=[8*[''], ['p'],3*[''],6*[''],4*[''],10*['']],
                   chunklabels=['', '', 'left', 'TODO', 'right'],
                   celllabels = [('start', 8, -2),
                                 ('end',   21, -2),
                                 ('thead', 12, -1),
                                 ('ttail', 17, -1),
                                ]
)
p.add(s)
print p
'''
from latextool_basic import makeandincludegraphics
print makeandincludegraphics(python=s)
\end{python}




Our PLTR partition algorithm must now be modified so that
instead of working on a whole array, it works on a subarray.
To tell the partition which part of the array to work on, I have
to pass in a \verb!start! and \verb!end! variable.
Here's our original PLTR that operates on a whole array:
\begin{console}
FUNCTION partition(x):
    choose pivot_index # the index to the pivot
    pivot = x[pivot_index]
    swap x[0] and x[pivot_index]
    thead = 1
    ttail = len(x) - 1
    while thead <= ttail:
        if x[head] <= pivot:
            thead = thead + 1
        else:
            if thead is not ttail:
                swap x[thead] and x[ttail]
            ttail = ttail - 1
    
    if thead > 1:
        swap x[0] and x[thead]
\end{console}
and here's the modified version that works on a subarray:
\begin{console}
FUNCTION partition(x, start, end):
    choose pivot_index # the index to the pivot
    pivot = x[pivot_index]
    swap x[start] and x[pivot_index]
    thead = start + 1
    ttail = end
    while ttail <= thead:
        if x[head] <= pivot:
            thead = thead + 1
        else:
            if thead is not ttail:
                swap x[thead] and x[ttail]
            ttail = ttail - 1
    
    if thead > start + 1:
        swap x[start] and x[thead]
\end{console}





Here's the general (inplace) quicksort algorithm:
\begin{console}
FUNCTION quicksort(x, start=0, end=len(x)-1):
if start <= end:
    pivot_index = partition(x, start, end)
    quicksort(x, start, pivot_index - 1)
    quicksort(x, pivot_index + 1, end)
\end{console}

Of course the most important thing is the \verb!partition!
function which include the selection of the pivot and the
organization of \verb!left! and \verb!right!.




\newpage
\section{Quicksort: \texttt{left}-\texttt{right}-\texttt{TODO}-pivot partition method}

The strategy of the above inplace quicksort is to to use the following
layout: pivot, \verb!left!, \verb!TODO!, \verb!right!:
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.4, 
                   cellheight=0.4,
                   pipeheight=0.8,
                   arr=[8*[''], ['p'],3*[''],6*[''],4*[''],10*['']],
                   chunklabels=['', '', 'left', 'TODO', 'right'],
                   celllabels = [('start', 8, -2),
                                 ('end',   21, -2),
                                 ('thead', 12, -1),
                                 ('ttail', 17, -1),
                                ]
)
p.add(s)
print p
\end{python}

Here's the standard partition method that you will find in books
where the layout of the strategy is:
\verb!left!, \verb!right!, \verb!TODO!, pivot.
\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.4, 
                   cellheight=0.4,
                   pipeheight=0.8,
                   arr=[8*[''], 3*[''],6*[''],4*[''],['p'],10*['']],
                   chunklabels=['', 'left', 'right', 'TODO',('pivot',1.2)],
                   celllabels = [('start', 8, -1),
                                 ('end',   21, -1),],
)
p.add(s)
print p
\end{python}
To mark and keep track of the different sections from \verb!start! to
\verb!end!, you can use the following variables to mark the beginning
of the \verb!left!, \verb!right!, and \verb!TODO!:
\begin{python}
from latextool_basic import *
p = Plot()
from quicksort_init import *
s = chunkedarray(cellwidth=0.4, 
                   cellheight=0.4,
                   pipeheight=0.8,
                   arr=[8*[''], 3*[''],6*[''],4*[''],['p'],10*['']],
                   chunklabels=['', 'left', 'right', 'TODO',''],
                   celllabels = [('lhead', 8, -1),
                                 ('rhead', 11, -1),
                                 ('thead', 17, -1),
                                ],
)
p.add(s)
print p
\end{python}
Note that \verb!lhead! is redundant since it's the same as
\verb!start!, but it's easier if I use it to describe the partitioning
algorithm for this section.


\begin{ex}
At the beginning, you have to move the pivot.
What's the pseudocode? (This is easy.)
\qed
\end{ex}

Here's how to process the first (i.e. leftmost) value \verb!v!
in the \verb!TODO! list:
\begin{python}
from latextool_basic import *
p = Plot()
from quicksort_init import *
s = chunkedarray(cellwidth=0.4, 
                   cellheight=0.4,
                   arr=[8*[''], 3*[''],6*[''],['v','','',''],['p'],10*['']],
                   chunklabels=['', 'left', 'right', 'TODO',''],
)
p.add(s)
print p
\end{python}

If the value should go into the \verb!right! chunk
(i.e., \verb!v > p!), then it's already there.
I just have to increment the variable \verb!thead! that keeps track of the 
beginning of \verb!TODO!.
This sequence of pictures will tell you what to do:
\begin{python}
from latextool_basic import *
p = Plot()
def xyz(x, y, xs):
    return chunkedarray(x=x, y=y,
                        cellwidth=0.4, cellheight=0.4,
                        arr=xs,
                        chunklabels=['', 'left', 'right', 'TODO',''])

p.add(xyz(0, 0, [8*[''], 3*[''],6*[''],['v','','',''],['p'],10*['']]))
p.add(xyz(0, -2, [8*[''], 3*[''],6*['']+['v'],['','',''],['p'],10*['']]))
print p
\end{python}

If the value should go into the \verb!left! chunk (i.e., \verb!v <= p!), 
I do the following: I swap \verb!v!
with the leftmost value of the \verb!right! chunk,
and increment \verb!rhead! and \verb!thead!.
\begin{python}
from latextool_basic import *

def xyz(x, y, xs):
    return chunkedarray(x=x, y=y,
                        cellwidth=0.4, cellheight=0.4,
                        arr=xs,
                        chunklabels=['', 'left', 'right', 'TODO',''])

p = Plot()
p.add(xyz(0, 0, [8*[''], 3*[''],['?']+5*[''],['v','','',''],['p'],10*['']]))
p.add(xyz(0, -2, [8*[''], 3*[''],['v']+5*[''],['?','','',''],['p'],10*['']]))
p.add(xyz(0, -4, [8*[''], 3*['']+['v'],5*['']+['?'],['','',''],['p'],10*['']]))
print p
\end{python}
Note that in the first of the above three pictures,
the value \verb!?! was within the \verb!right! chunk
at the head.
In the third picture above, 
\verb!?! is still in the \verb!right! chunk
(which is what you should expect!) but it's at the tail.

\newpage
\begin{ex}
In the above, I assumed that \verb!right!
is not empty.
What happens if the \verb!right! is empty?
What's the right thing to do?
\qed
\end{ex}


\newpage
\begin{ex}
At the end, you have to swap the pivot value from index \verb!end! 
with a value at another index position.
Where is this other index position?
Are you sure you have considered \textit{all} cases?
\qed
\end{ex}


\newpage
\begin{ex}
\begin{tightlist}
\item Using the partitioning strategy in this section,
execute one single partitioning on the following array
from index \verb!start = 3! to index \verb!end = 8!
choosing the value at index 4 as pivot.

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,[[3,1,5,2,7,8,4,6,9,0]],width=0.7,height=0.7)
print p
\end{python}

Show the state of your array after moving the pivot, at the end of
processing each value in the \verb!TODO! section of the array,
and after moving the pivot to the right place.
\item For each of the step from (a) (except for the first and last),
write down the value of \verb!lhead!, \verb!rhead!, and \verb!thead!.
\end{tightlist}
\end{ex}

\SOLUTION

1.
\begin{python}
from latextool_basic import *

def xyz(x, y, xs):
    return chunkedarray(x=x, y=y, cellwidth=1.0, cellheight=0.5, arr=xs)

p = Plot()
p.add(xyz(0,  0, [[3,1,5,2,7,8,4,6,9,0]]))
p.add(xyz(0, -1, [[3,1,5],[],[],[2,9,8,4,6],[7],[0]]))
p.add(xyz(0, -2, [[3,1,5],[2],[],[9,8,4,6],[7],[0]]))
p.add(xyz(0, -3, [[3,1,5],[2],[9],[8,4,6],[7],[0]]))
p.add(xyz(0, -4, [[3,1,5],[2],[9,8],[4,6],[7],[0]]))
p.add(xyz(0, -5, [[3,1,5],[2,4],[8,9],[6],[7],[0]]))
p.add(xyz(0, -6, [[3,1,5],[2,4,6],[9,8],[],[7],[0]]))
p.add(xyz(0, -7, [[3,1,5,2,4,6,7,8,9,0]]))
print p
\end{python}

2. DIY.
\qed


\newpage
\begin{ex}
\begin{tightlist}
\item Using the partitioning strategy in this section,
execute one single partitioning on the following array
from index \verb!start = 2! to index \verb!end = 8!
choosing the value at index 4 as pivot.

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,[[0,1,2,3,4,5,6,7,8,9]],width=0.7,height=0.7)
print p
\end{python}

Show the state of your array after moving the pivot, at the end of
processing each value in the \verb!TODO! section of the array,
and after moving the pivot to the right place.
\item For each of the step from (a) (except for the first and last),
write down the value of \verb!lhead!, \verb!rhead!, and \verb!thead!.
\end{tightlist}
\qed
\end{ex}


\newpage
\begin{ex}
\begin{tightlist}
\item Using the partitioning strategy in this section,
execute one single partitioning on the following array
from index \verb!start = 2! to index \verb!end = 8!
choosing the value at index 4 as pivot.

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,[[9,8,7,6,5,4,3,2,1,0]],width=0.7,height=0.7)
print p
\end{python}

Show the state of your array after moving the pivot, at the end of
processing each value in the \verb!TODO! section of the array,
and after moving the pivot to the right place.
\item For each of the step from (a) (except for the first and last),
write down the value of \verb!lhead!, \verb!rhead!, and \verb!thead!.
\end{tightlist}
\qed
\end{ex}

\newpage
\begin{ex}
\begin{tightlist}
\item Using the partitioning strategy in this section,
execute one single partitioning on the following array
from index \verb!start = 2! to index \verb!end = 8!
choosing the value at index 2 as pivot.

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,[[7,8,9,6,0,3,4,2,1,5]],width=0.7,height=0.7)
print p
\end{python}

Show the state of your array after moving the pivot, at the end of
processing each value in the \verb!TODO! section of the array,
and after moving the pivot to the right place.
\item For each of the step from (a) (except for the first and last),
write down the value of \verb!lhead!, \verb!rhead!, and \verb!thead!.
\end{tightlist}
\qed
\end{ex}

\newpage
\begin{ex}
\begin{tightlist}
\item Using the partitioning strategy in this section,
execute one single partitioning on the following array
from index \verb!start = 2! to index \verb!end = 8!
choosing the value at index 4 as pivot.

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,[[7,8,9,6,0,3,4,2,1,5]],width=0.7,height=0.7)
print p
\end{python}

Show the state of your array after moving the pivot, at the end of
processing each value in the \verb!TODO! section of the array,
and after moving the pivot to the right place.
\item For each of the step from (a) (except for the first and last),
write down the value of \verb!lhead!, \verb!rhead!, and \verb!thead!.
\end{tightlist}
\qed
\end{ex}


\newpage
\begin{ex}
\begin{tightlist}
\item Using the partitioning strategy in this section,
execute one single partitioning on the following array
from index \verb!start = 0! to index \verb!end = 2!
choosing the value at index 0 as pivot.

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,[[0,9,9]],width=0.7,height=0.7)
print p
\end{python}

Show the state of your array after moving the pivot, at the end of
processing each value in the \verb!TODO! section of the array,
and after moving the pivot to the right place.
\item Is quicksort (using the partition strategy of this section)
a stable sorting algorithm?
\qed
\end{tightlist}
\end{ex}


\newpage
\begin{ex}
Describe arrays and pivot values in the arrays that will become
sorted when you execute one pass of the partition strategy of this section.
\qed
\end{ex}


\newpage
\begin{ex}
Describe sorted arrays and pivot values in the arrays that will become
unsorted when you execute one pass of the partition strategy of this section.
\qed
\end{ex}


\newpage
\section{Quicksort: \texttt{left}-\texttt{pivot}-\texttt{right}}

Now I want to design a a partition function that lets the pivot
stays in its original position as long as possible.
In particular this is helpful when the array is almost sorted.
Furthermore, I want the partition function to work inplace.
Say we pick the middle entry as the pivot.
Keep incrementing \verb!thead! until you reach the pivot and then
keep decrementing \verb!ttail! until you reach the pivot.
Note that if the array is not sorted, then the \verb!pivot! would have to move.

\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.4, 
                 cellheight=0.4,
                 arr=[8*[''], 3*[''],['','',''],['p'],['','',''], 4*[''],10*['']],
                 chunklabels=['', 'left', '', ('pivot',1.2), '','right'],
                 celllabels = [('start', 8, -1),
                               ('end',   21, -1),
                               ('thead', 11, -1),
                               ('ttail', 17, -1),
                              ],
)
p.add(s)
print p
\end{python}

\begin{ex}
Analyze the above version of quicksort and implement the pseudocode.
\qed
\end{ex}

\begin{ex}
Write a reasonably fast algorithm to compute the mode of an array of 
numbers.
\qed
\end{ex}
