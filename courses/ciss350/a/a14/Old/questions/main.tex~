\input{myassignmentpreamble}
\input{yliow}
\input{ciss350}
\renewcommand\TITLE{Assignment 14}

\usepackage{listings}
\lstset{%
basicstyle=\ttfamily, frame=single
}


\begin{document}
\topmatter


{\bf Objectives:}
\begin{enumerate}[topsep=0pt]
\item Implement a max heap.
\item Implement a priority queue.
\end{enumerate}

***** FALL 2014 *****
\begin{tightlist}
  \item Create directory \texttt{f01}.
  \item In \texttt{f01},
  create directory \texttt{f01q01}.
  Put all files for Q1 in \texttt{f01q01}.
  Etc.
  \item Email as usual to \verb!yliow.submit@gmail.com! with
  subject \texttt{ciss350 f01}.
  \item You only need to complete Q1, Q2. Ignore Q3.
\end{tightlist}

\newpage
{\bf Q1.} [Max heap]

Implement the max heap functions (see below)
where the heap is implemented
using vectors of integers.
(Vectors as in \texttt{std::vector}.)
Write the max heap functions in
\texttt{intmaxheap.h}
and
\texttt{intmaxheap.cpp}.

Refer to the notes (and textbook) for details
on max heap operations.

The following describes all the max heap functions that
must be implemented.
Also, implement \verb!operator<<! so that you can
print your vector while testing your code (see below).
\begin{Verbatim}[frame=single]
int x;
std::vector< int > heap;

maxheap_insert(heap, 5);        // [5]
maxheap_insert(heap, 7);        // [7, 5]
maxheap_insert(heap, 9);        // [9, 5, 7]
std::cout << heap << std::endl; //  prints "[9, 5, 7]"

int a = maxheap_delete(heap);   // [7, 5]
                                // a = 9
x = maxheap_max(heap);          // x = 9. Root is not deleted.

heap[0] = 1;                    // [1, 5]
maxheap_heapify_down(heap, 0);  // [5, 1]

heap[1] = 10;                   // [5, 10]
maxheap_heapify_up(heap, 1);    // [10, 5]

heap.resize(5);
heap[0] = 5;
heap[1] = 7;
heap[2] = 8;
heap[3] = 10;
heap[4] = 2;
maxheap_build(heap);            // [10, 7, 8, 5, 2]

heap.resize(5);
heap[0] = 2;
heap[1] = 6;
heap[2] = 8;
heap[3] = 10;
heap[4] = 5;
maxheap_heapsort(heap)          // [2, 5, 6, 8, 10]
std::cout << heap << std::endl; // prints "[2, 5, 6, 8, 10]"
\end{Verbatim}

Put the above in \texttt{main.cpp}:
\begin{console}
#include <iostream>
#include "intmaxheap.h"

int main()
{
    // test code
    return 0;
}
\end{console}

(As always skeleton code needs to be modified/edited/corrected/etc.)

\newpage
Q2. [Max heap]

Re-implement the max heap functions
from Q1 to function templates for max heap.
The name of the header file must be
\texttt{maxheap.h}.

\begin{Verbatim}[frame=single]
// File: maxheap.h
// This file contains the function templates for the max heap.

template < typename T >
void maxheap_insert(std::vector< T > & h, const T & x)
{
    // TO BE COMPLETED
}

// Etc.
\end{Verbatim}

To test the max heap function templates,
first here a class for values to be places in the max heap:
\begin{Verbatim}[frame=single]
// File: maxheap_value.h
class maxheap_value
{
public:
    // TO BE IMPLEMENTED
    
private:
    int priority;
    std::string s;
};
\end{Verbatim}
\begin{Verbatim}[frame=single]
// File: maxheap_value.cpp
std::ostream & operator<<(std::ostream & cout, const maxheap_value & x)
{
    cout << '<' << x.get_priority() << ", " << x.get_s() << '>';
    return cout
}
\end{Verbatim}

Convert the test code from Q1 appropriately.
(The string part of the max heap values are completely arbitrary.)

{\small
\begin{Verbatim}[frame=single]
maxheap_value x;
std::vector< maxheap_value > heap;

maxheap_insert(heap, maxheap_value(5, "a")); // [<5, "a">]
maxheap_insert(heap, maxheap_value(7, "b")); // [<7, "b">, <5, "a">]
maxheap_insert(heap, maxheap_value(9, "c")); // [<9, "c">, <5, "a">, <7, "b">]

max_heap_value a = maxheap_delete(heap); // [<7, "b">, <5, "a">]
                                         // a = <9, "c">
x = maxheap_max(heap);                   // x = <9, "c">. Root is not deleted.

heap[0] = maxheap_value(1, "d");         // [<1, "d">, <5, "a">]
maxheap_heapify_down(heap, 0);           // [<5, "a">, <1, "d">]

heap[1] = maxheap_value(10, "e");        // [<5, "a">, <10, "e">]
maxheap_heapify_up(heap, 1);             // [<10, "e">, <5, "a">]

// ...
\end{Verbatim}
}

Put the above test code in \texttt{main.cpp}:
\begin{console}
#include <iostream>
#include "maxheap_value.h"
#include "maxheap.h"

int main()
{
    // test code
    return 0;
}
\end{console}

(As always skeleton code needs to be modified/edited/corrected/etc.)


\newpage
Q3. [Priority queue]

***** FALL 2014: OMIT. *****

Implement a class template for maximum priority queues.
Objects in the maximum priority queue must have a
\texttt{get\_priority()} method
that returns an integer value.
\begin{Verbatim}[frame=single]
MaxPriorityQueue< T > q      constructor
q.insert(value)              insert value into q
q.delete()                   remove and return the value at the front of q
q.max()                      return reference to value at the front of q
q.clear()                    remove all values from q
q.size()                     number of values in q
q.is_empty()                 true iff q has size 0

q0 = q1                      the obvious assignment operator
q0 == q1                     the obvious comparison operator
MaxPriorityQueue< T > q0(q1) the obvious copy constructor
\end{Verbatim}

Note that you should use Q2.
\end{document}
