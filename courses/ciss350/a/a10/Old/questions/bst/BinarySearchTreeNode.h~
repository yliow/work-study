// File: BinarySearchTreeNode.h

#ifndef BINARYSEARCHTREENODE_H
#define BINARYSEARCHTREENODE_H

#include <iostream>

class BinarySearchTreeNode
{
public:
    BinarySearchTreeNode(int key,
                         BinarySearchTreeNode * parent=NULL,
                         BinarySearchTreeNode * left=NULL,
                         BinarySearchTreeNode * right=NULL)
        : key_(key), parent_(parent), left_(left), right_(right)
    {}
    
    int key() const
    {
        return key_;
    }
    
    int & key()
    {
        return key_;
    }
    
    BinarySearchTreeNode * parent() const
    {
        return parent_;
    }
    
    BinarySearchTreeNode * &  parent()
    {
        return parent_;
    }

    BinarySearchTreeNode * root() const
    {
        return NULL;
    }
    
    BinarySearchTreeNode * left() const
    {
        return left_;
    }
    

    // Returns pointer to the leftmost node of the subtree with this
    // node as root.
    BinarySearchTreeNode * leftmost() const
    {
        return NULL;
    }
   
    BinarySearchTreeNode * right() const
    {
        return right_;
    }
    
    BinarySearchTreeNode * & right()
    {
        return right_;
    }

    // Returns pointer to the rightmost node of the subtree with this
    // node as root.
    BinarySearchTreeNode * rightmost() const
    {
        return NULL;
    }

    // Returns true if the node is a leaf node, i.e., the left
    // and right are both NULL.
    bool is_leaf() const
    {
        return true;
    }
    
    // Returns true if the node is not a leaf node
    bool is_nonleaf() const
    {
        return true;
    }

    // Returns true if the parent is NULL
    bool is_root()
    {
        return true;
    }

private:
    int key_;
    BinarySearchTreeNode * parent_;
    BinarySearchTreeNode * left_;
    BinarySearchTreeNode * right_;
};

std::ostream & operator<<(std::ostream &,
                          const BinarySearchTreeNode &);

void print_inorder(const BinarySearchTreeNode *);
bool insert(BinarySearchTreeNode * &, int);

#endif
