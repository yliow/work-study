\input{myassignmentpreamble}
\input{yliow}
\input{ciss350}
\renewcommand\TITLE{Assignment 10}

\begin{document}
\topmatter


\textbf{Objectives:}
\begin{enumerate}[topsep=0pt]
\item Implement Binary Search Tree with supporting methods.
\end{enumerate}

\newpage


\textbf{Q1.} 
Implement a binary search tree of integers. 
(Once you have the tree working, it's easy to convert this to a 
template class -- I'll leave as a DIY exercise.)
Values contain in the tree are unique, i.e., there are no duplicate values.
As mentioned in class,
smaller values are stored in the left subtree and larger values are
stored in the right subtree.
(This implies that if you want to convert this to a template class,
the template type must support the obvious comparison operators.)

The following are some skeleton source files.
(Note: As always, skeleton
code means the code is incomplete and might contain errors.
The purpose is to give some initial guidance and structure of code.)
 
Note that the nodes have parent pointers and must be set correctly.
The only node with \verb!NULL! parent pointer is of course the root.
In the case of an empty tree, the \verb!root! is set to \verb!NULL!.
Note that the skeleton code is (obviously) incomplete and require
either addition or modification.


\VerbatimInput[fontsize=\scriptsize, frame=single]{bst/BinarySearchTreeNode.h}


\VerbatimInput[fontsize=\scriptsize, frame=single]{bst/BinarySearchTreeNode.cpp}

\VerbatimInput[fontsize=\scriptsize, frame=single]{bst/BinarySearchTree.h}

\VerbatimInput[fontsize=\scriptsize, frame=single]{bst/BinarySearchTree.cpp}

The following tests only some of the functions and methods. 
You should test all the functions/methods to be implemented.

\VerbatimInput[fontsize=\scriptsize, frame=single]{bst/test.cpp}

Note that the \verb!insert()! method of the 
\verb!BinarySearchTree! class uses the \verb!insert()! function in 
\verb!BinarySearchTreeNode!.
This should be the case for many of the methods in the \verb!BinarySearchTree!
class.
In software development, we would say that the \verb!BinarySearchTree!
class is a wrapper class, i.e., the class wraps up functionality already
provided somewhere else.

Note that in the \verb!BinarySearchTree! class, the \verb!insert()!
method calls the \verb!insert()! function in the 
\verb!BinarySearchTreeNode! (the cpp file). 
In order to achieve this, the function call to the \verb!insert()!
function must be referenced as
\begin{Verbatim}
::insert(root_, x)
\end{Verbatim}
The \verb!::! tells the compiler to look for \verb!insert! in the 
global scope and not within the class scope of \verb!BinarySearchTree!.

In the case of a failure to insert, the \verb!insert()! function
in \verb!BinarySearchTree!
returns a \verb!false!; otherwise it returns \verb!true!.
On the other hand, the \verb!insert()! method in \verb!BinarySearchTree!
throws an exception when an insert is not possible.

Your implementation for \verb!remove()! should be likewise, i.e.,
there should be a \verb!remove()! function in \verb!BinarySearchTreeNode!
and a \verb!remove()! method in \verb!BinarySearchTree!.
On failure, 
the \verb!remove()! function \verb!BinarySearchTreeNode! 
should return \verb!false! whereas the \verb!remove()! method in 
\verb!BinarySearchTreeNode! should throw an exception.



\end{document}
