\section{Infix to RPN}

Now, instead of evaluating an infix expression,
you can also convert an infix expression to a postfix/RPN
that evaluates to the same value.
What I mean is this:
Suppose you're given
\[
\text{\texttt{1 + 2}}
\]
Your program give me this:
\[
\text{\texttt{1 2 +}}
\]

The infix expression for the
first trace in the previous section is
\[
\text{\texttt{0 - 1 + 2 * 3 - 4 / 5 * 6}}
\]
We expected the evaluation to follow this:
\[
\text{\texttt{(((0 - 1) + (2 * 3)) - ((4 / 5) * 6))}}
\]
Now if I do this carefully, the postfix/RPN expression should be this:
\begin{align*}
& \hspace{0.53cm} \text{\texttt{(((0 - 1) + (2 * 3)) - ((4 / 5) * 6))}} \\
&= \text{\texttt{(((0 1 -) + (2 * 3)) - ((4 / 5) * 6))}} \\
&= \text{\texttt{(((0 1 -) + (2 3 *)) - ((4 / 5) * 6))}} \\
&= \text{\texttt{(((0 1 -) (2 3 *) +) - ((4 / 5) * 6))}} \\
&= \text{\texttt{(((0 1 -) (2 3 *) +) - ((4 5 /) * 6))}} \\
&= \text{\texttt{(((0 1 -) (2 3 *) +) - ((4 5 /) 6 *))}} \\
&= \text{\texttt{(((0 1 -) (2 3 *) +) ((4 5 /) 6 *) -)}} 
\end{align*}
(Yes, yes, I know you probably shouldn't mix infix and postfix/RPN
and in fact you probably won't find the above trick in books.
But clearly the above helps.)
So the corresponding  postfix/RPN expression that evaluates in the same way
is
\[
\text{\texttt{0 1 - 2 3 * + 4 5 / 6 * -}} 
\]

Here's the trace of the above infix expression from the previous
section.
Let's see if we can derive some inspiration from it.

{\scriptsize
\begin{console}
              intstack opstack (top on left)
                              PROCESS INPUT
0-1+2*3-4/5*6 []       []
                              0:Push intstack
 -1+2*3-4/5*6 [0]      []
                              -:Push opstack
  1+2*3-4/5*6 [0]      [-]
                              1:Push intstack
   +2*3-4/5*6 [0,1]    [-]
                              +:+ <= -. Compute with top of
                                opstack until opstack empty or
                                + > top.
                                Then push + onto opstack.
   +2*3-4/5*6 [-1]     []
   +2*3-4/5*6 [-1]     [-]
    2*3-4/5*6 [-1]     [+]
                              2:Push intstack
     *3-4/5*6 [-1,2]   [+]
                              *:* > +. Push opstack
      3-4/5*6 [-1,2]   [+,*]
                              3:Push intstack
       -4/5*6 [-1,2,3] [+,*]
                              -:- <= *. Compute with top of
                                opstack until opstack empty or
                                - > top.
                                Then push - onto stack2.
        4/5*6 [-1,6]   [+]
        4/5*6 [5]      []
        4/5*6 [5]      [-]
                              4:Push intstack
         /5*6 [5,4]    [-]
                              /:/ > -. Push opstack
          5*6 [5,4]    [-,/]
                              5:Push intstack
           *6 [5,4,5]  [-,/]  
                              *:* <= /. Compute with top of
                                opstack until opstack empty or
                                * > top.
                                Then push * onto opstack
            6 [5,4,5]  [-,/]  .
            6 [5,0]    [-]
                              6:Push intstack
              [5,0,6]  [-,*]  
                              NO MORE INPUT: Compute with
                              top of opstack until opstack
                              empty                             
              [5,0]    [-]
              [5]      []
\end{console}
}

AHA!
Notice that for the postfix/RPN expression
\[
\text{\texttt{0 1 - 2 3 * + 4 5 / 6 * -}} 
\]
The first part is
\[
\text{\texttt{0 1 - ...}} 
\]
and in the trace above, you see it here:
{\scriptsize
\begin{console}
              intstack opstack (top on left)
                              PROCESS INPUT
0-1+2*3-4/5*6 []       []
                              0:Push intstack
 -1+2*3-4/5*6 [0]      []
                              -:Push opstack
  1+2*3-4/5*6 [0]      [-]
                              1:Push intstack
   +2*3-4/5*6 [0,1]    [-]
                              +:+ <= -. Compute with top of
                                opstack until opstack empty or
                                + > top.
                                Then push + onto opstack.
   +2*3-4/5*6 [-1]     []
...
\end{console}
}
The \texttt{-1} in the integer stack at the last line
is of course due to
\texttt{0 - 1} where the \texttt{0} and the \texttt{1} and the \texttt{-}
are from the integer stack and the operator stack
from the next step.
Now in the case of getting the postdfix/RPN expression,
I want \texttt{0 1 -} ... so instead of evaluating,
I just extract those values and put them into a container.
Right?
The trace becomes:
{\scriptsize
\begin{console}
              intstack opstack (top on left)
                              PROCESS INPUT
0-1+2*3-4/5*6 []       []
                              0:Push intstack
 -1+2*3-4/5*6 [0]      []
                              -:Push opstack
  1+2*3-4/5*6 [0]      [-]
                              1:Push intstack
   +2*3-4/5*6 [0,1]    [-]
                              +:+ <= -. Compute with top of
                                opstack until opstack empty or
                                + > top.
                                Then push + onto opstack.
   +2*3-4/5*6 []       []
              [0,1,-]
...
\end{console}
}
The next part of the postfix/RPN
\[
\text{\texttt{0 1 - 2 3 * + 4 5 / 6 * -}} 
\]
is this:
\[
\text{\texttt{... 2 3 * ...}} 
\]
Again, it appears in the above trace:
{\scriptsize
\begin{console}
              intstack opstack (top on left)
                              PROCESS INPUT
0-1+2*3-4/5*6 []       []
                              0:Push intstack
 -1+2*3-4/5*6 [0]      []
                              -:Push opstack
  1+2*3-4/5*6 [0]      [-]
                              1:Push intstack
   +2*3-4/5*6 [0,1]    [-]
                              +:+ <= -. Compute with top of
                                opstack until opstack empty or
                                + > top.
                                Then push + onto opstack.
   +2*3-4/5*6 [-1]     []
   +2*3-4/5*6 [-1]     [-]
    2*3-4/5*6 [-1]     [+]
                              2:Push intstack
     *3-4/5*6 [-1,2]   [+]
                              *:* > +. Push opstack
      3-4/5*6 [-1,2]   [+,*]
                              3:Push intstack
       -4/5*6 [-1,2,3] [+,*]
                              -:- <= *. Compute with top of
                                opstack until opstack empty or
                                - > top.
                                Then push - onto stack2.
        4/5*6 [-1,6]   [+]
...
\end{console}
}
The \texttt{6} is of course due to \texttt{2 * 3}.

Now ... if you think about it, the integer stack at the last line of the trace
{\scriptsize
\begin{console}
...
        4/5*6 [-1,6]   [+]
...
\end{console}
}
If I had kept the [0,1,-] there
{\scriptsize
\begin{console}
...
        4/5*6 [0,1,-,6]   [+]
...
\end{console}
}
and likewise, instead of computing \texttt{2 * 3} to get \texttt{6},
I leave the \texttt{2 3 *} in that container, I would have
{\scriptsize
\begin{console}
...
        4/5*6 [0,1,-,2,3,*]   [+]
...
\end{console}
}

With more experiments, you'll realize that
the same algorithm that evaluates
an infix expression can be easily used to convert
an infix expression to the corresponding postfix/RPN expression.
The only difference is that in the evaluation function,
you operate with the operator popped from the operator stack
together with two integers from the integer stack.
Since we're not operating on the integers,
we don't have to pop them.
The operator is then just pushed on top of the
integer stack.
Which by the way, we should not be called the first
data structure an integer stack any more
since it contains integers and operators.
Let's called it the output stack.

Indeed if you finish the above trace (with the given modifications),
you'll get
\[
\text{\texttt{[0, 1, -, 2, 3, *, +, 4, 5, /, 6, *, -]}}
\]
on your sheet of paper.

Another thing to note is that
you only add stuff to the output stack
during the process to convert infix to postfix/RPN expression.
For the case of evaluating the infix expression, you have to
pop integers off the integer stack.
So that's another thing different.

But wait ...
once the conversion is done, you
probably want to read the resulting postfix/RPN expression.
Hang on there ...

You always read an expression left-to-right.
So if the output stack looks like this:
\[
\text{\texttt{[0, 1, -, 2, 3, *, +, 4, 5, /, 6, *, -]}}
\]
how are you going start reading \texttt{0} since it's at the bottom
of the stack???
I need to start reading from the bottom of stack.

Hmmm ... I put stuff into one end of the output stack.
Then I take things out the other end.
AHA! ...

I need an output \textit{queue}, and not an output stack.

I'll leave it to you to write down the algorithm
since it's very similar to the algorithm to
evaluate an infix expression.

