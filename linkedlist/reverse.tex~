\section{Reverse and balanced expressions}

\subsection{Reverse}
The reverse of a string is just writing the string in the reverse order.
For instance the reverse of
\[
\text{\texttt{helloworld}}
\]
is
\[
\text{\texttt{dlrowolleh}}
\]
In the case of a string, if the string is stored in \verb!x!, and you want to reverse
in \text{y}, you just do this:
\begin{console}
for (int i = 0; i < len(s); i++)
{
    y[len(s) - 1 - i] = x[i];
}
y[len(s)] = '\0';
\end{console}
In this case the reverse is stored in another array.
If you want to store the reverse in the same string, you can copy \verb!y! back to
\verb!x!.
But if you want to put the reverse back into \verb!x!,
you might as well swap the first and last character of \verb!x!,
swap the second and second last, etc.
\begin{console}
for (int i = 0; i < len(s) / 2; i++)
{
    x[len(s) - 1 - i] = x[i];
}
\end{console}

However there's another way to do this:
you put the characters in the string into a stack, and then pop off the values
and put is back in the string (or into another if the original shouldn't be
destroyed).
Here's the code:
\begin{console}
stack.clear();
for (int i = 0; i < len(s); i++)
{
    stack.push(x[i]);
}
for (int i = 0; i < len(s); i++)
{
    x[i] = stack.pop();
}
\end{console}

So what?
Notice that in this new algorithm, you always traverse the string (container of
characters) in the same direction, from index 0 to the highest index.
In the algorithm above, you (basically) traverse \verb!x! in one direction
and \verb!y! in the opposite direction.
You're using the fact that a string can be efficiently traversed in the forward
and the backward direction.
But what about this:

\begin{ex}
Given a singly linked list,
replace it with its reverse.
Assume you have a stack available.
\qed
\end{ex}

\begin{ex}
Suppose you have a singly linked list and I want you
to put the values in the reverse order into another
singly linked list.
Assume you don't have any other container.
Of course you can use a constant number of variables.
How would you do it?
What is the runtime?
\qed
\end{ex}

\newpage
\subsection{Palindromes}

A string is a palindrome is it is its own reverse.
For instance here's a palindrome:
\[
\text{\texttt{madam}}
\]

\begin{ex}
Write a program that prompts the user for a string
and checks if it's a palindrome.
Now what if you're only allows to traverse strings in one direction
and you have stack?
\qed
\end{ex}


\newpage
\subsection{Balanced expressions}

Another use of the stack is to check for balanced expressions.
What do I mean by that?
Suppose you look at this arithmetic expression
\[
\text{
  \texttt{(1 + (2 + 3)) * ((4 - 5 / (7 * 8) + 9) \% 0)}
  }
\]
When you only look at the parentheses you see this:
\[
\text{\texttt{(())((()))}}
\]
When the parentheses come from a well-formed arithmetic expression,
we say that the parentheses are balanced.
This is not balanced:
\[
\text{\texttt{()(())()(()(()))(())((())))((()())}}
\]
See it?

\begin{ex}
Write a program that prompts the user for an arithmetic expression
and checks if the left and right parentheses form a balanced expression.
This should NOT take you more than 5 minutes.
\qed
\end{ex}

\begin{ex}
(This one is much harder than the previous.)
Write a program that prompts the user for 
a string containing left and right parentheses
and return a balanced expression by making the 
least changes to the given string, either by 
deleting or inserting characters.
\qed
\end{ex}

Now, the problem can be a little bit more complicated:
instead of just \texttt{(} and \texttt{)},
suppose we allow \texttt{[} and \texttt{]}.
How about throwing in
\texttt{<} and \texttt{>}?
We might as well include
\texttt{\{} and \texttt{\}} too.

The problem of whether the parentheses in an expression is balanced or not
is similar to the problem of checking whether a string is a palindrome.
Why?
Look at this palindrome again
\[
\text{\texttt{madam}}
\]
You are matching the two \texttt{m}'s:
\[
\text{\texttt{\underline{m}ada\underline{m}}}
\]
You then match the \texttt{a}'s:
\[
\text{\texttt{m\underline{a}d\underline{a}m}}
\]
If you look at this:
\[
\text{\texttt{([()])}}
\]
you see quickly that you're also matching two things in a manner
similar to a palindromic check.
There's of course a difference because this is also balanced
but not palindromic:
\[
\text{\texttt{[()](())}}
\]

\begin{ex}
Design an algorithm 
that checks if a string containing the characters
\verb!(,),{,},<,>,[,]! is balanced.
[Hint: Stack.]
\qed
\end{ex}

ANSWER:
\begin{console}
Take a character from the string.
If the character is (, [, <, or {, push it onto the stack.
If the character is ):
    if the top of the stack is (, pop it off
    if the top of the stack is not, stop with ERROR
If the character is ]:
    if the top of the stack is [, pop it off
    if the top of the stack is not, stop with ERROR
If the character is }:
    if the top of the stack is {, pop it off
    if the top of the stack is not, stop with ERROR
If the character is >:
    if the top of the stack is <, pop it off
    if the top of the stack is not, stop with ERROR
Repeat the above until all characters are processes.
\end{console}

Don't be fooled by the above
\lq\lq puzzles'' ... reversing a string, checking palindromes,
balancing expressions.
Seems like little tricky problems just to tickle the mind.
NO!
It's a lot more than just meets the eye.
The presence of a stack used for a computation
indicates that there's a certain theoretical level of
complexity in the problem.
It's even important and present in nature:
palindromic subsequences in DNA in related to the ability of the
molecules to perform folding.
