\section{Singly linked list}

Recall that you have
seen the first type of container: arrays (static or dynamic).
The problem with the array (both static and dynamic)
is the that memory required by an array is continguous.
When the memory is sufficiently fragmented,
it might have enough \textit{pieces} of memory to satisfy the
request for a new array, \textit{but} the problem
is that these pieces are not continguous.
Here's a solution.
(This is not the last.)

Now, we can think of an array like this:

\begin{python}
from latextool_basic import *
p = Plot()
c = RectContainer(x=0, y=0)
for i,x in enumerate('2645'):
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % x)
              
p += c

print p
\end{python}

Of course in the case of a program, to \textit{arrive} at the
array, I have either an array name or in the case when the
above array is in the free store, I would have a pointer to the array.
Say the above is a dynamic array in the free store and I have a pointer
\verb!p! pointing to the above array:

\begin{python}
from latextool_basic import *
p = Plot()

c = RectContainer(x=0, y=0)
for i,x in enumerate('2645'):
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % x)
              
p += c

x,y = c[0].bottomleft(); x -= 2
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=0.7, label=r'{\texttt{%s}}' % '')
p += q

x,y = q.left(); x -= 0.3
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'p',
           linecolor='white')

p += Line(points=[q.center(), c[0].left()], endstyle='>')
print p
\end{python}

The memory used by the above array (wheher static or not)
is contiguous (whether if it's contiguous in the current frame of
execution or in the free store.)
If an \verb!int! takes 4 bytes, the above uses 16 bytes --
contiguous chunk of 16 bytes.
Conceptually, even on a sheet of paper, you can see that the 4 squares
are contiguous.

Conceptually, suppose on a sheet of paper, I draw this:

\begin{python}
from latextool_basic import *

def node(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s)
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[0].bottom(), n6[0].top()], endstyle='>')
p += Line(points=[n6[0].right(), n4[0].left()], endstyle='>')
p += Line(points=[n4[0].top(), n5[0].bottom()], endstyle='>')


x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.3
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'p', linecolor='white')

print p
\end{python}

You do see that the values of the array split up into pieces and
with the help of the arrows (whatever they mean) I can go from one value
to another, imitating the traversal of the original array.
This collection of boxes with values:

\begin{python}
from latextool_basic import *

def node(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s)
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[0].bottom(), n6[0].top()], endstyle='>')
p += Line(points=[n6[0].right(), n4[0].left()], endstyle='>')
p += Line(points=[n4[0].top(), n5[0].bottom()], endstyle='>')

print p
\end{python}

is what we call a directed graph in math and CS.
We'll talk about directed graphs and undirected graphs much later.
Back to linked list ...

To make the above schematic diagram even closer to
C++ implementation,
I'm going to draw it this way:

\begin{python}
from latextool_basic import *

def node(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '')
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

The array is represented (on paper) by 4 blocks (called nodes)
where for each node there is an integer value and \lq\lq something''
in the second value to lead to the another node
(of course the \lq\lq something'' is a pointer).
The node with value 5 has a second value that does not lead to
another node -- it's denoted by a cross as the second value.
(Of course in terms of C++, that box contains a \verb!NULL! pointer.
No surprises there.)
The thing that leads to the first node (the head) of the list
is now named \verb!phead! (as in \lq\lq pointer to head'' if you
want to think C++ ... duh).

The group of four nodes form a \defterm{singly linked list}.
Each individual node is called a \defterm{singly linked node}.
The \verb!phead! is just to arrive at the first of the four nodes
in the linked list.
The first node of the singly linked list is called the
\defterm{head}
and the last node is called the \defterm{tail}.
So we can call \verb!phead! the \lq\lq pointer to head''.
Now, although \verb!phead! points to the head node,
I will frequently say that \verb!phead! points to the whole linked list
since, after all, once you get to the head node, you can get to the
rest of the nodes.
This also matches our idea of a pointer that points to
a dynamic array in free store: technically speaking
the pointer has the address of the first value of that array, but
we still think of that pointer as pointing to the whole array.

That's on a piece of paper.
Don't worry: we can implement the above idea in code.

Before we go on, let me say that in real applications,
the nodes instead of being nodes of integers can be
for instance nodes on students.
The key can be for instance a student's ID -- that corresponds
to our integer value in a node.
The satellite data such as a student's first name,
last name, email address, etc. are usually not stored
directly in the node.
Instead the node usually contains the keys and
a pointer to the satellite data.
In the values of a node is copied, then only the key and
the pointer-to-satellite need to be copied.
I'll only focus on the key and not the satellite data
since what I'm going to talk about
concerns the organization of data to work quickly with keys
(example: add, delete, modify).
OK ... onward with data structures and algorithms on keys.

\newpage
\subsection{The singly linked node class}
Here's a class for the nodes.
{\small
\begin{console}
#include <cstddef>

class SLNode
{
public:
    SLNode(int key, SLNode * next = NULL)
      : key_(key), next_(next)
    {}
private:
    int key_;
    SLNode * next_;
};
\end{console}
}
The \verb!SL! is a shorthand for \verb!SinglyLinked! which is too much to
type.

(It's clear that ultimately, when the singly linked list of
integers is done, we can
convert it to template classes for modeling
singly linked list of doubles, characters, strings, etc.)

It's convenient to print the nodes.
When it comes to programming data structures that contains
pointers,
it's very useful when debugging to be able to quickly
chase the pointers.
So I'm going to print the nodes like this:
{\small
\begin{Verbatim}[frame=single]
#include <iostream>
#include <cstddef>

class SLNode
{
public:
    SLNode(int key, SLNode * next = NULL)
      : key_(key), next_(next)
    {}
    int key() const
    {
        return key_;
    }
    SLNode * next() const
    {
        return next_;
    }
    
private:
    int key_;
    SLNode * next_;
};

std::ostream & operator<<(std::ostream & cout,
                          const SLNode & node)
{
    cout << "<SLNode " << &node
         << "key:" << node.key()
         << ", next:" << node.next()
         << '>';
    return cout;
}
\end{Verbatim}

To experiment with the code we can do this:
{\small
\begin{console}
// ... SLNode code from above ...

int main()
{
    SLNode n2(2, NULL);
    SLNode n6(6, NULL);

    std::cout << n2 << '\n';
    std::cout << n6 << '\n';
    
    return 0;
}
\end{console}
}
and to link the node with value to the node with value 6, I can do this
{\small
\begin{Verbatim}[frame=single]
int main()
{
    SLNode n6(6, NULL);
    SLNode n2(2, &n2);

    std::cout << n2 << '\n';
    std::cout << n6 << '\n';
    
    return 0;
}
\end{Verbatim}
}
or if you have a \verb!set_next()! method, you can do this:
{\small
\begin{Verbatim}[frame=single]
int main()
{
    SLNode n6(6, NULL);
    SLNode n2(2, NULL);

    n2.set_next(&n6);

    std::cout << n2 << '\n';
    std::cout << n6 << '\n';
    
    return 0;
}
\end{Verbatim}
}

(Make sure you add the \verb!set_next()!) method.)

Of course the nodes are in the frame of \verb!main()! and
not in the free store.
So go ahead and create the whole linked list from above
and print out all the nodes.
This is what I get this:
\begin{python}
from latextool_basic import *

s = r'''#include <iostream>
#include <cstddef>

class SLNode
{
public:
    SLNode(int key, SLNode * next = NULL)
      : key_(key), next_(next)
    {}
    int key() const
    {
        return key_;
    }
    SLNode * next() const
    {
        return next_;
    }
    void set_next(SLNode * next)
    {
        next_ = next;
    }
    
private:
    int key_;
    SLNode * next_;
};

std::ostream & operator<<(std::ostream & cout,
                          const SLNode & node)
{
    cout << "<SLNode " << &node
         << " key:" << node.key()
         << ", next:" << node.next()
         << '>';
    return cout;
}

int main()
{
    SLNode n5(5, NULL);
    SLNode n4(4, NULL);
    SLNode n6(6, NULL);
    SLNode n2(2, NULL);

    n2.set_next(&n6);
    n6.set_next(&n4);
    n4.set_next(&n5);

    std::cout << n2 << '\n';
    std::cout << n6 << '\n';
    std::cout << n4 << '\n';
    std::cout << n5 << '\n';
    
    return 0;
}

'''
file('tmp12345678.cpp', 'w').write(s)
import os
print shell('g++ tmp12345678.cpp; ./a.out')
\end{python}

\begin{ex}
Add enough code so that you can get the above printout.
\qed
\end{ex}

To imitate our earlier diagram, we create a pointer
to point to the first node, the head.
Let's call the pointer \verb!phead! (again ... it means
\lq\lq pointer to head'').
Go ahead and do it.
We can now refer to the nodes of the linked list using
\verb!phead!.

\begin{ex}
Go ahead and create your \verb!phead! and set it to the right value.
\qed
\end{ex}

Now, instead of writing four statements to print the nodes,
let's write a simple while loop.
I'm going to use a pointer variable, say \verb!p!.
At the beginning,
the pointer variable \verb!p! points to the head.
That means I need
\begin{Verbatim}[frame=single]
p = phead;
\end{Verbatim}
Next I print the node that \verb!p! points to.
After that I need to get \verb!p! to point to the next node
and repeat.
I stop right after printing the last node ... how do I do that?
Well ... since after printing the last node, my pointer \verb!p!
move to the next and the last node has a next value of \verb!NULL!,
my \verb!p! would have \verb!NULL! at that point in time.
Therefore if I want to stop at this point (i.e., stop the loop),
it's because \verb!p! is \verb!NULL!.

The code would look like this:
\begin{python}
from latextool_basic import *

s = r'''#include <iostream>
#include <cstddef>

class SLNode
{
public:
    SLNode(int key0, SLNode * next0 = NULL)
      : key(key0), next(next0)
    {}
    int key() const
    {
        return key;
    }
    SLNode * next() const
    {
        return next;
    }
    void set_next(SLNode * next0)
    {
        next = next0;
    }
    
private:
    int key;
    SLNode * next;
};

std::ostream & operator<<(std::ostream & cout,
                          const SLNode & node)
{
    cout << "<SLNode " << &node
         << " key:" << node.key()
         << ", next:" << node.next()
         << '>';
    return cout;
}

int main()
{
    SLNode n5(5, NULL);
    SLNode n4(4, NULL);
    SLNode n6(6, NULL);
    SLNode n2(2, NULL);

    n2.set_next(&n6);
    n6.set_next(&n4);
    n4.set_next(&n5);

    SLNode * phead = &n2;
    /*
    std::cout << n2 << '\n';
    std::cout << n6 << '\n';
    std::cout << n4 << '\n';
    std::cout << n5 << '\n';
    */

    SLNode * p = phead;
    while (p != NULL)
    {
        std::cout << (*p) << std::endl;
        p = p->next();
    }
    
    return 0;
}
'''
file('tmp12345678.cpp', 'w').write(s)
import os

t = '''
SLNode * p = phead;
while (p != NULL)
{
    std::cout << (*p) << std::endl;
    p = p->next();
}'''
print console(t.strip()),
print "and the output is this:"
print shell('g++ tmp12345678.cpp; ./a.out')
\end{python}

We can even put that into a function:
\begin{Verbatim}[frame=single]
void print(SLNode * p)
{
    while (p != NULL)
    {
        std::cout << (*p) << std::endl;
        p = p->next();
    }
}
\end{Verbatim}
and call this function in \verb!main()! with
\begin{Verbatim}[frame=single]
...
int main()
{
    ...
    print(phead);
    ...
}
\end{Verbatim}
Now, just for practice, I want to write the \verb!print!
using recursion.
\begin{Verbatim}[frame=single]
void print(SLNode * p)
{
    /* // while loop version
    while (p != NULL)
    {
        std::cout << (*p) << std::endl;
        p = p->next();
    }
    */

    // recursive version
    if (p != NULL)
    {
        std::cout << (*p) << std::endl;
        print(p->next());
    }
}
\end{Verbatim}



The memory used by the nodes are in the frame of \verb!main()!.
At some point we will have to put the nodes in the free store.
Let's try to do that now -- by hand.
Later we'll have function to create nodes for us.
{\small
\begin{Verbatim}[frame=single]
int main()
{
    SLNode * n5 = new SLNode(5, NULL);
    SLNode * n4 = new SLNode(4, NULL);
    SLNode * n6 = new SLNode(6, NULL);
    SLNode * n2 = new SLNode(2, NULL);

    n2->set_next(&n6);
    n6->set_next(&n4);
    n4->set_next(&n5);

    SLNode * phead = n2;

    ...
}
\end{Verbatim}
}


\newpage
\subsection{Insert head}

We want to add values into a singly linked list.
One place to add a node is at the head of the list.
Here's the picture of a linked list (the same one before):
\begin{python}
from latextool_basic import *

def node(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '')
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}
Suppose now I perform an insert head with \verb!3! (i.e.,
\verb!3! so that it becomes the new head).
This means that I want this picture:

\begin{python}
from latextool_basic import *

def node(x, y, s, linecolor='black'):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s, linecolor=linecolor)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '', linecolor=linecolor)
    return c

p = Plot()
n3 = node(-2, -2, r'\textred{3}', linecolor='red')
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n3
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n3[1].center(), n2[0].bottomleft()], endstyle='>', linecolor='red')
p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n3[0].top()], endstyle='>', linecolor='red')
p += Line(points=[q.center(), n2[0].left()], endstyle='>', linecolor='red', linestyle='dashed')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

Note that there's a new node with value 3.
Furthermore, the link from \verb!phead! to the node with value 2 is
broken so that \verb!phead! points to the new node: the new node is now the
head.
Also, the new node (the new head) points to the node with value 2.

The pseudocode is of course
\begin{Verbatim}[frame=single]
declare a node pointer q
allocate memory for a new node with key value of 3
    and give the address of the new node to q
set the next value of the new node to the value of phead
set the value of phead to the value of q
\end{Verbatim}

Note that the above algorithm is independent of the length of the
linked list.
There's no loop/repetition.
You just work on one end (the head end) of the list and it doesn't matter
if you have 1000000 nodes -- the work is the same even if the list
has 5 things.
It's easy to see that the runtime is
\[
O(1)
\]

In terms of C++ code it would look like this:
\begin{Verbatim}[frame=single]
SLNode * q;
q = new SLNode(3, NULL);
q->set_next(phead);
phead = q;
\end{Verbatim}
Of course the first two can be combined:
\begin{Verbatim}[frame=single]
SLNode * q = new SLNode(3, NULL);
q->set_next(phead);
phead = q;
\end{Verbatim}
Also, the constructor allows us to set the \verb!next! value of the node:
\begin{Verbatim}[frame=single]
SLNode * q = new SLNode(3, phead);
phead = q;
\end{Verbatim}
This can be (finally) simplified to
\begin{Verbatim}[frame=single]
phead = new SLNode(3, phead);
\end{Verbatim}
Remember that the right-hand side of the above is executed first
so that the value of the \verb!phead! is
used on the right \textit{before}
\verb!phead! is overwritten by the address of the new node.
Now if I put the above in a function
\begin{Verbatim}[frame=single]
void insert_head(SLNode * phead, int key)
{
    phead = new SLNode(key, phead);
}
\end{Verbatim}
it won't work ... why?
Because this is passing the pointer value of \verb!phead!
in \verb!main()! to the \verb!phead! in \verb!insert_head()!:
this is pass by value (pointer value).
I want to change the value of \verb!phead! in \verb!main()!.
So I have to do this:
\begin{Verbatim}[frame=single]
void insert_head(SLNode ** pphead, int i)
{
    *pphead = new SLNode(i, *pphead);
}
\end{Verbatim}
The parameter \verb!pphead! is a pointer to \verb!phead! in
\verb!main()!.
In \verb!main()! I have to call \verb!insert_head()!
with the \textit{address} of \verb!phead!. (See below).

Another way to achieve the above is to pass by reference:
\begin{Verbatim}[frame=single]
void insert_head(SLNode *& phead, int i)
{
    phead = new SLNode(i, phead);
}
\end{Verbatim}
In this case the \verb!phead! is a reference to the
\verb!phead! in \verb!main()! is in \verb!main()!.
I call this function passing in \verb!phead!.

Let's add this insert add function to our code:
\begin{python}
from latextool_basic import *

s = r'''#include <iostream>
#include <cstddef>

class SLNode
{
public:
    SLNode(int key0, SLNode * next0 = NULL)
      : key(key0), next(next0)
    {}
    int key() const
    {
        return key;
    }
    SLNode * next() const
    {
        return next;
    }
    void set_next(SLNode * next0)
    {
        next = next0;
    }
    
private:
    int key;
    SLNode * next;
};


std::ostream & operator<<(std::ostream & cout,
                          const SLNode & node)
{
    cout << "<SLNode " << &node
         << " key:" << node.key()
         << ", next:" << node.next()
         << '>';
    return cout;
}

void print(SLNode * p)
{
    if (p != NULL)
    {
        std::cout << (*p) << std::endl;
        print(p->next());
    }
}

void insert_head(SLNode ** pphead, int i)
{
    *pphead = new SLNode(i, *pphead);
}

void insert_head(SLNode *& phead, int i)
{
    phead = new SLNode(i, phead);
}

int main()
{
    SLNode * phead = NULL;
    insert_head(&phead, 5); // or insert_head(phead, 5)
    print(phead);
    return 0;
}
'''
file('tmp12345678.cpp', 'w').write(s)
import os
t = r'''
...

void insert_head(SLNode ** phead, int i)
{
    *phead = new SLNode(i, *phead);
}

void insert_head(SLNode *& phead, int i)
{
    phead = new SLNode(i, phead);
}

int main()
{
    SLNode * phead = NULL;
    insert_head(&phead, 5);
    print(phead);
    
    return 0;
}
''' 
print console(t.strip()),
print "The output is this:"
print shell('g++ tmp12345678.cpp; ./a.out')
\end{python}
Let's create the whole linked list from the previous section:
\begin{python}
from latextool_basic import *

s = r'''#include <iostream>
#include <cstddef>

class SLNode
{
public:
    SLNode(int key0, SLNode * next0 = NULL)
      : key(key0), next(next0)
    {}
    int key() const
    {
        return key;
    }
    SLNode * next() const
    {
        return next;
    }
    void set_next(SLNode * next0)
    {
        next = next0;
    }
    
private:
    int key;
    SLNode * next;
};


std::ostream & operator<<(std::ostream & cout,
                          const SLNode & node)
{
    cout << "<SLNode " << &node
         << " key:" << node.key()
         << ", next:" << node.next()
         << '>';
    return cout;
}

void print(SLNode * p)
{
    if (p != NULL)
    {
        std::cout << (*p) << std::endl;
        print(p->next());
    }
}

void insert_head(SLNode ** phead, int i)
{
    *phead = new SLNode(i, *phead);
}

int main()
{
    SLNode * phead = NULL;
    insert_head(&phead, 5);
    insert_head(&phead, 4);
    insert_head(&phead, 6);
    insert_head(&phead, 2);
    print(phead);
    return 0;
}
'''
file('tmp12345678.cpp', 'w').write(s)
import os
t = r'''
...
int main()
{
    SLNode * phead = NULL;
    insert_head(&phead, 5);
    insert_head(&phead, 4);
    insert_head(&phead, 6);
    insert_head(&phead, 2);
    print(phead);
    
    return 0;
}
''' 
print console(t.strip()),
print "The output is this:"
print shell('g++ tmp12345678.cpp; ./a.out')
\end{python}
Let me say this (the obvious):
the memory used by \verb!phead! is in the frame of \verb!main!,
but the memory used by the nodes is in the free store.

\newpage
\subsection{Insert tail}

Another place where integer are inserted into the list is the tail.
Suppose I have this:

\begin{python}
from latextool_basic import *

def node(x, y, s, linecolor='black'):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s, linecolor=linecolor)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '', linecolor=linecolor)
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

After I insert 3 at the tail (i.e., I make 3 the next tail), I get this
picture

\begin{python}
from latextool_basic import *

def node(x, y, s, linecolor='black'):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s, linecolor=linecolor)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '', linecolor=linecolor)
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
n3 = node(5, -2, r'\textred{3}', linecolor='red')

p += n2
p += n6
p += n4
p += n5
p += n3

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')
p += Line(points=[n5[1].center(), n3[0].top()], endstyle='>', linecolor='red')

p += Line(points=[(n3[1].topleft()), (n3[1].bottomright())], linecolor='red')
p += Line(points=[(n3[1].topright()), (n3[1].bottomleft())], linecolor='red')

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

The pseudocode looks like this where the new value is stored in \verb!i!:
\begin{Verbatim}[frame=single]
declare a node pointer q 
allocate memory for a new node with value i and
    store the address of the node in q
declare a node pointer r
point r to the tail: this involves looping r
    until r is pointing to the tail
set the next of the node that r is pointing to to the
    value in q
set the next of the node that 
\end{Verbatim}

In \textit{this} case, the runtime is clearly dependent on the length
of the list since in the above computation for \verb!r!,
\verb!r! runs through the list until the tail is reached.
So this is\textit{very} different from insert head.
This means that if there are $n$ nodes, then \verb!r! must
run through all the addresses of the $n$ nodes.
The runtime is clearly
\[
O(n)
\]

I'll leave the implementation to you.
Simplify the code.
Obviously ... test your code.


\newpage
\subsection{Delete head}

Here's our linked list again:

\begin{python}
from latextool_basic import *

def node(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '')
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

By a delete (or remove) head, I mean that I will get this after the operation:

\begin{python}
from latextool_basic import *

def node(x, y, s, linecolor='black', linestyle=''):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s,
        linecolor=linecolor, linestyle=linestyle)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '',
                                linecolor=linecolor, linestyle=linestyle)
    return c

p = Plot()
n2 = node(0, 0, r'\textred{2}', linecolor='red', linestyle='dashed')
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
#p += n2
p += n6
p += n4
p += n5
p += n2

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>', linecolor='red', linestyle='dashed')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n6.left()], endstyle='>', linecolor='red')
p += Line(points=[q.center(), n2.left()], endstyle='>', linecolor='red', linestyle='dashed')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

Two things must happen.
You see that the head node to be removed from the linked list
is removed from the list: the \verb!phead! points to the node with
value 6.
But another really important thing is that the node with value 2
must be given back to the free store.
(Don't forget the nodes are now in the free store, not in the frame of
\verb!main!.)

\begin{Verbatim}[frame=single]
let q be a pointer that points to the head, i.e., give the
    value in phead to q
let phead point to the node that q points to, i.e., give the
    next value of the node q points to to phead
deallocate the node that q points to
\end{Verbatim}

Be careful ... have you considered the case where there's no head?
i.e., what should happen when you delete head when the linked list
is empty?
If you want the delete to fail quietly, then you do nothing:
\begin{Verbatim}[frame=single]
if phead is not NULL:
    let q be a pointer that points to the head, i.e., give
        the value in phead to q
    let phead point to the node that q points to, i.e., give
        the next value of the node q points to to phead
    deallocate the node that q points to
\end{Verbatim}
However you might want to throw an exception
(or return a boolean value of true to indicate a success delete
and false if there's a failure.)
In the case you want to do this:
\begin{Verbatim}[frame=single]
if phead is not NULL:
    let q be a pointer that points to the head, i.e., give
        the value in phead to q
    let phead point to the node that q points to, i.e., give
        the next value of the node q points to to phead
    deallocate the node that q points to
else:
    throw an exception (some kind of underflow exception)
\end{Verbatim}


\begin{ex}
 What is the runtime?
\qed
\end{ex}

\begin{ex}
Write a function \texttt{delete\_head()} so that
calling \texttt{delete\_head(\&phead)}
from \texttt{main()} (like before)
removes the head node.
(Test it.)
Write another version so that you call
\verb!delete_head(phead)! instead.
\qed
\end{ex}


\newpage
\subsection{Delete tail}

It should be clear what you should do here.
If I start with this:

\begin{python}
from latextool_basic import *

def node(x, y, s):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '')
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, 5)
p += n2
p += n6
p += n4
p += n5

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())])
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

and I do delete tail, then I get this:

\begin{python}
from latextool_basic import *

def node(x, y, s, linecolor='black', linestyle=''):
    c = RectContainer(x=x, y=y)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % s,
        linecolor=linecolor, linestyle=linestyle)
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=r'{\texttt{%s}}' % '',
                                linecolor=linecolor, linestyle=linestyle)
    return c

p = Plot()
n2 = node(0, 0, 2)
n6 = node(0, -2, 6)
n4 = node(2, -2, 4)
n5 = node(3, 0, r'\redtext{5}', linecolor='red', linestyle='dashed')
#p += n2
p += n6
p += n4
p += n5
p += n2

p += Line(points=[n2[1].center(), n6[0].top()], endstyle='>')
p += Line(points=[n6[1].center(), n4[0].left()], endstyle='>')
p += Line(points=[n4[1].center(), n5[0].bottom()], endstyle='>', linecolor='red', linestyle='dashed')

p += Line(points=[(n5[1].topleft()), (n5[1].bottomright())], linecolor='red', linestyle='dashed')
p += Line(points=[(n5[1].topright()), (n5[1].bottomleft())], linecolor='red', linestyle='dashed')

p += Line(points=[(n4[1].topleft()), (n4[1].bottomright())])
p += Line(points=[(n4[1].topright()), (n4[1].bottomleft())])

x,y = n2.bottomleft(); x -= 3
q = Rect2(x0=x, y0=y, x1=x+0.7, y1=y+0.7, label=r'{\texttt{%s}}' % '')
p += q

#p += Line(points=[q.center(), n6.left()], endstyle='>')
p += Line(points=[q.center(), n2.left()], endstyle='>')

x,y = q.left(); x -=0.7
p += Rect2(x0=x, y0=y, x1=x, y1=y, label=r'{\texttt{%s}}' % 'phead', linecolor='white')

print p
\end{python}

The meaning of the diagram should be clear.

\begin{ex}
Write down the pseudocode/algorithm.
What is the runtime?
Implement and test it.
\qed
\end{ex}

\begin{ex}
Suppose \texttt{p} points to a node in the singly linked list.
Write a function so that \texttt{delete(\&phead, p)}
deletes the above node from the linked list.
\qed
\end{ex}

\newpage
\subsection{Find}

\begin{ex}
Write a function \verb!find()! such that
\verb!find(phead, key)! returns
the address of the first node (going from
head to tail) that has a key with value of \verb!key!.
What is the runtime?
\qed
\end{ex}

\begin{ex}
Write a function \verb!find()! such that
\verb!find(p, q, key)! returns the address of the first node
that has key value of \verb!key! going from the node at
address \verb!p! up to but not including the node with address
\verb!q!.
\qed
\end{ex}

\newpage
\subsection{Others}

\begin{ex}
Write a function \verb!clear()! such that
\verb!clear(phead)! removes all the values in the linked list. 
\end{ex}

\begin{ex}
Write a function \verb!copy()! such that
on calling \verb!copy(phead)!, the linked list that \verb!phead!
points to is cloned and the pointer to head of the clone is
returned.
In other words after
\begin{console}
clear(phead2);
phead2 = copy(phead1)
\end{console}
\verb!phead1! and \verb!phead2! will point to linked lists
with the same values.
What is the runtime?
\qed
\end{ex}


\begin{ex}
Write a function \verb!size()! such that
\verb!size(phead)! returns the number of values in the linked list.
What is the runtime?
\qed
\end{ex}


\begin{ex}
Write a function \verb!is_empty()! such that
\verb!is_empty(phead)! returns the true exactly when
there is no value in the linked list.
What is the runtime?
\qed
\end{ex}


\begin{ex}
Write a function \texttt{concat()} such that
on calling \texttt{concat(\&phead1, phead2)}
the values in the linked list that \texttt{phead2} points to
to used to extend the linked list that
\texttt{phead1} points to.
For practice, write another version that allows you to do
\texttt{concat(phead1, phead2)}.
Write an \texttt{operator+=()} that does the same thing.
\qed
\end{ex}

\begin{ex}
Write an \texttt{operator+()} so that on calling
\texttt{operator+(phead1, phead2)}
a new list is built with values from teh above two lists
and the head address is returned.
\qed
\end{ex}
  

\begin{ex}
Write a function \texttt{prepend()} such that
on calling \texttt{prepend(\&phead1, phead2)}
the values in the linked list that \texttt{phead2} points to
to used to extend (at the head) the linked list that
\verb!phead1! points to.
For instance if
\texttt{phead1} points to 1,2,3
and
\texttt{phead2} points to 4,5,6,
then after calling the function,
\texttt{phead1} points to 4,5,6,1,2,3.
\qed
\end{ex}

\begin{ex}
Write a function
\texttt{reverse()} that reverses the values in the linked list.
\qed
\end{ex}

\begin{ex}
  Write a function \texttt{count()} so that
  \texttt{count(phead, key)} returns the number of times \texttt{key}
  appears in the linked list.
  \qed
  \end{ex}
  
\begin{ex}
Linked list are not strong in random access, i.e.,
returning \texttt{phead[k]}, the $k$--th value in the list linked
is slow.
Why? What is the runtime?
Implement it anyway.
Linked list are good at sequential access. In the case of singly
linked list, they are good when the sequential access in one direction.
\qed
\end{ex}


\newpage
\subsection{Singly linked list class}

I already have a class for the the nodes.
Most of the functions from previous section enough
for list processing.

But now
I also want a class to represent the whole singly linked list.
What should go into the class?
Well first of all,
since a linked list represents the whole chain
of all singly linked nodes, the whole linked list.
I definitely want to access the head since
from the head of the linked list, I can get all the nodes.
Therefore ... clearly my singly linked list
objects must all have a pointer to the head
of the linked list.
So here's the start of our singly linked list class:

{\small
\begin{Verbatim}[frame=single]
// SLNode class here

class SLList
{
public:
    SLList()
    : phead_(NULL)
    {}
    
private:
    SLNode * phead_;
};
\end{Verbatim}
}

Taking the cue from \texttt{std::vector},
I want to quickly find out how big
my singly linked list it.
So I'll keep a size measure in the class as well.
Of course if you never ever ask for the size
of the linked list, then \texttt{size\_} is
redundant:
{\small
\begin{Verbatim}[frame=single]
// SLNode class here

class SLList
{
public:
    SLList()
    : phead_(NULL), size_(0)
    {}
    
private:
    SLNode * phead_;
    int size_;
};
\end{Verbatim}
}
Of course you increment and decrement \verb!size_!
depending on whether you're adding or removing
nodes to the linked list.


Now if you think about it, you'll see that in fact when you're
completely done with the above class, for your cleanup,
the
\texttt{SLNode} class should probably be nested inside
\texttt{SLList} class.
Why?
Because you probably want to do something like
\begin{Verbatim}[frame=single]
SLList list;
list.insert_head(5);
std::cout << list << '\n';
\end{Verbatim}
i.e., you would say \lq\lq add this or that integer to my list'',
\lq\lq remove this or that integer from my list'',
\lq\lq print the list'', etc.
In other words, you almost never refer to the \texttt{SLNode}.
In fact, if you're really sure you (or someone else)
don't use \texttt{SLNode}
outside the above file, then you might even want to have
the \texttt{SLNode} in a \textit{private} section of \texttt{SLList}:
{\small
\begin{Verbatim}[frame=single]
class SLList
{
private:
    class SLNode
    {
        ...
    };
...    
};
\end{Verbatim}
}
I hope you realize that all the functions you wrote earlier won't work
anymore since the name \texttt{SLNode} is hidden.
How would you fix that with the least amount of code?

\begin{ex}
Answer the above question. Test your idea.
\qed
\end{ex}


Of course the first thing to do is to print your linked list:
{\small
\begin{Verbatim}[frame=single]
class SLList
{
    ...
};

std::ostream & operator<<(std::ostream & cout,
                          const SLList & list)
{
    // FILL IN THE BLANKS
    return cout;
}
\end{Verbatim}

The next few things to do is pretty standard ...

\begin{ex}
Since the \texttt{SLList} class contains pointers,
clearly you have to write your own
destructors, copy constructor, and \verb!operator=()!.
Do it now.
\qed
\end{ex}

\begin{ex}
Add code to the class so that you can do
\begin{console}
SLList list;
list.insert_head(5);
list.push_front(5); 
\end{console}
\qed
\end{ex}

\begin{ex}
Add code to the class so that you can do
\begin{console}
SLList list;
list.insert_head(5);
std::cout << list.get_head() << '\n'; // 5 is printed
std::cout << list.front() << '\n';    // 5 is printed
list.front() = 42;    // change head value to 42
\end{console}
\qed
\end{ex}

\begin{ex}
Add code to the class so that you can do
\begin{console}
SLList list;
list.insert_tail(4);
std::cout << list.get_tail() << '\n'; // 4 is printed
std::cout << list.back() << '\n';      // 4 is printed
list.back() = 42;   // change tail value to 42
\end{console}
\qed
\end{ex}

\begin{ex}
Add code to the class so that you can do
\begin{console}
SLList list;
list.insert_head(5);
list.delete_head();
\end{console}
\qed
\end{ex}

\begin{ex}
Add code to the class so that you can do
\begin{console}
SLList list;
list.insert_tail(5);
list.push_back(5);
list.delete_tail();
list.pop_back()
\end{console}
\qed
\end{ex}

\begin{ex}
Add code so that if \texttt{list} is an \texttt{SLList} object,
you can do \texttt{list.size()}.
\qed
\end{ex}


\begin{ex}
Write  code so that you can do
\texttt{list.clear()} so that
after doing that the linked list is empty.
\qed
\end{ex}

\begin{ex}
Once you're done with the above,
change it to a class template.
\qed
\end{ex}

%\newpage
%\section{Search}
%\newpage
%[PUT SOMEWHERE]
%Here's the node class:
%\fvset{fontsize=\scriptsize, frame=single}
%\VerbatimInput{linkedlist/sllist/SinglyLinkedListNode.h}
%Here's the singly linked list class:
%\VerbatimInput{linkedlist/sllist/SinglyLinkedList.h}


\newpage
\subsection{Iterators}

Add iterators to your \texttt{SLList} class:
{\small
\begin{console}
class SLList
{
public:
    class iterator
    {
    private:
        SLNode * p;
    };    
private:
}
\end{console}
}
Of course an \texttt{SLList::iterator} object is more or less a pointer
to a value in the singly linked list.

\begin{ex}
Add a \texttt{begin()} method to \texttt{SLList} so that it
returns an iterator object that points to the head node.
When references the iterator object returns a reference to the
key value of the node that the iterator points to.
{\small
\begin{Verbatim}[frame=single]
SLList list;
list.insert_head(5);
list.insert_tail(100);
typename SLList::iterator p = list.begin();
std::cout << (*p) << std::endl; // prints 5
*p = 42;                        // change head key value to 42
*(list.begin()) = 43;           // change head key value to 43
\end{Verbatim}
}
\end{ex}

\begin{ex}
Add just enough code to your iterator class so that you can do this:
{\small
\begin{Verbatim}[frame=single]
SLList list;
list.insert_head(5);
list.insert_tail(100);
typename SLList::iterator p = list.begin();
++p;                            // p points to tail
std::cout << (*p) << std::endl; // prints 100
*p = 42;                        // change tail key value to 42
\end{Verbatim}
}
\end{ex}


\begin{ex}
Now add code so that you can also do this
\texttt{p++}.
What is the difference between and pre- and post-increment?
\end{ex}


\begin{ex}
Add just enough code to your iterator class so that you can do this:
{\small
\begin{Verbatim}[frame=single]
SLList list;

// list: 5 -> 100 -> 200 -> 300
list.insert_head(5);
list.insert_tail(100);
list.insert_tail(200);
list.insert_tail(300);

// Prints 5 100 200 300
for (typename SLList::iterator p = list.begin();
     p != list.end(); ++p)
{
    std::cout << (*p) << ' ';
}
std::cout << std::endl;
\end{Verbatim}
} 
\end{ex}

Now add a constant iterators to your \texttt{SLList} class:
{\small
\begin{console}
class SLList
{
public:
    class iterator
    {
    private:
        SLNode * p;
    };

    class const_iterator
    {
    private:
        SLNode * p;
    };
    
private:
}
\end{console}
}

\begin{ex}
Write enough code so that you can do this:
{\small
\begin{Verbatim}[frame=single]
void print(const SLList & list)
{
    for (typename SLList::const_iterator p = list.begin();
         p != list.end(); ++p)
    {
        std::cout << (*p) << ' ';
    }
    std::cout << std::endl;  
}

int main()
{
    SLList list;

    // list: 5 -> 100 -> 200 -> 300
    list.insert_head(5);
    list.insert_tail(100);
    list.insert_tail(200);
    list.insert_tail(300);
    print(list);           // prints 5 100 200 300

    ...
}
\end{Verbatim}
}
A constant iterator cannot change the value that
iterator points to (or rather it cannot change
the value that \textit{the pointer in the iterator}
points to).
This means that if \texttt{p} is an \texttt{SLList}
constant iterator,
\texttt{*p}
should not return a reference, but rather a constant
reference.
\qed
\end{ex}

