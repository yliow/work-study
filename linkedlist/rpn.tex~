\section{Postfix notation; reverse Polish notation (RPN)}

There is an analogous \defterm{postfix notation} or \defterm{reverse
Polish notation} (RPN).
Instead of our usual \verb!3 + 5! (using infix notation),
of \verb!+ 3 5! (using prefix notation or Polish notation),
in the postfix notation or the reverse Polish notation (RPN), you would write
\[
\texttt{3 5 +}
\]
Here's the complete evaluation of an RPN expression: 
\begin{console}
  1 2 3 5 + - 4 - *
= 1 2 8 - 4 - *       by 3 5 + = 8
= 1 -6 4 - *          by 2 8 - = -6
= 1 -10 *             by -6 4 - = -10
= -10
\end{console}

Here's how to do it in a more systematic way:
Think of \verb!|! as your finger in the following computation.
Your finger scans left to right. In other words, you can only \textit{see}
what's to the left of your finger.
Once you see \verb![num1] [num2] [op]! you can simplify.
Here we go ...
\begin{console}
  |1 2 3 5 + - 4 - *
=  1|2 3 5 + - 4 - *
=  1 2|3 5 + - 4 - *
=  1 2 3|5 + - 4 - *
=  1 2 3 5|+ - 4 - *
=  1 2 3 5 +|- 4 - *
=  1 2 8|- 4 - *        by 3 5 + = 8
=  1 2 8 -|4 - *        
=  1 -6|4 - *           by 2 8 - = -6
=  1 -6 4|- *
=  1 -6 4 -|*
=  1 -10|*              by -6 4 - = -10
=  1 -10 *|
=  -10|                 by 1 -10 * = -10
\end{console}
Make sure you study the above carefully.
Once you get the hang of the above computation,
the following should not be surprising:
\begin{console}          
stack (top on right)                       
[]                 1 2 3 5 + - 4 - *
[1]                  2 3 5 + - 4 - *
[1, 2]                 3 5 + - 4 - *      
[1, 2, 3]                5 + - 4 - *
[1, 2, 3, 5]               + - 4 - *
[1, 2, 8]                    - 4 - *   because 3 5 + is 8
[1, -6]                        4 - *   because 2 8 - is -6
[1, -10]                           *   because -6 4 - is -10
[-10]                                  because 1 -10 * is -10
\end{console}

\begin{Verbatim}[frame=single]
EVALUATE-RPN
INPUT: x (a list of integers and operators)
OUTPUT: r (an integer)

let s be a stack
repeat the following until x is empty:
    remove a symbol from x: call it y
    if y is an integer push that onto s
    otherwise y is an operator and do the following:
        pop num2 from s
        pop num1 from s
        push (num1 y num2) onto s
pop r from s
if s is empty, return r
otherwise ERROR
\end{Verbatim}
  
\begin{ex}
What is the runtime in the above algorithm
(in terms of the length of the expression)?
\qed
\end{ex}

\begin{ex}
  Evaluate the following RPN expressions.
\begin{tightlist}
\item \verb!1 3 2 * + 4 5 * -!
\item \verb!3 * 2 / 2 - 4 + 5!
\end{tightlist}
\qed
\end{ex}

\begin{ex}
  Convert the following expression in infix notation to
  postfix/RPN notation. (Do not simplify - just convert).
  \begin{tightlist}
    \item \texttt{4 + 2 * 3 - 8 / 7}
    \item \texttt{4 + 2 * (3 - 8) / 7}
    \item \texttt{(4 + 2 * 3) - 8 / 7}
    \item \texttt{(4 + 2 * (3 - 8)) / 7}    
  \end{tightlist}
  \qed
\end{ex}


% http://www.mathblog.dk/tools/infix-postfix-converter/

