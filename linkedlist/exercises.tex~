\section{More exercises}

\begin{ex}
I'm going to make some changes to the doubly linked list.
Here's a doubly linked list (without sentinel nodes):

\begin{python}
from latextool_basic import *
from dllist import *    
p = Plot()
dllist(p, 0, 0, [2,6,4,5])
print p
\end{python}

The usual delete tail will result in this:

\begin{python}
from latextool_basic import *    
from dllist import *    
p = Plot()
dllist(p, 0, 0, [2,6,4])
print p
\end{python}



Write a doubly linked list class that does this instead:

\begin{python}
from latextool_basic import *
from dllist import *    
p = Plot()
dllist(p, 0, 0, [2,6,4,5], 0, 2)
print p
\end{python}

When I insert 8 as tail, I don't have to allocate memory. I just use the node
with 5, but I replace the 5 with 8:

\begin{python}
from latextool_basic import *
from dllist import *        
p = Plot()
dllist(p, 0, 0, [2,6,4,8])
print p
\end{python}

In other words, we delay the deallocation of nodes.
We can think of the used but not deallocated nodes as extra nodes
waiting to be used.
When we do want to release the memory, we call the
\verb!shrink_to_fit()!.
Likewise, I can do likewise at the head.

Next, add sentinel nodes:

\begin{python}
from latextool_basic import *
from dllist import *    
p = Plot()
dllist(p, 0, 0, ['?',2,6,4,8,'?'])
print p
\end{python}

The pointer \texttt{phead} should probably be called
\texttt{pheadsentinel}; likewise for \texttt{ptail}.
(The \texttt{?} denotes integer values we don't care about.)
And if I delete the tail, the above becomes

\begin{python}
from latextool_basic import *
from dllist import *    
p = Plot()
dllist(p, 0, 0, ['?',2,6,4,8,'?'], end=-2)
print p
\end{python}

At this point, the size of the linked list is (of course) 3
and the capacity is 4.

Of course the linked list starts off as an empty list
that looks like this (there are two sentinel nodes)

\begin{python}
from latextool_basic import *
from dllist import *    
p = Plot()
dllist(p, 0, 0, ['?','?'])
print p
\end{python}

Forget about the \texttt{phead} and \texttt{ptail}
and store the head sentinel and tail sentinel in the
doubly linked list object.

Objects of this type of linked list have
\texttt{size()} and \texttt{capacity()}
that returns the object integer values.

Implement this type of linked list.
\qed
\end{ex}


\begin{ex}
Write this function
\begin{Verbatim}[frame=single]
template < typename T >
void mergesort(std::list< T > & x);
\end{Verbatim}
that performs mergesort on linked lists.
\qed
\end{ex}

\begin{ex}
Write a sorted doubly linked list class.
\qed
\end{ex}


\begin{ex}
  skip list
\end{ex}
