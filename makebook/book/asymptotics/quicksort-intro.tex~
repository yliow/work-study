 \section{Quicksort: Introduction}

Now we come to one of the most powerful 
comparison-based sorting algorithms for arrays:
the quicksort.

In this section, I will show you the main idea behind quicksort.
The method here is not the real quicksort but it's eaasier to understand
quickly so that with this overview of quicksort you can easily understand
the real one (see next section).

Suppose 

\begin{python}
from latextool_basic import *
p = Plot()

def arr(x=0, y=0, xs=[]):
    return Array2d(x, y, [xs], width=0.7, height=0.7)
def string(x=0, y=0, label=''):
    label = r'\text{\texttt{%s}}' % label
    return Rect2(x, y, x, y, label=label, linewidth=0)
a = arr(xs=[3,2,6,5,1,4])
p += a
x, y = a[0][0].left()
p += string(x-0.3, y, 'x')
print p
\end{python}

Using the first value \verb!x[0] = 3!, we split \verb!x! into two parts,
\verb!left! and \verb!right! where
(at this point), you should think of \verb!left! as \verb![2,1]!
and \verb!right! as \verb![6,5,4]!.
The values in \verb!left! are less than or equal to \verb!3! and 
the values in \verb!right! are greater than  \verb!3!.
\verb!3! is called a \defterm{pivot}.
This picture helps:

\begin{python}
from latextool_basic import *
p = Plot()

width = height = 0.7

def arr(x=0, y=0, xs=[]):
    return Array2d(x, y, [xs], width=width, height=height)

def string(x=0, y=0, label=''):
    label = r'\text{\texttt{%s}}' % label
    return Rect2(x, y, x, y, label=label, linewidth=0)

a = arr(xs=[3,2,6,5,1,4])
p += a
x, y = a[0][0].left()
p += string(x-0.3, y, 'x')

x, y = a[0][2].bottomright()

left = arr(x=x - 2 * width - len([2,1]) * width, y = y - 1, xs=[2,1])
p += left

right = arr(x=x + 2 * width, y = y - 1, xs=[6,5,4])
p += right

leftx, lefty = left.topright(); lefty += 0.1
rightx, righty = right.topleft(); righty += 0.1
p += Line(points=[(x, y - 0.1), (leftx, lefty)], endstyle='->') 
p += Line(points=[(x, y - 0.1), (rightx, righty)], endstyle='->') 

x, y = left.left()
p += string(x - 0.6, y, 'left')
x, y = right.left()
p += string(x - 0.7, y, 'right')
print p
\end{python}

Joining up \verb!left!, the pivot \verb!3! as a array of one value \verb![3]!, 
and the \verb!right! together
\[
\text{\texttt{left + [3] + right}}
\]
(assuming that one can concatenate arrays using \verb!+!).
give us this this new array:

\begin{python}
from latextool_basic import *
p = Plot()
p += chunkedarray(0, 0, arr=[[2,1],[3],[6,5,4]], cellheight=0.7, cellwidth=0.7)
print p
\end{python}

where I've added two $|$'s in the array diagram above show you the part of the 
array from \verb!left!, the pivot, and the \verb!right!.
 
Although this is not sorted, notice that ... 
and this is {\it really important} ...
\begin{tightlist}
\li The \verb!pivot! is in the correct place (i.e., \verb!3! is in its sorted
    position.)
\li Furthermore, although each individual value in \verb!left!
or \verb!right! might not be in their right place yet, they
are at least correct {\it with respect to the pivot}.
For instance \verb!2! is obviously not in the correct place yet,
but at least it is to the left of the pivot \verb!3!.
\end{tightlist}

Informally, in quicksort, the \defterm{partition} procedure refers to
\begin{tightlist}
\li Choosing a pivot, say \verb!p!
\li Creating the \verb!left! and \verb!right! chunks of values
\li Joining up \verb!left!, \verb![p]!, and \verb!right!
\end{tightlist}
Later you'll see that you actually do not need to create new array
\verb!left! and \verb!right!.
Right now, just remember that given an array, 
partitioning (in quicksort) means to pick a value in the 
array (the pivot), create a \verb!left! chunk of values from the array
which are less than or equal to the pivot, and another 
chunk called \verb!right! whose values are greater than the pivot
and then putting the \verb!left! part, the pivot, and the \verb!right!
part together.

Now let's look at our example above.
Notice that the \verb!left! and \verb!right! need not be not sorted:

\begin{python}
from latextool_basic import *
p = Plot()

width = height = 0.7

def arr(x=0, y=0, xs=[]):
    return Array2d(x, y, [xs], width=width, height=height)

def string(x=0, y=0, label=''):
    label = r'\text{\texttt{%s}}' % label
    return Rect2(x, y, x, y, label=label, linewidth=0)

a = arr(xs=[3,2,6,5,1,4])
p += a
x, y = a[0][0].left()
p += string(x-0.3, y, 'x')

x, y = a[0][2].bottomright()

left = arr(x=x - 2 * width - len([2,1]) * width, y = y - 1, xs=[2,1])
p += left

right = arr(x=x + 2 * width, y = y - 1, xs=[6,5,4])
p += right

leftx, lefty = left.topright(); lefty += 0.1
rightx, righty = right.topleft(); righty += 0.1
p += Line(points=[(x, y - 0.1), (leftx, lefty)], endstyle='->') 
p += Line(points=[(x, y - 0.1), (rightx, righty)], endstyle='->') 

x, y = left.left()
p += string(x - 0.6, y, 'left')
x, y = right.left()
p += string(x - 0.7, y, 'right')
print p
\end{python}

So what should we do?
Well ... we'll just perform quicksort on the 
\verb!left! and \verb!right! as well.
They will have their own \verb!left! and \verb!right!.
In other words, 
instead of doing this
\[
\text{\texttt{left + [3] + right}}
\]
we continue the same process recursively
on \verb!left! and \verb!right! and then
join up the results with the pivot in the middle:
\[
\text{\texttt{quicksort(left) + [3] + quicksort(right)}}
\]
(assuming that one can concatenate arrays using \verb!+!).
Of course this means that \verb!3! is in its right place
and other values in \verb!left! and \verb!right!
are recursively placed in their right places recursively.

For instance applying the above
partition method to the array \verb![2,1]! above (calling it \verb!x!), 
we get this:

\begin{python}
from latextool_basic import *
p = Plot()

width = height = 0.7

def arr(x=0, y=0, xs=[], width=width):
    return Array2d(x, y, [xs], width=width, height=height)

def string(x=0, y=0, label=''):
    label = r'\text{\texttt{%s}}' % label
    return Rect2(x, y, x, y, label=label, linewidth=0)

a = arr(xs=[2,1])
p += a
x, y = a[0][0].left()
p += string(x-0.3, y, 'x')

x, y = a[0][0].bottomright()
left = arr(x=x - 2 * width - len([1]) * width, y = y - 1, xs=[1])
p += left

right = arr(x=x + 2 * width, y = y - 1, xs=[''], width=0.1)
p += right

leftx, lefty = left.topright(); lefty += 0.1
rightx, righty = right.topleft(); righty += 0.1
p += Line(points=[(x, y - 0.1), (leftx, lefty)], endstyle='->') 
p += Line(points=[(x, y - 0.1), (rightx, righty)], endstyle='->') 

x, y = left.left()
p += string(x - 0.6, y, 'left')
x, y = right.left()
p += string(x - 0.7, y, 'right')
print p
\end{python}

where the \verb!right! in this case is an empty array
(I'm using a skinny rectangle to denote an empty array).
In \textit{this} case, if we join up the \verb!left!, 
the pivot as a single-value-array, and \texttt{right}, 
\[
\text{\texttt{left + [2] + right}}
\]
I get 
\[
\text{\texttt{[1] + [2] + []}}
\]
i.e., \texttt{[1, 2]}.

I will use the following convention so that functional computation
includes hints of scopes of the function caller and callee.
For instance suppose \verb!f(x) = x * x!, then when I call
\verb!f(5)! in \verb!main()!, I will write this:
\[
\text{\texttt{f(5)}} 
= (\text{\texttt{5 * 5}}) 
= (\text{\texttt{25}})
= 25 
\]
This is what I mean in detail:

\begin{align*}
&\text{\texttt{f(5)}} & & \text{this is a function call in \texttt{main()}}\\
&= (\text{\texttt{5 * 5}}) & & \text{this computation is in \texttt{f()}}\\
&= (\text{\texttt{25}}) & & \text{this computation is in \texttt{f()}}\\
&= 25   & & \text{this value is now returned to \texttt{main()}}
\end{align*}

In other words, I add a pair of parentheses \texttt{(...)} whenever I go into a
function and I remove a pair of parentheses whenever I leave the function.
Make sure you see the difference between 
\texttt{(25)}
and
\texttt{25}.
This is my personal convention.

Putting this partition computation with the previous, you see something
like this:
\begin{align*}
&\texttt{quicksort([3,2,6,5,1,4])} \\
&= \biggl( 
   \texttt{quicksort([2,1])} + 
                \texttt{[3]} +
                \texttt{quicksort([6,5,4])} 
   \biggr)
\\
&= \biggl(
   \biggl(
       \texttt{quicksort([1])} +
       \texttt{[2]} +
       \texttt{quicksort([])} 
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr)
\\
&= \biggl(
   \biggl(
       \biggl( \texttt{[1]} \biggr) +
       \texttt{[2]} +
       \texttt{quicksort([])} 
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}   
   \biggr)
\\
&= \biggl(
   \biggl(
       \texttt{[1]} +
       \texttt{[2]} +
       \texttt{quicksort([])} 
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr)
\\
&= \biggl(
   \biggl(
       \texttt{[1,2]} +
       \texttt{quicksort([])} 
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr)
\\
&= \biggl(
   \biggl(
       \texttt{[1,2]} +
       \biggl( \texttt{[]} \biggr) 
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr)
\\
&= \biggl(
   \biggl(
       \texttt{[1,2]} +
       \texttt{[]} 
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr) 
\\
&= \biggl(
   \biggl(
       \texttt{[1,2]}
   \biggr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr)
\\
&= \biggl(
       \texttt{[1,2]}
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \biggr)
\\
&= \biggl(
   \texttt{[1,2]}
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}   
   \biggr)
\end{align*}

This also hints at what we should do for the base case.
Let me write that down before I finish the above
computation ...




\newpage
\subsection{Base case}

What is the base case?
Well ... if the array has length less than or equal to $1$,
the array is already sorted so there's no need to perform 
the partition procedure -- we just return the array itself.
In other words, if \verb!x! is an array of size 0 or 1, then 
\[
\texttt{quicksort(x) = x}
\]
(This is just like mergesort, so no surprises here.)
Look at the computation in the previous section and you'll see that
I have actually used this fact in two places:
\[
\texttt{quicksort([1])} 
= 
\texttt{[1]}
\,\,\, 
\text{ and }
\,\,\,
\texttt{quicksort([])} 
= \texttt{[]} 
\]

\begin{ex}
Check the computation in the previous section
and make sure you see 
\[
\texttt{quicksort([1])} 
= 
\texttt{[1]}
\,\,\, 
\text{ and }
\,\,\,
\texttt{quicksort([])} 
= 
\texttt{[]} 
\]
being used.
\qed
\end{ex}

Continuing the computation from the previous section
we get this:
\begin{align*}
&\texttt{quicksort([3,2,6,5,1,4])} 
\\
&= \bigl( 
   \texttt{quicksort([2,1])} + 
                \texttt{[3]} +
                \texttt{quicksort([6,5,4])} 
   \bigr)
\\
&= \bigl(
   \bigl(
       \texttt{quicksort([1])} +
       \texttt{[2]} +
       \texttt{quicksort([])} 
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\
&= \bigl(
   \bigl(
       \bigl( \texttt{[1]} \bigr) +
       \texttt{[2]} +
       \texttt{quicksort([])} 
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}   
   \bigr)
\\
&= \bigl(
   \bigl(
       \texttt{[1]} +
       \texttt{[2]} +
       \texttt{quicksort([])} 
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\
&= \bigl(
   \bigl(
       \texttt{[1,2]} +
       \texttt{quicksort([])} 
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\
&= \bigl(
   \bigl(
       \texttt{[1,2]} +
       \bigl( \texttt{[]} \bigr) 
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\
&= \bigl(
   \bigl(
       \texttt{[1,2]} +
       \texttt{[]} 
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr) 
\\
&= \bigl(
   \bigl(
       \texttt{[1,2]}
   \bigr)
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\
&= \bigl(
       \texttt{[1,2]}
   + \texttt{[3]} 
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\
&= \bigl(
   \texttt{[1,2,3]}
   + \texttt{quicksort([6,5,4])}
   \bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
   \texttt{quicksort([5,4])}   
   + \texttt{[6]}
   + \texttt{quicksort([]}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \texttt{quicksort([4])}
       + \texttt{[5]}
       + \texttt{quicksort([])}
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \bigl(\texttt{[4]}\bigr)
       + \texttt{[5]}
       + \texttt{quicksort([])}
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \texttt{[4]}
       + \texttt{[5]}
       + \texttt{quicksort([])}
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl( 
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \texttt{[4,5]}
       + \texttt{quicksort([])}
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \texttt{[4,5]}
       + \bigl(\texttt{[]}\bigr)
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \texttt{[4,5]}
       + \texttt{[]}
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \bigl(
       \texttt{[4,5]}
       \bigr)
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(\texttt{[1,2,3]}
   +
   \bigl( 
       \texttt{[4,5]}
   + \texttt{[6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(\texttt{[1,2,3]}
   +
   \bigl( 
       \texttt{[4,5,6]}
   + \texttt{quicksort([])}   
   \bigr)\bigr)
\\   
&= \bigl(\texttt{[1,2,3]}
   +
   \bigl( 
       \texttt{[4,5,6]}
   + \bigl( \texttt{[]} \bigr)   
   \bigr)\bigr)
\\
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \texttt{[4,5,6]}
   + \texttt{[]}   
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
   \bigl( 
       \texttt{[4,5,6]}
   \bigr)\bigr)
\\   
&= \bigl(
   \texttt{[1,2,3]}
   +
       \texttt{[4,5,6]}
   \bigr)
\\   
&= \bigl(
   \texttt{[1,2,3,4,5,6]}
   \bigr)
\\   
&= \texttt{[1,2,3,4,5,6]}
\end{align*}
Study the above \textit{very carefully}, one line at a time.
Once you're done, take a pencil and match the first and last computation
of a function call.
For instance note that the second line of the above matches the second last line because these represent the first computation of the first function call
and the last computation of the first function call:
\begin{align*}
&\texttt{quicksort([3,2,6,5,1,4])} 
\\
&= \bigl( 
   \texttt{quicksort([2,1])} + 
                \texttt{[3]} +
                \texttt{quicksort([6,5,4])} 
   \bigr) 
   & & \text{(function call 1)}
\\
&=  ...
\\   
&= \bigl(
   \texttt{[1,2,3,4,5,6])} 
   \bigr)
   & & \text{(function call 1)}
\\   
&= \texttt{[1,2,3,4,5,6]}
\end{align*}


\newpage
\begin{ex}
  The following array
  \[
  10, 4, 21, 43, 30, 64, 98, 70
  \]
  is obtained after one partition of quicksort.
  Which value(s) is chosen to be the pivot?

  [Answer is on the next page. Don't peek before trying the problem!]
\end{ex}

\newpage

\SOLUTION.
If $x$ is the array and the pivot is $p = x[i]$, then
$x[0..i-1]$ must have values $\leq p$ and
$x[i+1..7]$ must have values $> p$.

There are two possible pivots:
$21$ and $64$.

\newpage
\begin{ex}
Using the same functional notation as above, trace and compute
\texttt{quicksort([1,5,4])} choosing the first value of an array as pivot.
\qed
\end{ex}

\newpage
\begin{ex}
Using the same functional notation as above, trace and compute
\texttt{quicksort([1,3,5,2,4])} choosing the first value of an array as pivot.
\qed
\end{ex}

\newpage
\begin{ex}
Using the same functional notation as above, trace and compute
\texttt{quicksort([3,1,5,2,4])} choosing the first value of an array as pivot.
\qed
\end{ex}

\newpage
\begin{ex}
Using the same functional notation as above, trace and compute
\texttt{quicksort([1,2,3,4,5])} choosing the first value of an array as pivot.
\qed
\end{ex}

\newpage
\begin{ex}
Using the same functional notation as above, trace and compute
\texttt{quicksort([3,2,1,4,5,6]} choosing the first value of an array as pivot
\qed.
\end{ex}

\newpage
\subsection{Choosing the pivot}

The pivot need not be the first value.
You can pick the value in the middle of the array for instance.

In fact, in general
it's best to choose a random value in the array to be the pivot.
If the pivot is randomly chosen, then this version
is called \defterm{randomized quicksort}.
To distinguish between the two, I'll call the first version
\defterm{basic quicksort}, i.e., this is one
where you choose the first value as the pivot.

Another way to select the pivot is to look at the first and last value in the
array and also the one in the middle.
With these three values, you pick the median.
For instance say you're looking at this array:
\[
\text{3,1,5,2,8,5,1,2,0,1}
\]
The first is 3, the last is 1, the one in the middle is 8.
From 3, 1, 8, you see that the median is 3.
So the pivot using this method is 3.
This is called the median-of-three method for selecting a pivot.
Also, when you use the median-of-three, you usually also sort these three
values in the array.
In other words besides picking 3 for the pivot,
you also put 3,1,8 back into the array like this:
\[
\text{\underline{1},1,5,2,\underline{3},5,1,2,0,\underline{8}}
\]

Here's another way to pick the pivot:
You randomly pick three values in the array and perform median-of-three
on those three values.

The median of three is known to have produce fewer comparisons:
on the average: $1.118 n \log_2 n$.
The benefit is that this method does not require generating random
index value.

There are other variations of
median of three.




\newpage
\begin{ex}
Using the same functional notation as above, trace and compute
\texttt{quicksort([1,3,5,2,4])} using randomized quicksort.
Assume that your are using \verb!rand() % k!
where \verb!k! is the size of the array you are partitioning.
Also, assume that calling \verb!rand()! 10 times will give you the following
sequence of values:
\[
\text{\texttt{10, 21, 3, 74, 24, 5, 7, 23, 19, 101}}
\]
\qed
\end{ex}


\newpage
\subsection{Complete trace of an example showing function call frame}

In an earlier section, I trace the execute of the 
quicksort algorithm using functional notation.
Now let me add a little more details by tracing the 
actual pseudocode by listing the value of the variables in the 
quicksort pseudocode and also trace the 
function call, including a function call waiting for 
the return of a function call.

Let me execute the basic 
quicksort, choosing the first element as the pivot.
Here's the array to sort:
\begin{console}
x = [3,1,6,5,2,4]
\end{console}
Make sure you read the complete trace very carefully.
Once you're done studying it, copy the above array on a sheet of paper,
close your notes, redo the trace yourself and compare your trace with mine.
If it's not the same as mine, do it again.

For now, I'll use this pseudocode:
\begin{console}
FUNCTION quicksort(x):
    if length of x is 0 or 1: return x
    pivot = x[0]
    left = array of values from x which are <= pivot
    right = array of values from x which are > pivot
    newleft = quicksort(left)
    newright = quicksort(right)
    return newleft + [pivot] + newright
\end{console}
Note that for this example,
I'm choosing the first value in the array as the pivot.
Let's test this pseudocode and see if it works.
Here we go ...


\begin{console}
FUNCTION CALL (1): quicksort([3,1,6,5,2,4]):
pivot = 3
left = [1,2]
right = [6,5,4]
newleft = quicksort([1,2]) ... WAIT FOR FUNCTION CALL (2)
newright = quicksort(right)
result = newleft + [pivot] + newright
return result
\end{console}
\begin{console}
FUNCTION CALL (2): quicksort([1,2]):
pivot = 1
left = []
right = [2]
newleft = quicksort([]) ... WAIT FOR FUNCTION CALL (3)
newright = quicksort(right)
result = newleft + [pivot] + newright
return result to FUNCTION CALL (1)
\end{console}
\begin{console}
FUNCTION CALL (3): quicksort([]):
return [] to FUNCTION CALL (2)
\end{console}
\begin{console}
FUNCTION CALL (2): quicksort([1,2]):
pivot = 1
left = []
right = [2]
newleft = []
newright = quicksort([2]) ... WAIT FOR FUNCTION CALL (4)
result = newleft + [pivot] + newright
return result to FUNCTION CALL (1)
\end{console}
\begin{console}
FUNCTION CALL (4): quicksort([2]):
return [2] to FUNCTION CALL (2)
\end{console}
\begin{console}
FUNCTION CALL (2): quicksort([1,2]):
pivot = 1
left = []
right = [2]
newleft = []
newright = [2]
result = [] + [1] + [2] = [1,2]
return [1,2] to FUNCTION CALL (1)
\end{console}
\begin{console}
FUNCTION CALL (1): quicksort([3,1,6,5,2,4]):
pivot = 3
left = [1,2]
right = [6,5,4]
newleft = [1,2]
newright = quicksort(right) ... WAIT FOR FUNCTION CALL (5)
result = newleft + [pivot] + newright
return result
\end{console}
\begin{console}
FUNCTION CALL (5): quicksort([6,5,4]):
pivot = 6
left = [5,4]
right = []
left = quicksort([5,4]) ... WAIT FOR (6)
right = quicksort(right)
result = newleft + [pivot] + newright
return result to FUNCTION CALL (1)
\end{console}
\begin{console}
FUNCTION CALL (6): quicksort([5,4]):
pivot = 5
left = [4]
right = []
newleft = quicksort(left) ... WAIT FOR FUNCTION CALL (7)
newright = quicksort(right)
result = newleft + [pivot] + newright
return result to FUNCTION CALL (5)
\end{console}
\begin{console}
FUNCTION CALL (7): quicksort([4]):
return [4] to FUNCTION CALL (6)
\end{console}
\begin{console}
FUNCTION CALL (6): quicksort([5,4]):
pivot = 5
left = [4]
right = []
newleft = [4]
newright = quicksort([]) ... WAIT FOR FUNCTION CALL (8)
result = newleft + [pivot] + newright
return result to FUNCTION CALL CALL (5)
\end{console}
\begin{console}
FUNCTION CALL (8): quicksort([]):
return [] to FUNCTION CALL (6)
\end{console}
\begin{console}
FUNCTION CALL (6): quicksort([5,4]):
pivot = 5
left = [4]
right = []
newleft = [4]
newright = []
result = [4] + [5] + [] = [4,5]
return [4,5] to FUNCTION CALL (5)
\end{console}
\begin{console}
FUNCTION CALL (5): quicksort([6,5,4]):
pivot = 6
left = [5,4]
right = []
newleft = [4,5]
newright = quicksort(right) ... WAIT FOR (9)
result = newleft + [pivot] + newright
return result to FUNCTION CALL (1)
\end{console}
\begin{console}
FUNCTION CALL (9): quicksort([]):
return [] to FUNCTION CALL (5)
\end{console}
\begin{console}
FUNCTION CALL (5): quicksort([6,5,4]):
pivot = 6
left = [5,4]
right = []
newleft = [4,5]
newright = []
result = [4,5] + [6] + [] = [4,5,6]
return [4,5,6] to FUNCTION CALL (1)
\end{console}
\begin{console}
FUNCTION CALL (1): quicksort([3,1,6,5,2,4]):
pivot = 3
left = [1,2]
right = [6,5,4]
newleft = [1,2]
newright = [4,5,6]
result = [1,2] + [3] + [4,5,6] = [1,2,3,4,5,6]
return [1,2,3,4,5,6]
\end{console}


TADA! And I'm done!

Make sure you understand the above trace and then
produce the trace yourself.
(If you can't follow the above, then here's 
one suggestion. 
You might want to write all the above on index cards, 
go through the trace by laying out the cards on a 
huge sheet of paper.
When you make a function call,
lay down a new card and 
draw a line between from the old card to the new card.
When you return, lay a new card on top of the function 
that you're returning to.)

In the next section, I'm going to figure out a way to do quicksort
without creating new arrays all the time.


\newpage
\begin{ex}
Perform the above basic quicksort on \verb![4,2,1,5,3]!
always using the first value in an array as pivot.
\qed
\end{ex}


\newpage
\begin{ex}
Perform the above basic quicksort on \verb![1,2,3,4,5]!.
always using the first value in an array as pivot.
\qed
\end{ex}


\newpage
\begin{ex}
Perform the above basic quicksort on \verb![5,4,3,2,1]!.
always using the first value in an array as pivot.
\qed
\end{ex}


\newpage
\begin{ex}
Perform the above basic quicksort on \verb![3,1,4,5,2,6,7]!.
always using the first value in an array as pivot.
\mbox{}\qed
\end{ex}

\newpage
\begin{ex}
Perform the above basic quicksort on \verb![3,1,4,5,2,6,7]! but
now choosing the {\it last} value of an array as pivot.
\qed
\end{ex}


\newpage
\begin{ex}
Implement the above version of the basic quicksort.
You can use \verb!std::vector!.
(Note: As I mentioned earlier, this is not the real version of quicksort yet.)
\qed 
\end{ex}

\begin{console}[commandchars=\~\!\@]
template< typename T >
std::vector< T > quicksort(const std::vector< T > & x)
{
    // Base case
    if (x.size() <= 1) return x;

    // Recursive case
    T pivot = x[0];
    std::vector< T > left, right;
 
    // Form left and right
    for (unsigned int i = 1; i < x.size(); i++)
    {
        if (x[i] <= pivot)
        {
            left.push_back(x[i]);
        }
        else
        {
            right.push_back(x[i]);
        }
    }

    left = quicksort(left);
    right = quicksort(right);
    
    // Add pivot to left and concatenate right to left
    left.push_back(pivot);
    for (unsigned int i = 0; i < right.size(); i++)
    {
        left.push_back(right[i]);
    }
    
    return left;
}
\end{console}
