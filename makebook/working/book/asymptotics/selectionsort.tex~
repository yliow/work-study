\section{Selection Sort}

Selection sort is easy.
Let's say I'm given an array \verb!x!

\begin{python}
from latextool_basic import *
p = Plot()
p += Array2d(0,0,xs=[[9,5,7,2,8]], width=0.7, height=0.7)
print p
\end{python}

of size \verb!n = 5! and I want to sort this in 
ascending order using the selection sort algorithm.

\textsc{Pass 1.}
You scan 
\verb!x[0]!,...,\verb!x[n - 1]!
for the smallest value and swap that with 
\verb!x[0]!.
In the above example, the smallest value is \verb!2!
which is at index position \verb!3!.
You swap that with the value at index 0 

\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[9,5,7,2,8]], width=0.7, height=0.7)
p += a
p0 = list(a[0][0].top())
p1 = list(a[0][3].top())
p2 = list(p0[:]); p2[1] += 0.5
p3 = list(p1[:]); p3[1] += 0.5
p += Line(points=[p0, p2, p3, p1], startstyle='->', endstyle='->')
print p
\end{python}

and get this:

\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[2,5,7,9,8]], width=0.7, height=0.7)
p += a
print p
\end{python}

Of course this means that \verb!2! has found its right place.
I just repeat the above process on 
\verb!x[1]!, ..., \verb!x[n - 1]!
(and not touch \verb!x[0]! anymore).
To make it easier to read the computational state of the array,
I'm going to insert a \verb!|! to separate the 
\verb!2! from the rest.
So I'm here right now:

\begin{python}
from latextool_basic import *
p = Plot()
p += chunkedarray(0,0,arr=[[2],[5,7,9,8]], cellwidth=0.7, cellheight=0.7)
print p
\end{python}

The values to the left of $|$ is sorted while the values to the
right of $|$ are values to be processed.
This is the end of pass 1.

\textsc{Pass 2.}
The smallest among \verb!x[1]!, ..., \verb!x[n - 1]! is at index 1.
In this case \verb!5! is at the right place, so there's
nothing to do.
I'm now at this state:

\begin{python}
from latextool_basic import *
p = Plot()
p += chunkedarray(0,0,arr=[[2, 5],[7,9,8]], cellwidth=0.7, cellheight=0.7)
print p
\end{python}

\textsc{Pass 3.}
In the next pass, \verb!7! is also in its right place.
So here's the result at the end of this pass:

\begin{python}
from latextool_basic import *
p = Plot()
p += chunkedarray(0,0,arr=[[2,5,7],[9,8]], cellwidth=0.7, cellheight=0.7)
print p
\end{python}

\textsc{Pass 4.}
After that, the smallest is \verb!8! which I will swap with 
\verb!9! 

\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[2,5,7,9,8]], width=0.7, height=0.7)
p += a
p0 = a[0][3].top()
p1 = a[0][4].top()
p2 = list(p0[:]); p2[1] += 0.5
p3 = list(p1[:]); p3[1] += 0.5
p += Line(points=[p0, p2, p3, p1], startstyle='->', endstyle='->')
print p
\end{python}

to get this:

\begin{python}
from latextool_basic import *
p = Plot()
p += chunkedarray(0,0,arr=[[2,5,7,8],[9]], cellwidth=0.7, cellheight=0.7)
print p
\end{python}


And I'm done!!!
There's obviously nothing to do for \verb!9! since all the smaller
values have found their place, \verb!9! must be largest.
So I now have the sorted array:

\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[2,5,7,8,9]], width=0.7, height=0.7)
p += a
print p
\end{python}


Here's algorithm:
\begin{console}
selectionsort(x, n):
    for i = 0, 1, 2, ..., n - 2:
        minvalue = x[i]
        minindex = i
        for j = i + 1, ..., n - 1:
            if x[j] < minvalue:
                minvalue = x[j]
                minindex = j
        if minindex is not i:
            swap x[i] and x[minindex]
\end{console}

You can factor out the part of the algorithm that computes the 
minimum index:
\begin{console}
find_minindex(x, i, n):
    minvalue = x[i]
    minindex = i
    for j = i + 1, ..., n - 1:
        if x[j] < minvalue:
            minvalue = x[j]
            minindex = j
    return minindex

selectionsort(x, n):
    for i = 0, 1, 2, ..., n - 2:
        minindex = find_minindex(x, i, n)
        if minindex is not i:
            swap x[i] and x[minindex]
\end{console}

\newpage
\begin{ex}
\begin{tightlist}
\item Execute the selection sort algorithm on the following array of values

\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[4,5,2,7,2]], width=0.7, height=0.7)
p += a
print p
\end{python}

writing down the array at the end of each pass.
\item How many passes are there?
\end{tightlist}
\end{ex}

\SOLUTION

1. 
\begin{python}
from latextool_basic import *

p = Plot()

def xxx(p, y, xs, step):
    a = Array2d(0, y, xs=[xs], width=0.7, height=0.7)
    p += a
    x, y = a[0][0].left()
    p += Rect2(x-2, y, x-2, y, 
               linewidth=0, label=r'\text{\textsc{End of Pass %s}}' % step)

xxx(p,  0, [2,5,4,7,2], 1)
xxx(p, -1, [2,2,4,7,5], 2)
xxx(p, -2, [2,2,4,7,5], 3)
xxx(p, -3, [2,2,4,5,7], 4)
print p
\end{python}

2. There are 4 passes.

\qed

\newpage
\begin{ex}
\begin{tightlist}
\item Execute the selection sort algorithm on the following array of values
\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[5,3,-1,4,5,2,7,2,8,5]], width=0.7, height=0.7)
p += a
print p
\end{python}
writing down the array at the end of each pass.
\item How many passes are there?
\end{tightlist}
\qed
\end{ex}



\newpage
\begin{ex}
\begin{tightlist}
\item Describe arrays that will give the best runtime.
\item Test it by creating a suitable array of size 5 and executing 
the selection sort algorithm on this array.
Count of the total number of swaps.
(The part of the algorithm that computes the minimum is the same
for all arrays of size 5.)
\item What about the best runtime for an array of size $n$?
How many swaps are there?
\end{tightlist}
\qed
\end{ex}

\newpage
\begin{ex}
\begin{tightlist}
\item Describe arrays that will give the worse runtime.
\item Test it by creating a suitable array of size 5 and executing 
the selection sort algorithm on this array.
Count of the total number of swaps.
(The part of the algorithm that computes the minimum is the same
for all arrays of size 5.)
\item What about the worse runtime for an array of size $n$?
How many swaps are there?
\end{tightlist}
\qed
\end{ex}

\newpage
\begin{ex}
\begin{tightlist}
\item Is the selection sort a stable sorting algorithm?
\item Here's our selection sort algorithm again:
\begin{console}
for i = 0, 1, 2, ..., n - 2:
    minvalue = x[i]
    minindex = i
    for j = i + 1, ..., n - 1:
        if x[j] < minvalue:
            minvalue = x[j]
            minindex = j
    if minindex is not i:
        swap x[i] and x[minindex]
\end{console}
What if I change it to this:
\begin{console}
for i = 0, 1, 2, ..., n - 2:
    minvalue = x[i]
    minindex = i
    for j = i + 1, ..., n - 1:
        if x[j] <= minvalue:
            minvalue = x[j]
            minindex = j
    if minindex is not i:
        swap x[i] and x[minindex]
\end{console}
Is there any difference between this version and the original?
\end{tightlist}
\end{ex}

\newpage
\begin{ex}
Compute the best and worse runtimes of the selection sort.
\qed
\end{ex}


\newpage
\begin{ex}
\begin{tightlist}
\item Modify the selection sort algorithm above so as to sort 
an array in descending order.
\item Execute the descending selection sort algorithm on this array

\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[5,3,-1,4,5,2,7,2,8,5]], width=0.7, height=0.7)
p += a
print p
\end{python}
\end{tightlist}
\qed
\end{ex}


\newpage
\begin{ex}
\begin{tightlist}
\item The (ascending) selection sort above find the smallest value in 
the subarray \verb!x[i]!, ..., \verb!x[n - 1]! and puts it 
at \verb!x[i]!.
Modify the algorithm so that it finds the maximum in a suitable subarray
and puts it in the right place.
\item 
Test your algorithm with this array:
\begin{python}
from latextool_basic import *
p = Plot()
a = Array2d(0,0,xs=[[5,3,-1,4,5,2,7,2,8,5]], width=0.7, height=0.7)
p += a
print p
\end{python}
\end{tightlist}
\qed
\end{ex}

\newpage
\begin{ex}
Modify the selection sort so that in each
pass, you find the minimum {\it and} maximum in a suitable subarray
and puts them in their right places.
Implement your algorithm, test it, and compute the 
runtimes.
\qed
\end{ex}

\newpage
\begin{ex}
Be careful with this one ... 

Notice that using the same idea in the selection sort,
instead of finding a minimum
value to put at the right place, perhaps we can 
try to find a {\it chunk} of minimum 
{\it values} to insert at the right place.

For instance suppose you start off with this array:
\begin{python}
from latextool_basic import *
xs = [4,5,9,7,8,9,0,1,2,3,8,6,7,5]
p = Plot()
c = RectContainer(x=0, y=0)
for x in xs:
    if x in []:
        background = 'black!10!white'
        label = r'{\texttt{\textbf{%s}}}' % x
    else:
        background = 'white'
        label = r'{\texttt{%s}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
p += c
print p
\end{python}
your algorithm should identify this chunk:
\begin{python}
from latextool_basic import *
xs = [4,5,9,7,8,9,0,1,2,3,8,6,7,5]
p = Plot()
c = RectContainer(x=0, y=0)
for x in xs:
    if x in [0,1,2,3]:
        background = 'black!10!white'
        label = r'{\texttt{\textbf{%s}}}' % x
    else:
        background = 'white'
        label = r'{\texttt{%s}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
p += c
print p
\end{python}
so that when these two chunks were swapped:
\begin{python}
from latextool_basic import *
p = Plot()
c = RectContainer(x=0, y=0)
for x in [4,5,9,7]:
    background = 'black!10!white'
    label = r'{\texttt{\textbf{%s}}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
for x in [8,9]:
    background = ''
    label = r'{\texttt{%s}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
for x in [0,1,2,3]:
    background = 'black!10!white'
    label = r'{\texttt{\textbf{%s}}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
for x in [8,6,7,5]:
    background = ''
    label = r'{\texttt{%s}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)

p0 = list(c[1].topright()); p0[1] += 0.2
p1 = list(c[7].topright()); p1[1] += 0.2
p2 = p0[:]; p2[1] += 0.5
p3 = p1[:]; p3[1] += 0.5
p += Line(points=[p0,p2,p3,p1], startstyle='->', endstyle='->')
p += c
print p
\end{python}
you get this:
\begin{python}
from latextool_basic import *
p = Plot()
c = RectContainer(x=0, y=0)
for x in [0,1,2,3]:
    background = 'black!10!white'
    label = r'{\texttt{\textbf{%s}}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
for x in [8,9]:
    background = ''
    label = r'{\texttt{%s}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
for x in [4,5,9,7]:
    background = 'black!10!white'
    label = r'{\texttt{\textbf{%s}}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)
for x in [8,6,7,5]:
    background = ''
    label = r'{\texttt{%s}}' % x
    c += Rect2(x0=0, y0=0, x1=0.7, y1=0.7, label=label,
               background=background)

p += c
print p
\end{python}

Design such an algorithm.
Test your algorithm!
Implement your algorithm and test your implementation thoroughly.
\qed
\end{ex}

\newpage
\begin{ex}
\begin{tightlist}
\item Write a recursive version of the selection sort algorithm.
\item Implement your recursive selection sort algorithm.
\item Test your implementation!
\end{tightlist}

{\small
\begin{console}
find_minindex_helper(x, i, n, minvalue, minindex):
    if i >= n:
        return minindex
    else:
        if x[i] < minvalue:
            return find_minindex_helper(x, i + 1, n, x[i], i)
        else:
            return find_minindex_helper(x, i + 1, n, minvalue, 
                                        minindex)

find_minindex(x, i, n):
    return find_minindex_helper(x, i + 1, n, x[i], i)

selectionsort_helper(x, i, n):
    if i >= n - 2:
        return
    else:
        minindex = find_minindex(x, i, n)
        if minindex is not i:
            swap x[i] and x[minindex]
        selectionsort_helper(x, i + 1, n)
    
selectionsort(x, n):
    selectionsort_helper(x, 0, n)
\end{console}
}

\qed
\end{ex}
