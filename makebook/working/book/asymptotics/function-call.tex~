\section{Function Call}

The runtime analysis for function call is similar when it comes to
computing the runtime of the body of the function.
The only other thing you need to be careful about the cost of
parameter passing and the cost of function return.

Suppose you have a function that takes an array and returns the first value:
\begin{console}
int f(int x[])
{
    return x[0];
}
\end{console}
You would say right away that 
\begin{console}
    return x[0];
\end{console}
take constant time and the code is $O(1)$.
The answer is correct but the reasoning is faulty!
Because you need time to create \verb!x! and get a value for \verb!x!.
But that's OK since the time taken to create \verb!x! and to receive
an argument for \verb!x! is constant.
Now what if I do this:
\begin{console}
int f(const std::vector & x)
{
    return x[0];
}
\end{console}
That is also $O(1)$.
Now come the trick question ... what about this:
\begin{console}
int f(const std::vector x)
{
    return x[0];
}
\end{console}

[TODO]
