\section{Timing}

Although we want to be mathematical and scientific and
compute algorithmic
performance abstractly, sometimes it's still a good idea to
get our hands dirty and measure performance based on real time.
Also, the runtime of some algorithms are actually very compute
mathematically.
For such cases, measure runtime experimentally is helpful.

Let me show you two ways of measure times.
The second method is more accurate.


\subsection{First method}

Here's a program that prints the time, sleep for 1 second, prints the time
again:
\begin{console}
#include <ctime>
#include <iostream> 

int main()
{
    std::cout << time(NULL) << std::endl;
    sleep(1);
    std::cout << time(NULL) << std::endl;

    return 0;
}
\end{console}
If you want to store the return value of \verb!time!, you can use
the time type \verb!time_t!:
{\small
\begin{console}
#include <ctime>
#include <iostream>

int main()
{
    time_t start = time(NULL);
    sleep(1);
    time_t end = time(NULL);
    double diff = difftime(end, start);
    std::cout << start << ' ' << end << ' ' 
              << diff
              << std::endl;

    return 0;
}
\end{console}
}

If the time to execute a section of code is too short, you can 
of course execute the code 1000 times.
You can then divide by 1000 to get the time.
In fact such an averaging will probably give you a more accurate
approximation.

It's also a good idea to make your test environment as similar as possible.
So if you test program A while watching a DVD and then test 
program B overnight while
you're asleep ... it wouldn't be fair to say that program A is a terribly
inefficient program, right???

[ASIDE: 
Note that the \verb!time! function returns the real time.
Even if you try real hard not to watch a movie on your laptop
(and a million other things), 
it would still be difficult to measure the time
taken for your program to run because
there are many other processes running in your machine.
Unless if you're using a really really really old machine!
This means that the time difference reported might include time spent doing
something else.
If you like, you can google for Unix/Linux support for querying 
user time, system CPU time, etc. for a process.]
\qed

\subsection{Second method}

The second method is lot more accurate and does not depend on
what else your computer is doing.
In other words, it actually measures CPU usage.
(Unfortunately this method is platform dependent and works only on
unix/linux systems.)
Try this program ...

{\small
\begin{Verbatim}[frame=single]
#include <iostream>
#include <sys/time.h>
#include <sys/resource.h>


int main()
{    
    rusage start, end;
    
    getrusage(RUSAGE_SELF, &start);

    for (unsigned long int i = 0; i < 1000000000; i++)
    {
        double t = 3.14;
        t * t * t;
    }

    getrusage(RUSAGE_SELF, &end);

    double end = end.ru_utime.tv_sec
                 + end.ru_utime.tv_usec * 1e-6;
    double start = start.ru_utime.tv_sec
                   + start.ru_utime.tv_usec * 1e-6;
    double diff = end - start; 
    std::cout << diff << "secs \n";

    return 0;
}
\end{Verbatim}
}

\begin{ex}
Clearly it's more convenient for you to create
a class to do the above.
Call the class \texttt{Timer}.
Here's an example usage:
\begin{Verbatim}[frame=single]
#include "Timer.h"

int main()
{
    Timer timer;
    timer.start();
    
    for (unsigned long int i = 0; i < 1000000000; i++)
    {
        double t = 3.14;
        t * t * t;
    }

    timer.stop();
    double diff = timer.read();
    std::cout << diff << "secs \n";

    return 0;
}
\end{Verbatim}
\end{ex}
