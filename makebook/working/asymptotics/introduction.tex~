\section{Introduction}

Here are two functions for computing
the factorial:
\begin{console}
int fib(int n)
{
    if (n <= 1)
    {
        return 1;
    }
    else 
    {
        return fib(n - 1) + fib(n - 2);
    }
}
\end{console}
\begin{console}
int factorial(int n)
{
    int p = 1;
    for (int i = 1; i <= n; i++)
    {
        p *= i;
    }
    return p;
}
\end{console}

\begin{ex}
Use the above functions and compute
\verb!fib(n)! and
\verb!factorial(n)! and
for \verb!n! = 0, 1, 2, 3, 4, 5, 6.
\qed
\end{ex}

Here's the big questions:
which of the above two is faster?

Yes, you can run the two functions and time it with your watch.
You want to test the above for several values for $n$ of course.
If the set of values is too small, you might not be able to establish a 
pattern. Of course when $n$ is small, the functions will probably
 finish too fast for you to tell any difference. 
So you should try large values.
But the problem is ... what is \lq\lq large''?
For a different pair of functions maybe $n$ has to be at least 10.
For another different pair, you might need $n$ to be at least 1000000.
Also, timings can change depending on what your computer is doing at the same
time.
So you should probably shutdown all other programs while you're doing
the tests.


Or ... 

You can take a course on 
data structures and algorithms and tell me right away which is better ...
yes, right away ... without running the functions.

That's one of the benefits of understanding data structures and 
algorithms.
Besides knowing how to compare performance, of course you 
will also learn different algorithms (not just to time them)
and create different data structures.
You can think of data structures as container (think of a bag)
and you are basically interested in putting things into this 
container, taking things ouf of this container, checking if the container
has a specific data, etc. 
You will learn how to build different types of containers with 
different performance characteristics.
Such containers are important in the real world.
You can think of google for instance as being a massive
container of webpages.
Google has to scan the world for webpages and put relevant data
about these webpages into the container.
More importantly, google wants to be able to tell you as fast
and as accurate as possible which are the most relevant webpages
that you might want to look at when you search for (say)
\lq\lq scifi movies 1980s''. 
