\section{Bubblesort again: Summation and big-O}

In the section on speeding up computing the runtime on the bubblesort, I show
that for the runtime for the following for-loop
\begin{Verbatim}[frame=single]
for i = 1, ..., n:
    [body(i)]
\end{Verbatim}
is
\[
T(n) = \sum_{i=1}^n \text{[Time to run body(i)]} + An + B
\]

Recall that using this idea I computed the worse case runtime of the bubblesort ...
\newpage

\begin{eg}
Compute the worse runtime of the bubblesort:
\begin{Verbatim}[frame=single]
for i = n - 2, ..., 0:
    for j = 0, ..., i:
        if a[i] > a[i + 1]:
            t = a[i]
            a[i] = a[i + 1]
            a[i + 1] = t
\end{Verbatim}
\end{eg}

{\it Solution.}
The inner most body 
\begin{Verbatim}[frame=single]
        if a[i] > a[i + 1]:
            t = a[i]
            a[i] = a[i + 1]
            a[i + 1] = t
\end{Verbatim}
has constant runtime, say $A$.
Let $U(i)$ be the runtime of the inner for-loop.
Using TRICK1, since the inner loop runs $i + 1$ times:
\[
U(i) = \sum_{j=0}^i A + B(i+1) + C = A(i+1) + B(i+1) + C = Di + E
\]
for constants $A, B, C, D, E$.
Using TRICK1 again, since the outer loops runs $n - 1$ times
the whole algorithm has a runtime of
\[
T(n) = \sum_{i=0}^{n-2} U(i) + F(n-1) + G
\]
for constants $F$ and $G$.
Therefore
\begin{align*}
T(n) 
&= \sum_{i=0}^{n-2} (Di + E) + F(n-1) + G \\
&= D \sum_{i=0}^{n-2} i + E \sum_{i=0}^{n-2} 1 + F(n-1) + G \\
&= D \frac{(n-2)(n-1)}{2}  + E(n-1) + F(n-1) + G \\
&= \left(\frac{D}{2}\right) n^2 
   + \left( 
       -\frac{3D}{2} + E + F \right)n + \left(D - E - F + G
     \right) \\
&=O (n^2)
\end{align*}
\qed

\newpage

Now I want to simplify in a different way ...

Notice that we compute the big-O at the last step.
Can we simplify big-O-wise earlier?
For instance the expression for $U(i)$ is
\[
U(i) = Di + E
\]
As a function of $i$, of course I can say
\[
U(i) = Di + E = O(i)
\]
(This is the big-O of $i$, not $n$.)
It {\it does} allow us to throw away $D$ and $E$.

But now the expression for $T(n)$ is this
\[T(n) = \sum_{i=0}^{n-2} U(i) + Fn + G
\]
How does one substitute a {\it big-O expression} into an expression???
Can we do this:
\[
T(n) =
\sum_{i=0}^{n-2} i + Fn + G
\]
i.e., replace $U(i)$ by the big-O of $U(i)$?
Of course technically speaking the above is not an equality \lq\lq =''
anymore.
Since it involves saying \lq\lq $T(n)$ looks like this
with big-O fudging'', it's more accurate to say this: 
\[
T(n) =
O\left( \sum_{i=0}^{n-2} i + Fn + G \right)
\]
i.e., is the following true:
\[
\sum_{i = 0}^{n - 2} (Di + E) + Fn + G
= 
O\left( \sum_{i=0}^{n-2} i + Fn + G \right)
\]
Or more generally we ask if the following is true:

In the computation of the 
big-O of a sum, I replace the terms of the sum by
their big-O's? In other words, is the following true:
\[
f(i) = O(g(i)) \implies
\sum_{i=1}^n f(i) 
= 
O
\left(
\sum_{i=1}^n g(i)
\right)
\hspace{0.5cm} ???
\] 


\begin{thm}
If 
\[
f(i) = O(g(i))
\]
then
\[
\sum_{i=1}^n f(i) 
= 
O
\left(
\sum_{i=1}^n |g(i)|
\right)
\] 
\end{thm}

{\it Proof.}
Since $f(i) = O(g(i))$, there exists $C$ and $N$
such that for $i \geq N$,
\[
|f(i)| \leq C |g(i)|
\]
Summing up, we have
\[
\sum_{i=N}^n |f(i)| \leq C \sum_{i=N}^n |g(i)|
\]
Let $D = \sum_{i=1}^{N-1} f(i)$.
Then
\[
\sum_{i=1}^n |f(i)| 
= D + \sum_{i=N}^n |f(i)| 
\leq D + C \sum_{i=N}^n |g(i)|
\leq D + C \sum_{i=1}^n |g(i)|
\]

If $\sum_{i=1}^n |g(i)|$ is a bounded function of $n$,
this function must be $O(1)$.
From the above inequality,
$\sum_{i=1}^n |f(i)|$
must also be $O(1)$.
Hence $\sum_{i=1}^n f(i)$ must be big-O of $O(1)$
as well and the result is proved.

If $\sum_{i=1}^n |g(i)|$ is an unbounded function of $n$,
then there is some $M$ such that for $n \geq M$,
\[
\sum_{i=1}^n |g(n)| \geq D
\]
Hence for $n \geq \max(N, D)$, we have
\[
\sum_{i=1}^n |f(i)| 
\leq D + C \sum_{i=1}^n |g(i)|
\leq (1 + C) \sum_{i=1}^n |g(i)|
\]
Hence 
\[
\left| \sum_{i=1}^n f(i) \right| 
\leq \sum_{i=1}^n |f(i)| 
\leq (1 + C) \sum_{i=1}^n |g(i)|
\]
Therefore 
\[
\sum_{i=1}^n f(i)
=
O \left( \sum_{i=1}^n |g(i)| \right)
\]
\qed

\begin{eg}
For instance if 
\[
f(i) = 5i + 10 = O(i)
\]
then
\[
\sum_{i=1}^n f(i) = 
O
\left(
\sum_{i=1}^n i
\right)
\]
\end{eg}

\begin{eg}
Let 
\[
f(i) = 10i + 42\sin i = O(i)
\]
then
\[
\sum_{i=1}^n f(i) = 
O
\left(
\sum_{i=1}^n i
\right)
\]
\end{eg}


I'm going to call the above TRICK2.

Now let's use the trick to replace big-O in the summation in
the bubblesort ...

\newpage

\begin{eg}
Compute the worse runtime of the bubblesort:
\begin{Verbatim}[frame=single]
for i = n - 2, ..., 0:
    for j = 0, ..., i:
        if a[i] > a[i + 1]:
            t = a[i]
            a[i] = a[i + 1]
            a[i + 1] = t
\end{Verbatim}
\end{eg}

{\it Solution.}
The inner most body 
\begin{Verbatim}[frame=single]
        if a[i] > a[i + 1]:
            t = a[i]
            a[i] = a[i + 1]
            a[i + 1] = t
\end{Verbatim}
has constant runtime, say $A = O(1)$.
Let $U(i)$ be the runtime of the inner loop.
We have
\begin{align*}
U(i) 
&= \sum_{j=0}^i A + B(i+1) + C & & \text{by TRICK1} \\ 
&= O \left( \sum_{j=0}^i 1 + B(i+1) + C \right) & & \text{by TRICK2}\\
&= O \left( (i + 1) + B(i + 1) + C \right) \\
&= O \left( (1+B)i + (1 + B + C) \right) \\
&= O \left( i \right)
\end{align*}
for constants $B, C$.
The total runtime, $T(n)$, is:
\begin{align*}
T(n) 
&= \sum_{i=0}^{n-2} U(i) + Fn + G & & \text{by TRICK1} \\
&= O \left( 
       \sum_{i=0}^{n-2} i + Fn + G 
     \right) & & \text{by TRICK2} \\
&= O \left(
       \frac{(n-2)(n-1)}{2} + Fn + G 
     \right) \\
&= O \left( 
       \frac{1}{2} n^2 - \frac{3}{2}n + 1  + Fn + G 
     \right) \\
&= O(n^2)
\end{align*}
\qed

\newpage



Note that in the computation of the big-O of $T(n)$ for the worse
case of the bubblesort, 
you have to compute the big-O of a sum:
\[
\sum_{i=0}^{n-2} i
\]

I have three more tricks to show you.
 
First of all I want to show you that 
you can frequently change the lower and upper limits 
of your sum by a constant amount without affecting
the big-O, i.e.,
\[
\sum_{i = 0}^n i^2 =
O
\left(
\sum_{i = 1}^n i^2
\right)
\]
and
\[
\sum_{i = 0}^{n-1} i^2 =
O
\left(
\sum_{i = 1}^n i^2
\right)
\]

The second technique is that, since we're going to replace the 
term of our sum by their big-O, 
for instance
\[
\sum_{i=1}^n (5i^2 + 7i + 10)
= 
O
\left(
\sum_{i=1}^n i^2
\right)
\]
This means that if we want to compute big-O of for-loops
quickly, we had better be able to compute the big-O of sums like
\[
\sum_{i = 1}^n i^3
\]
or even
\[
\sum_{i = 1}^n i^k
\]
(for a constant $k$) 
or
\[
\sum_{i = 1}^n i^2 \ln^3 i
\]
or in general the sums of standard functions used in describing
big-O classes.
Such a table of formulas of summations will allow us to compute
runtimes quickly just like a table of
differentiation rules of standard functions will allow you to 
compute the derivatives of general expressions quickly.
I will deal with the big-O of sums of the form $\sum_{i=1}^n i^k$
in the next section since this is the one that I will need for the
bubblesort.

The last thing is that I will show you that the loop control time
in the runtime of the for-loop is actually redundant.

