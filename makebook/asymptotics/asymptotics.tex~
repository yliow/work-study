\chapter{Asymptotics}

\newpage\myinput{asymptotics/what-is-asymptotic-analysis.tex}
\newpage\myinput{asymptotics/algorithm-analysis-how-fast-is-an-algorithm.tex}
\newpage\myinput{asymptotics/definition-of-big-O.tex}
\newpage\myinput{asymptotics/roots-of-asymptotics.tex}
\newpage\myinput{asymptotics/formal-definition-of-big-O.tex}
\newpage\myinput{asymptotics/n-plus-c-equal-big-O-of-n-n-geq-0.tex}
\newpage\myinput{asymptotics/commercial-break-review-of-inequalities.tex}
\newpage\myinput{asymptotics/n-plus-c-equal-big-O-of-n-n-geq-0-continued.tex}
\newpage\myinput{asymptotics/big-O-n-plus-c-c-negative.tex}
\newpage\myinput{asymptotics/a-plus-bn-equal-big-O-of-n.tex}
\newpage\myinput{asymptotics/an-plus-b-neq-big-O-of-1-for-a-neq-0.tex}

\newpage
 
\section{Thinking of big-O as a pseudo-inequality}
You can and {\it should} think of saying $f(n) = O(g(n))$ as 
almost like saying
\[
f(n) \leq g(n)
\]
except that it is true for {\it large} values of $n$ and also that 
$g(n)$ is allowed to \lq\lq magnify'' itself to become 
$C \cdot g(n)$.

In fact instead of saying 
\lq\lq $f = O(g)$'', you can also say that
\lq\lq $f$ is \defterm{asymptotically bounded above} by $g$''.

To emphasize this analogy with \lq\lq $\leq$'', 
I sometimes write
\[
f \leq_O g
\]
instead of \lq\lq $f = O(g)$''.

From the fact that 
\[
an + b = O(n)
\]
where $a,b$ are real numbers 
(see earlier exercise), including the case of
\[
c = O(n)
\]
(see earlier exercise) 
all polynomials of degree 0 and degree 1 are 
bounded above asymptotically by 
the polynomial function $g(n) = n$

Also, we have
\[
c = O(1)
\]
(see earlier exercise).
Therefore all constant functions are asymptotically bounded above 
by the constant function $g(n) = 1$.

Note that for algorithmic analysis, the functions measure the time
or space required to carry out an algorithm, therefore the
functions are positive. So the absolute value sign is actually
redundant for us.


Another thing to note is that the domain of our functions are
almost always $\N$. Such functions are called \defterm{arithmetic
functions}. The name come from Number Theory. In this context, the
independent variable is usually written as $n$ instead of $x$.

Note that the following expression
\[
 O(g) = f
\]
does {\it not} make sense.

Actually there is something I did fudge (but I don't feel bad
because this is done by everyone). In general you want to analyze
functions when the value of the independent variable approaches a
value. For instance when I say
\[
 3n^3 + 4 = O(n^3)
\]
I should really say
\[
 3n^3 + 4 = O(n^3) \text{ as } n \rightarrow \infty
\]
For us because we're analyzing algorithms we are only interested
in the growth of functions as $n$ approaches infinity so I will
omit the condition to simplify notation. With the condition, we
can even say things like
\[
 3x^2 + 4x = O(x) \text{ as } x \rightarrow 0
\]
where in this case we're interested in real values of $x$ near to
0. By the way why did I write $O(x)$ and not $O(x^2)$.

\newpage\myinput{asymptotics/another-way-to-look-at-big-O.tex}
\newpage\myinput{asymptotics/bubblesort.tex}
\newpage\myinput{asymptotics/commercial-break-review-of-inequalities.tex}
\newpage\myinput{asymptotics/bubblesort-again-simplifying-the-for-loop.tex}
\newpage\myinput{asymptotics/the-big-O-classes.tex}
\newpage\myinput{asymptotics/basic-facts-about-big-O.tex}


Look at this mess of 12 functions:
\bShell[python 1>abc.output 2>abc.output]
from plot import *
p = Plot(line_width=1, width='5in', height='4in', domain='0:3')

p.add('x**2', color='red', python=1, pin='below', pin_message='')
p.add('2*x**2 + 2', color='red', python=1, pin='below', pin_message='')
p.add('x**2 + 1', color='red', python=1, pin='below', pin_message='')
p.add('x**2 + 5*x - 5', color='red', python=1, pin='below', pin_message='')
p.add('20*(x-1)*(x-2) - 10', color='red', python=1, pin='below', pin_message='')

p.add('x**3 ', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 + 3*x**2 - 20*x - 5', color='green', python=1, pin='below', pin_message='')
p.add('4*x**3 +   x**2 - 25*x - 15', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 - 15*x**2 - 5*x + 1', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 - 7*x**2 + 5*x - 100', color='green', python=1, pin='below', pin_message='')

p.add('x**4', color='green', python=1, pin='below', pin_message='')
p.add('2*x**4 + x**2 - 20*x - 9', color='blue', python=1, pin='below', pin_message='')
p.add('x**4 +   x**3 - 25*x - 1', color='blue', python=1, pin='below', pin_message='')
p.add('x**4 - 15*x**2 - 5*x + 1', color='blue', python=1, pin='below', pin_message='')
p.add('3*x**4 - 2*x**2 - 7*x - 100', color='blue', python=1, pin='below', pin_message='')

print p
\eShell\input{abc.output}

Now if I increase the domain up to $x = 10$ we see:
\bShell[python 1>abc.output 2>abc.output]
from plot import *
p = Plot(line_width=1, width='5in', height='4in', domain='0:10')

p.add('x**2', color='red', python=1, pin='below', pin_message='')
p.add('2*x**2 + 2', color='red', python=1, pin='below', pin_message='')
p.add('x**2 + 1', color='red', python=1, pin='below', pin_message='')
p.add('x**2 + 5*x - 5', color='red', python=1, pin='below', pin_message='')
p.add('20*(x-1)*(x-2) - 10', color='red', python=1, pin='below', pin_message='')

p.add('x**3 ', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 + 3*x**2 - 20*x - 5', color='green', python=1, pin='below', pin_message='')
p.add('4*x**3 +   x**2 - 25*x - 15', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 - 15*x**2 - 5*x + 1', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 - 7*x**2 + 5*x - 100', color='green', python=1, pin='below', pin_message='')

p.add('x**4', color='green', python=1, pin='below', pin_message='')
p.add('2*x**4 + x**2 - 20*x - 9', color='blue', python=1, pin='below', pin_message='')
p.add('x**4 +   x**3 - 25*x - 1', color='blue', python=1, pin='below', pin_message='')
p.add('x**4 - 15*x**2 - 5*x + 1', color='blue', python=1, pin='below', pin_message='')
p.add('3*x**4 - 2*x**2 - 7*x - 100', color='blue', python=1, pin='below', pin_message='')

print p
\eShell\input{abc.output}

Now if I use a domain of $80 \leq x \leq 100$ we see:
\bShell[python 1>abc.output 2>abc.output]
from plot import *
p = Plot(line_width=1, width='6in', height='6in', domain='80:100')

p.add('x**2', color='red', python=1, pin='below', pin_message='')
p.add('2*x**2 + 2', color='red', python=1, pin='below', pin_message='')
p.add('x**2 + 1', color='red', python=1, pin='below', pin_message='')
p.add('x**2 + 5*x - 5', color='red', python=1, pin='below', pin_message='')
p.add('20*(x-1)*(x-2) - 10', color='red', python=1, pin='below', pin_message='')

p.add('x**3 ', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 + 3*x**2 - 20*x - 5', color='green', python=1, pin='below', pin_message='')
p.add('4*x**3 +   x**2 - 25*x - 15', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 - 15*x**2 - 5*x + 1', color='green', python=1, pin='below', pin_message='')
p.add('2*x**3 - 7*x**2 + 5*x - 100', color='green', python=1, pin='below', pin_message='')

p.add('x**4', color='green', python=1, pin='below', pin_message='')
p.add('2*x**4 + x**2 - 20*x - 9', color='blue', python=1, pin='below', pin_message='')
p.add('x**4 +   x**3 - 25*x - 1', color='blue', python=1, pin='below', pin_message='')
p.add('x**4 - 15*x**2 - 5*x + 1', color='blue', python=1, pin='below', pin_message='')
p.add('3*x**4 - 2*x**2 - 7*x - 100', color='blue', python=1, pin='below', pin_message='')

print p
\eShell\input{abc.output}



\newpage\input{asymptotics/other-types-of-asymptotic-bounds.tex}


