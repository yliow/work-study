\section{Quicksort}

{\bf PARTITION.}
There are three issues to resolve.
The first is to figure a way to not create new arrays all the time.
The other two are related to the partition procedure/strategy.
\begin{itemize}
\li How to choose the pivot. This is easy. As I've mentioned to you,
there are two standard way of choosing the pivot.
The basic quicksort picks the first value of the array.
The randomized quicksort picks a random element from the array.
Done.
\li The next is to decide where exactly to put values in the
\verb!left! of the \verb!right! chunk.
In the above long example, I form the \verb!left! chunk by 
simply scanning the given array left-to-right and put a value into
\verb!left! to the end of \verb!left!.
Same for \verb!right!.
Because I'm going to use the same array, the above
does not work.
I'll show you two ways of forming the \verb!left! and \verb!right!
pile of values using the same array.
\end{itemize}

Here's a naive way of getting an array partitioned.
Suppose we have this array:

\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[3,1,6,5,2,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}

Let \verb!x = [3,1,6,5,2,4]!
and suppose \verb!2! is the pivot.
\begin{console}[commandchars=\\\{\}]
[3,1,6,5,\underline{2},4]
\end{console}
We can do this: Swap the pivot \verb!2! and 3:
\begin{console}[commandchars=\\\{\}]
[\underline{2},1,6,5,\underline{3},4]
\end{console}
It does make sure that \verb!3! is on the \verb!right! part of the
array.
However this is not going to work because then, I will
need to make sure that I don't have to work with
\verb!3! anymore.


{\bf PARTITION METHOD 1.}

Basically I break up the array into three parts:
the pivot \verb!p!, 
the \verb!left! chunk, the chunk of \verb!TODO!, and the \verb!right!
chunk:


\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['p'], numleft*[''], numtodo*[''], numright*['']],
                   pipeheight=pipeheight,
                   chunklabels=['','left','TODO', 'right'],
)
\end{python}
\end{tikzpicture}
\end{center}


Going back to our example,
when I look at \verb!1!, the next value in my \verb!TODO! list,
I put that into the \verb!left! pile
like this:
\begin{console}[commandchars=\\\{\}]
[2|1|6,5,4|3]
\end{console}
Then \verb!6! goes into the \verb!right! pile:
\begin{console}[commandchars=\\\{\}]
[2|1|4,5|6,3]
\end{console}
and \verb!4! into the \verb!right! pile:
\begin{console}[commandchars=\\\{\}]
[2|1|5|4,6,3]
\end{console}
and finally \verb!5! into the \verb!right! pile:
\begin{console}[commandchars=\\\{\}]
[2|1||5,4,6,3]
\end{console}
And now I'm done since the \verb!TODO! pile is empty.

The point is to continually take a value in the \verb!TODO! pile
and put that into the \verb!left!
pile or the \verb!right! pile.
In order for me to keep track of where exactly in the 
\verb!left! or \verb!right! pile, note that I'm using the
right side of the \verb!left! pile and 
the left side of the \verb!right! pile.

To keep track of the \verb!left!, \verb!TODO!, and \verb!right! piles,
I need some variables to mark the index positions:

\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
numleft = 4
numtodo = 6
numright = 4
pipewidth=3
pipeheight=1

print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['p'], numleft*[''], numtodo*[''], numright*['']],
                   pipeheight=pipeheight,
                   chunklabels=['','left','TODO', 'right'],
                   celllabels = [('lhead', 1, -1),
                                 ('ltail', 4, -1),
                                 ('thead', 5, -2),
                                 ('ttail', 10, -2),
                                 ('rhead', 11, -1),
                                 ('rtail', 14, -1),
                                ]
)
\end{python}
\end{tikzpicture}
\end{center}


Well ... that's kind of an overkill.
For instance \verb!thead! is just one more than \verb!ltail!.
So I just need one of them and not both.
Also, \verb!rhead! is just one more than \verb!ttail!.
Let me just simplify it to this:

\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
numleft = 4
numtodo = 6
numright = 4
pipewidth=3
pipeheight=1
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['p'], numleft*[''], numtodo*[''], numright*['']],
                   pipeheight=pipeheight,
                   chunklabels=['','left','TODO', 'right'],
                   celllabels = [('thead', 5, -1),
                                 ('ttail', 10, -1)]
                   )
\end{python}
\end{tikzpicture}
\end{center}

Let me do an example but now with 
variables \verb!thead! and \verb!ttail!.
In this example \verb!2! is the pivot.
We start with this:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[],[1,6,5,3,0,4],[]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 1, 1),
                                 ('ttail', 6, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}

We take \verb!1! out of the \verb!TODO! list and put
it into the left pile since \verb!1! $<=$ \verb!2!.
I do this by incrementing \verb!thead!.
This is the picture after putting \verb!1! into the \verb!left! pile:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1],[6,5,3,0,4],[]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 2, 1),
                                 ('ttail', 6, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}

Now for \verb!6!.
First we swap \verb!6! and \verb!4! to get \verb!6! 
{\it next} to the \verb!right!
pile:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1],[4,5,3,0,6],[]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 2, 1),
                                 ('ttail', 6, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}
and then decrement \verb!ttail!
to get \verb!6! {\it into} the \verb!right! pile:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1],[4,5,3,0],[6]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 2, 1),
                                 ('ttail', 5, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}
Notice that \verb!thead! should not be changed. (Right?)

The next value is \verb!4! which should go into the \verb!right! pile.
I swap \verb!4! and \verb!0!
and then decrement \verb!ttail!:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1],[0,5,3],[4,6]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 2, 1),
                                 ('ttail', 4, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}

The next value in the \verb!TODO! list is \verb!0! 
which should go into the \verb!left! pile since 
\verb!0! $\leq$ \verb|2|.
Again, I can do that by incrementing \verb!thead!:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1,0],[5,3],[4,6]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 3, 1),
                                 ('ttail', 4, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}

The next value to process in the \verb!TODO! list is \verb!5!.
You should know what to do to get this picture:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1,0],[3],[5,4,6]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 3, 1),
                                 ('ttail', 3, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}
Notice that at this point there's only one value left in the 
\verb!TODO! list.


After processing \verb!3!, I get this (what did I do?):
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1,0],[],[3,5,4,6]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 3, 1),
                                 ('ttail', 2, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}


Notice that \verb!ttail! has moved past \verb!thead!,
telling us that the there's nothing left in the \verb!TODO! list.


Quick recap ...
We started with this:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
pipewidth = 3
pipeheight = 1
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[],[1,6,5,3,0,4],[]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 1, 1),
                                 ('ttail', 6, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}
and ended with this:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1,0],[],[3,5,4,6]],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 3, 1),
                                 ('ttail', 2, -1)],
                   )
\end{python}
\end{tikzpicture}
\end{center}
the \verb!TODO! list is empty, 
the \verb!left! pile has values $\leq$ \verb!2!, and the 
\verb!right! pile has value $>$ \verb!2!.

Remember that we want the pivot in the 
middle,
with \verb!left! chunk on the left of the pivot
and the \verb!right! chunk on the right of the pivot.

No big deal. 
We just swap the pivot with the {\it rightmost} value in the \verb!left!
pile:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[2],[1,0],[],[3,5,4,6]],
                   pipeheight=pipeheight,
                   swaps = [(0,2)],
                   )
\end{python}
\end{tikzpicture}
\end{center}
to {\it finally} get this with the pivot in the middel:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[0,1],[2],[3,5,4,6]],
                   pipeheight=pipeheight,
                   chunklabels=['left', '', 'right'],
                   )
\end{python}
\end{tikzpicture}
\end{center}
Note that if the \verb!left! pile is empty, then 
there's no one to swap the pivot with!!!
But hang on there ... that means that the pivot is in the correct place
since all other values are in the \verb!right! pile.
Correct?

Obviously the above works and can be translated into an algorithm.
But the crucial point is this ...

The above partition strategy does not use any extra array.
It operates on the given array itself, i.e., it operates on
the array inplace.
I'll come back to this crucial point.

Now what if I the pivot is not the first element of the array?
For instance what if I use randomized quicksort?
Or say, just for kicks, I want to always choose the last element in the 
array as pivot.
In that case the pivot need not be the first value.
Again ... no sweat, just do a swap with the first element
of the array to put the pivot in front of everyone.

I'll come back to the \lq\lq inplace'ness'' of the partition
strategy.
Right now here are some exercises ...

\begin{ex}
Perform the above process on this array where 
the first value is the pivot:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[3],[1,2,3,4,5],[],],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 1, 1),
                                 ('ttail', 5, -1),
                                 ],
                   )
\end{python}
\end{tikzpicture}
\end{center}
\end{ex}

\begin{ex}
Perform the above process on this array where 
the first value is the pivot:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[1],[1,2,3,4,5],[],],
                   pipeheight=pipeheight,
                   celllabels = [('thead', 1, 1),
                                 ('ttail', 5, -1),
                                 ],
                   )
\end{python}
\end{tikzpicture}
\end{center}
\end{ex}


\begin{ex}
Perform the above process on this array where 
the first value is the pivot:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[6,1,2,3,4,5]],
                   pipeheight=pipeheight,
                   )
\end{python}
\end{tikzpicture}
\end{center}
\end{ex}


\begin{ex}
Create an example where the \verb!thead! moves past \verb!ttail!
instead of \verb!ttail! moving past \verb!thead!.
\qed
\end{ex}


\begin{ex}
Perform the above process on this array where 
you always choose the {\it last} value in an array as
pivot.
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth,
                   cellheight=cellheight,
                   arr=[[6,1,2,3,4,5]],
                   pipeheight=pipeheight,
                   )
\end{python}
\end{tikzpicture}
\end{center}
\end{ex}

\begin{ex}
Note that in the last step in the above partition process,
the pivot moves to the rightmost of the \verb!left! pile.
(a) Can the pivot move to the leftmost of the \verb!right! pile?
(b) How must the above partition process be modified
so that moving the pivot to the leftmost of the \verb!right! pile?
\qed
\end{ex}


And why do we want the pivot in front?
So that the algorithm is easier:
The \verb!left! chunk, \verb!right! chunk, and
values unprocessed are together
and as I loop over the unprocessed values, I don't
have to remember to skip over the pivot.
In general, if you think about it, another good place to put
a pivot is at the end instead of in front.

The next value to process is \verb!x[left]!.
Note that if \verb!x[left] <= p! (\verb!p! is the pivot),
we put \verb!x[left]! into the left chunk.
This is just incrementing \verb!left!.
\begin{console}[commandchars=\\\{\}]
          current function call works on this
              <==========================>
                  left     TODO    right
[.............|p|........|.......|.......|.............]
               ^          ^     ^       ^
               |         /      |       |
               |        left  right     |
             start                     end 
\end{console}
Otherwise I have to move 
\verb!x[left]! to the \verb!right! pile.
I'll just swap \verb!x[left]! and \verb!x[right]!.
I also need to decrement \verb!right!.
Note a very important point:
\verb!left! should not change.
\begin{console}
          current function call works on this
              <==========================>
                  left     TODO    right
[.............|p|.......|......|........|.............]
               ^         ^    ^        ^
               |         |     \       |
               |        left  right    |
             start                    end 
\end{console}

(By the way, note that the \verb!TODO! list shrinks by 1 in each iteraction.)

Here's \verb!partition!:
\begin{console}
FUNCTION partition(x, start, end):
i = choose pivot index in start,...,end
swap x[i] and x[start]
left = start + 1
right = end
while left <= right:
    if x[left] <= pivot:
        left = left + 1
    else:
        swap x[left], x[right]
        right = right - 1
swap x[0] and x[left]
return left
\end{console}

\begin{ex}
In the previous partition strategy, 
I break up the array into \verb!left!, \verb!TODO!, and \verb!right! piles.
Design a partition algorithm where the array is broken up into
\verb!left!, \verb!right!, \verb!TODO! piles instead:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from latex_ds import *
cellwidth = 0.6
cellheight = 0.6
numleft = 4
numtodo = 6
numright = 4
pipewidth=3
pipeheight=1

print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['p'], numleft*[''], numright*[''], numtodo*['']],
                   pipeheight=pipeheight,
                   chunklabels=['','left','right', 'TODO'],
)
\end{python}
\end{tikzpicture}
\end{center}
(\verb!p! is the pivot.)
Test your pseudocode thoroughly.
\end{ex}


{\bf INPLACE}

Now that I've given you one partition strategy, let's talk about
sorting inplace, 
i.e., without creating extra arrays.
The idea is just like mergesort.
In fact when you look at the first partition strategy I've shown,
you notice that I did not use any extra arrays.
Therefore if you have an inplace partition strategy, you apply it to
the whole array, and recursively on the \verb!left! and \verb!right! piles.
For instance if you have an array of integers values 0..100:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[20*['']],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
and you apply a partition strategy to get this, say with a pivot of 
\verb!42!:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[7*[''], ['42'], 12*['']],
                   chunklabels=['left','','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
You of course also apply the partition strategy to the \verb!left!,
say with a pivot of \verb!23!:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[3*[''],['23'],3*[''], ['42'], 12*['']],
                   chunklabels=['left','','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
Etc.
Get it?

\begin{ex}
Using partition strategy 1 with basic quicksort
(i.e., always choosing the first value in the array you're working on), 
perform quicksort on the following array
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[3,2,1,3,4,9,6,7,0,2,4,8]],
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[],[2,1,3,4,9,6,7,0,2,4,8], [],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2],[1,3,4,9,6,7,0,2,4,8], [],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1],[3,4,9,6,7,0,2,4,8], [],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3],[4,9,6,7,0,2,4,8], [],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3],[8,9,6,7,0,2,4], [4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3],[9,6,7,0,2,4], [8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3],[6,7,0,2,4], [9,8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3],[7,0,2,4], [6,9,8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3],[0,2,4], [7,6,9,8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3,0],[2,4], [7,6,9,8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3,0,2],[4], [7,6,9,8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[['3'],[2,1,3,0,2],[], [4,7,6,9,8,4],],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
and swapping the pivot \verb!3! with the rightmost value in the \verb!left!
pile:
\begin{center}
(1)\\
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[2,1,3,0,2],[3], [4,7,6,9,8,4],],
                   chunklabels=['left','pivot','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
Now I perform partitioning on the {\it above} \verb!left! pile:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[2],[],[1,3,0,2],[],[3,4,7,6,9,8,4]],
                   chunklabels=['','left','TODO','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[2],[1],[3,0,2],[],[3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[2],[1],[2,0],[3],[3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[2],[1,2],[0],[3],[3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[2],[1,2,0],[],[3],[3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
and swapping in the pivot:
\begin{center}
(2)\\
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0,1,2],[2],[3],[3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
The \verb!left! pile is \verb![0,1,2]!, the pivot is \verb!2!, and
the \verb!right! pile is \verb![3]!.
Now I partition the above \verb!left! pile using the first element
\verb!0! as pivot.
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0],[],[1,2],[],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0],[],[2],[1],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0],[],[2,1],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
Swapping with the \verb!left! pile is not necessary since the 
\verb!left! pile is empty.
We get
\begin{center}
(3)\\
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[],[0],[2,1],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
Note that there the \verb!left! pile to the left of the pivot \verb!0!
is empty.
Now we execute the partitioning on the \verb!right! pile 
of the pivot \verb!0!,
i.e., on \verb![2,1]!.
The first value \verb!2! is the pivot in this case.
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0],[2],[],[1],[],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0],[2],[1],[],[],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
Swapping the pivot \verb!2! 
with the rightmost value in the \verb!left! pile,
i.e., \verb!1!, we get
\begin{center}
(4)\\
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0],[1],[2],[],[],[2,3,3,4,7,6,9,8,4]],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
I'm now done paritioning the \verb!left! and \verb!right! pile
from (3).
Note that (3) was the partition of the \verb!left! pile from (2).
So I partition the \verb!right! pile at (2).
But this \verb!right! pile is \verb![3]! which has size 1, i.e., 
this is the base case, so nothing is done.
So I'm doing to return from (2) to (1).
Recall that (2) is partitioning the \verb!left! of (1).
So now I need to partition the right of (1).
At (1), the array now looks like this, with the \verb!left! pile 
completely sorted:
\begin{center}
(1)\\
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=cellwidth, 
                   cellheight=cellheight,
                   arr=[[0,1,2,2,3],[3], [4,7,6,9,8,4],],
                   chunklabels=['left','pivot','right'],
                   pipeheight=pipeheight,
)
\end{python}
\end{tikzpicture}
\end{center}
I'll leave it to you to finish the quicksort.
\qed
\end{ex}




At this point, it's clear that the inplace
strategy works, executing a partition strategy a part of the array.
Of course to write a proper algorithm, we will need to specify
{\it which} part of the array a recursive call of the quicksort
is support to work on.
That's easy. For our recursive function call t,
we just need to carry two index variables
\verb!start! and \verb!end! that tells which the starting
index and ending index that particular quicksort invocation
is suppose to work on.
So during an invocation of quicksort, the picture is something like this:
\begin{center}
\begin{tikzpicture}[>=triangle 60]
\begin{python}
from quicksort_init import *
print chunkedarray(cellwidth=0.4, 
                   cellheight=0.4,
                   pipeheight=0.8,
                   arr=[8*[''], ['p'],3*[''],6*[''],4*[''],10*['']],
                   chunklabels=['', '', 'left', 'TODO', 'right'],
                   celllabels = [('start', 8, -2),
                                 ('end',   21, -2),
                                 ('thead', 12, -1),
                                 ('ttail', 17, -1),
                                ]
)
\end{python}
\end{tikzpicture}
\end{center}


Here's the general (inplace) quicksort algorithm:
\begin{console}
FUNCTION quicksort(x, start=0, end=len(x)-1):
if start <= end:
    pivot_index = partition(x, start, end)
    quicksort(x, start, pivot_index - 1)
    quicksort(x, pivot_index + 1, end)
\end{console}

Of course the most important thing is the \verb!partition!
function which include the selection of the pivot and the
organization of \verb!left! and \verb!right!.

{\bf SECOND (STANDARD) PARTITION METHOD: PIVOT BEHIND.}

Here's the standard partition method that you will find in books.
The pivot is placed at the end of the array
\begin{console}[commandchars=\\\{\}]
          current function call works on this
              <==========================>
                left   right    TODO
[.............|......|.......|.........|p|.............]
               ^    ^       ^           ^
               |    |       |           |
               |  left    right         |
             start                     end 
\end{console}
In this method, the \verb!left! and \verb!right! chunks
are next to each other and the pivot is placed at the end of the array.
Here's how to process in the first value in the TODO list.
If the value should go into the \verb!right! chunk, then it's already there.
I just have to increment a variable that track of the end of the 
\verb!right! chunk:
\begin{console}[commandchars=\\\{\}]
          current function call works on this
              <==========================>
                left   right    TODO
[.............|......|.........|.......|p|.............]
               ^    ^         ^           ^
               |    |        /          |
               |  left    right         |
             start                     end 
\end{console}
If the value should go into the \verb!left! chunk, then I need to 
move it in the \verb!left! chunk as follows: I swap this value
with the rightmost value of the \verb!left! chunk:
\begin{console}[commandchars=\\\{\}]
          current function call works on this
              <==========================>
                left   right    TODO

                      +-------+
                      |       |
                      v       v
[.............|......|.......|.........|p|.............]
               ^    ^       ^           ^
               |    |       |           |
               |  left    right         |
             start                     end 
\end{console}
and increment \verb!left! so that this new value goes into the 
\verb!left! chunk. Of course I have increment \verb!right! as well.
Of course I have to increment the variable that keeps track of the 
left chunk.
\begin{console}[commandchars=\\\{\}]
          current function call works on this
              <==========================>
                left   right    TODO
[.............|.......|.......|.........|p|.............]
               ^     ^       ^           ^
               |    /       /            |
               |  left    right          |
             start                      end 
\end{console}





{\bf PARTITION WITH PIVOT IN THE MIDDLE.}

Now I want to design a a partition function that lets the pivot
stays in its original position as long as possible.
In particular this is helpful when the array is almost sorted.
Furthermore, I want the partition function to work inplace.
\begin{console}
         left                    right
[......|......|......[p]......|.......|......]
               l             r
\end{console}
Say we pick the middle entry as the pivot.
Keep incrementing \verb!l! until you reach the pivot.
Keep decrementing \verb!r! until you reach the pivot.

???

