\section{Quicksort: Runtime Analysis}

Here's the runtime analysis of quicksort.
Suppose for an array of size $n$, I pick $k$ for the pivot index
(of course $0 \leq k \leq n - 1$.)
Therefore the size of \verb!left! is $k$ and the size of 
\verb!right! is $n - k - 1$.
Therefore
\[
T_{\operatorname{QUICKSORT}}(n)
=
T_{\operatorname{PARTITION}}(n)
+ T_{\operatorname{QUICKSORT}}(k)
+ T_{\operatorname{QUICKSORT}}(n - k - 1)
\]
(ignoring the base case.)
The problem of course is that we do not know
the value of $k$.
Supppose we assume that $k$ is approximately
$n/2$ (i.e., either 
$\floor{n/2}$ 
or 
$\ceiling{n/2}$).
Then ignoring floor and ceiling the 
runtime is of the form
\[
T_{\operatorname{QUICKSORT}}(n)
=
2T_{\operatorname{QUICKSORT}}(n/2)
+ T_{\operatorname{PARTITION}}(n)
\]
(again ignore the base case.)
Clearly $T_{\operatorname{PARTITION}}(n) = O(n)$.
Hence the runtime of quicksort is of the form
\[
T(n)
=
\begin{cases}
A & \text{if $n = 0, 1$} \\
2T(n/2) + Bn + C & \text{otherwise}
\end{cases}
\]



\begin{ex}
What will happen if you're given an array of ascending values
(example: \verb![1,2,3,4,5,6,7,8,9]!)
and the median 
(example: \verb!5!)
is chosen as the pivot, what will each partition 
method to do the 
array?
\end{ex}

\begin{ex}
Suppose you know that an array is almost sorted.
How would you pick the pivot?
\end{ex}


\begin{ex}
Suppose an array contains long chains of ascending values.
How you would modify quicksort so that you take advantage of this
fact.
\end{ex}




\begin{ex}
Design a version of the quicksort so that during partition phase,
instead of have just a \verb!left! chunk and a \verb!right! chunk,
you also have a chunk for all pivot values, i.e.,
if the pivot appears three times, all these three values go into 
this \verb!pivot! chunk.
\qed
\end{ex}

