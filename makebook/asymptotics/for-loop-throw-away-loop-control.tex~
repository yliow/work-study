\section{Bubblesort again: Throwing Away The Loop Control}

One last trick that simplifies the computation of the runtime.
Recall that the runtime for the for-loop
\begin{Verbatim}[frame=single]
for i = 1, ..., n:
    [body(i)]
\end{Verbatim}
is this
\[
T(n) = \sum_{i=1}^n \text{[Time to run body(i)]} + An + B
\]
Recall that the time
\[
An + B
\]
is due to the time taken to perform the loop control on
the execution of the body of the for-loop
and the actual total time to execute the body is
\[
\sum_{i=1}^n \text{[Time to run body(i)]}
\]

Notice that when you compute the big-O of the summation
\[
\sum_{i=1}^n \text{[Time to run body(i)]}
\]
the runtime of the body(i) is at least constant time and 
\[
\sum_{i=1}^n 1 = n
\]
And the big-O of $An + B$ is $n$.
Therefore in terms of big-O computation of $T(n)$,
\[
\sum_{i=1}^n \text{[Time to run body(i)]}
\]
would already include the big-O of $An + B$.
Therefore, $An + B$ is redundant.
(I fudged on some details here, but the idea is correct.)

The only time when the above is not quite right is when the runtime
of body(i) is 0 ... which should {\it not} happen if you're {\it not} writing
some ridiculous and useless code like this (in C++ notation):
\begin{Verbatim}[frame=single]
for (int i = 0; i < n; i++)
{
}
\end{Verbatim}
I will assume that such bizarre cases will not happen from now on.
If so, I conclude the following ...

The runtime for the for-loop
\begin{Verbatim}[frame=single]
for i = 1, ..., n:
    [body(i)]
\end{Verbatim}
is this
\[
T(n) = \sum_{i=1}^n \text{[Time to run body(i)]} + An + B
\]
and the {\it big-O} of $T(n)$ is
\[
T(n) = 
O
\left(
\sum_{i=1}^n \text{[Time to run body(i)]}
\right)
\]

So here's the last version of the runtime computation of the 
worse case of the bubblesort ...

\newpage

\begin{eg}
Compute the big-O of the runtime of the bubblesort:
\begin{Verbatim}[frame=single]
for i = n - 2, ..., 0:
    for j = 0, ..., i:
        if a[i] > a[i + 1]:
            t = a[i]
            a[i] = a[i + 1]
            a[i + 1] = t
\end{Verbatim}
\end{eg}

{\it Solution.}
The runtime of the body of the inner loop is constant time, 
say $A = O(1)$.
Therefore the runtime of the inner loop, $U(i)$, is
\[
U(i) = O \left( \sum_{j=0}^i A \right) = O \left( \sum_{j=0}^i 1 \right) = O(i)
\]
For the whole algorithm, the runtime $T(n)$ is:
\[
T(n) 
= O \left( \sum_{i=0}^{n-2} U(i) \right) 
= O \left( \sum_{i=0}^{n-2} i \right) 
= O \left( n^2 \right)
\]
\qed

\newpage

[EXERICSES]

[PUT THIS SOMEWHERE ELSE]
\begin{ex} Show that
$\sum_{i = 1}^n \ln i = O(n \ln n)$
\qed
\end{ex}

