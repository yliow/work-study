\section{Bubblesort: Double for-loops}


Here's bubblesort. Suppose $\texttt{a[i]}$ $(i=0,
$\ldots$, n-1)$ is an array of numbers (integers or floats or
doubles, we don't care). The following sorts $\texttt{a[i]}$
$(i=0,\ldots,n-1)$ in ascending order:
\begin{Verbatim}[frame=single]
for i = n - 2,...,0:
    for j = 0 to i:
        if a[j] > a[j + 1]:
            t = a[j]
            a[j] = a[j + 1]
            a[j + 1] = t
\end{Verbatim}


Let's analyze the time complexity of the above algorithm.

\begin{Verbatim}[frame=single]
          i = n - 2
LOOP1:    if i == -1:
              goto ENDLOOP1

              j = 0
LOOP2:        if j > i:
                  goto ENDLOOP2
              if a[j] > a[j + 1]:
                  t = a[j]
                  a[j] = a[j + 1]
                  a[j + 1] = t
              j = j + 1
              goto LOOP2

ENDLOOP2: i = i - 1
          goto LOOP1

ENDLOOP1:
\end{Verbatim}

With time for each statement:
\begin{Verbatim}[frame=single]
          i = n - 2               t1
LOOP1:    if i == -1:             t2
              goto ENDLOOP1       t3

              j = 0               t4
LOOP2:        if j > i:           t5
                  goto ENDLOOP2   t6
              if a[i] < a[j + 1]: t7
                  t = a[i]        t8
                  a[i] = a[j]     t9
                  a[j] = t        t10
              j = j + 1           t11
              goto LOOP2          t12

ENDLOOP2: i = i - 1               t13
          goto LOOP1              t14

ENDLOOP1:
\end{Verbatim}

Including the number of times each statement is executed,
the worse case runtime is:
{\footnotesize
\begin{Verbatim}[frame=single]
          i = n - 2               t1   1
LOOP1:    if i == -1:             t2   n
              goto ENDLOOP1       t3   1

              j = 0               t4   1+...+1     = n-1
LOOP2:        if j > i:           t5   n+...+2     = (n-1)(n+2)/2
                  goto ENDLOOP2   t6   1+...+1     = n-1
              if a[i] < a[j + 1]: t7   (n-1)+...+1 = (n-1)n/2
                  t = a[i]        t8   (n-1)+...+1 = (n-1)n/2
                  a[i] = a[j]     t9   (n-1)+...+1 = (n-1)n/2
                  a[j] = t        t10  (n-1)+...+1 = (n-1)n/2
              j = j + 1           t11  (n-1)+...+1 = (n-1)n/2
              goto LOOP2          t12  (n-1)+...+1 = (n-1)n/2

ENDLOOP2: i = i - 1               t13  n-1
          goto LOOP1              t14  n-1

ENDLOOP1:
\end{Verbatim}
}

For the case when $i = n - 2$, the inner loop 
will have $j$ running from $0$ to $i + 1 = n - 1$,
with the body running for $j = 0, ..., i = n - 2$ ($n - 1$ times) and 
exiting when $j = i + 1 = n - 1$ (once):
{\footnotesize
\begin{Verbatim}[frame=single]
              j = 0               t4   1
LOOP2:        if j > i:           t5   n
                  goto ENDLOOP2   t6   1
              if a[i] < a[j + 1]: t7   (n-1)
                  t = a[i]        t8   (n-1)
                  a[i] = a[j]     t9   (n-1)
                  a[j] = t        t10  (n-1)
              j = j + 1           t11  (n-1)
              goto LOOP2          t12  (n-1)

ENDLOOPS:
\end{Verbatim}
}
All other cases of $i$ values are similar.

So the worse case runtime is
\begin{align*}
f(n) = \
& (t_1 + t_3) \\
&+ n \cdot t_2 \\
&+ (n-1) \cdot (t_4 + t_6 + t_{13} + t_{14}) \\
&+ \frac{(n-1)n}{2} \cdot (t_{7} + t_{8} + t_{9} + t_{10} + t_{11} + t_{12}) \\
&+ \frac{(n-1)(n+2)}{2} \cdot t_5
\end{align*}
Rewriting this as a polynomial in $n$, we get
\begin{align*}
f(n) = \
&\frac{t_5 + t_7 + t_8 + t_9 + t_{10} + t_{11} + t_{12}}{2} \cdot  n^2 \\
&+ \left(
   t_2 + t_4 + t_6 + t_{13} + t_{14}
   - \frac{t_7 + t_8 + t_9 + t_{10} + t_{11} + t_{12} + t_5}{2}
   \right) \cdot n  \\
&+ \left(
   t_1 + t_3 - t_4 - t_6 - t_{13} - t_{14}- 2\cdot t_5 
   \right)
\end{align*}
In other words the worse case runtime is of the form
\[
f(n) = An^2 + Bn + C
\]
where $A,B,C$ are constants.
And of course in this case
\[
f(n) = O(n^2)
\]

For the best case:
{\footnotesize
\begin{Verbatim}[frame=single]
          i = n - 2               t1   1
LOOP1:    if i == -1:             t2   n
              goto ENDLOOP1       t3   1

              j = 0               t4   1+...+1     = n-1
LOOP2:        if j > i:           t5   n+...+2     = (n-1)(n+2)/2
                  goto ENDLOOP2   t6   1+...+1     = n-1
              if a[i] < a[j + 1]: t7   (n-1)+...+1 = (n-1)n/2
                  t = a[i]        t8   0
                  a[i] = a[j]     t9   0
                  a[j] = t        t10  0
              j = j + 1           t11  (n-1)+...+1 = (n-1)n/2
              goto LOOP2          t12  (n-1)+...+1 = (n-1)n/2

ENDLOOP2: i = i - 1               t13  n-1
          goto LOOP1              t14  n-1

ENDLOOP1:
\end{Verbatim}
}
I'll leave it to you to check that the best case runtime is also 
$O(n^2)$.


\begin{ex}
The following is a variant of the bubblesort:
\begin{Verbatim}[frame=single]
for i = n - 2, ..., 0:
    swap = FALSE
    for j = 0 to i
        if a[i] < a[i + 1]:
            swap = true
            t = a[i]
            a[i] = a[j]
            a[j] = t
    if !swap:
        break
\end{Verbatim}
The point is that if there are no swaps in a pass, then
the array is already sorted.
The boolean variable \verb!swap! is used to remember if swaps
occurred during a pass.
Therefore if \verb!swap! is FALSE after a pass, the algorithm stops.
\begin{itemize}
\item[(a)] Compute the big-O of the best runtime of the above algorithm.
[Obviously the best case occurs when \verb!swap! is FALSE at the end of
the first pass.]
\item[(b)] Compute the big-O of the worse runtime of the above algorithm.
\end{itemize}
\qed
\end{ex}


\begin{ex}
The following algorithm
computes the sum of values in a 2D array \verb!x! of size 
$n$-by-$n$
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = 0, 1, 2, ..., n - 1:
        s = s + x[i][j]
\end{Verbatim}
Compute the big-O of the runtime of the above algorithm.
[NOTE: The best and worse runtimes are the same. Correct?]
\qed
\end{ex}

\begin{ex}
The following algorithm
computes the sum of upper triangular 
values in a 2D array $x$ of size 
$n$-by-$n$:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = i, i + 1, i + 2, ..., n - 1:
        s = s + x[i][j]
\end{Verbatim}
Compute the big-O of the runtime of the above algorithm.
\qed
\end{ex}

\begin{ex}
Here's another algorithm:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = 0, 1, 2:
        s = s + x[i][j]
\end{Verbatim}
Compute the big-O of the runtime of this algorithm.
\qed
\end{ex}

\begin{ex}
Here's another algorithm:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = 0, 1, 2, ..., n - 1:
        for k = 0, 1, 2, ..., n - 1:
            s = s + x[i][j] + k
\end{Verbatim}
Compute the big-O of the runtime of this algorithm.
\qed
\end{ex}


\begin{ex}
Here's another algorithm:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = 0, 1, 2, ..., i:
        for k = j, j + 1, ..., n - 1:
            s = s + x[i][j] + k
\end{Verbatim}
Compute the big-O of the runtime of this algorithm.
\qed
\end{ex}


\begin{ex}
Yet another algorithm:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = 0, 1, 2, 3::
        for k = i, i + 1, ..., n - 1:
            s = s + x[i][k] * j
\end{Verbatim}
Compute the big-O of the runtime of this algorithm.
\qed
\end{ex}

\begin{ex}
Yet another algorithm:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., n - 1:
    for j = n/10, ..., n/2:
        for k = i, i + 1, ..., n - 1:
            s = s + x[i][k] * j
\end{Verbatim}
Compute the big-O of the runtime of this algorithm.
\qed
\end{ex}

\begin{ex}
Yet another algorithm:
\begin{Verbatim}[frame=single]
s = 0
for i = 0, 1, 2, ..., (n - 1)/2:
    for j = 0, 1, 2, ..., n/4:
        for k = i, i + 1, ..., n - 1:
            s = s + x[i][k] * j
\end{Verbatim}
Compute the big-O of the runtime of this algorithm.
\qed
\end{ex}

