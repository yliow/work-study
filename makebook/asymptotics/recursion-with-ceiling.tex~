\section{Recursion with Ceilings}

In the previous I looked at a recursion with  ceiling:
\[
T(n) =
\begin{cases}
A                        & \text{if $n = 0, 1$} \\
2T(\floor{n/2}) + Bn + C & \text{otherwise}
\end{cases} 
\]
What about ceilings?
Let's look at this recursion:
\[
U(n) = 
\begin{cases}
A                          & \text{if $n = 0, 1$} \\
2U(\ceiling{n/2}) + Bn + C & \text{otherwise}
\end{cases}
\]
Let's make a plot.
The blue graph is the graph of $y = U(n)$
while the green is $y = g(n) = n + n \log_2(n) + \log_2(n)$.

\begin{python}
from plot import *
N = 33
STEP = 1
table = {}

def ceiling(x):
    f = x - int(x)
    if f == 0: return int(x)
    else: return int(x) + 1

def t(n):
    n = int(n)
    if n <= 1: return 1
    else:
        if not table.has_key(n):
            table[n] = 2 * t(ceiling(n/2.0)) + n + 1
        return table[n]
'''
def s(x):
    x = float(x)
    if x <= 1: return 1
    else:
        return 2 * s(x/2.0) + x + 1
'''

p = Plot(domain="0:%s" % N)

points = [(n, t(n)) for n in range(0, N + 1, STEP)]
p.add(points, style='step', color='blue', python=1)

#points = [(n/50.0, s(n/50.0)) for n in range(0, N*50 + 1, STEP)]
#p.add(points, style='step', color='red', python=1)


p.add("x + x*log(x, 2) + (x - 1)", color='green', python=1, num_points=100)
print p

\end{python}

Hmmm .... it looks like in this case $U(n)$ actually beats
$g(n)$.
Of course it could be the case the a constant multiple of $g(n)$
might beat $T(n)$ for all sufficiently large $n$.

Let's use recurrence relation to get rid of the recurrence:
\begin{align*}
T(n) 
&= 2T(\ceiling{n/2}) + Bn + C \\
&= 2(
     2T(
        \ceiling{ 
         \ceiling{n/2} / 2 
       }
      ) 
     + B(\ceiling{n/2}) + C
    ) 
   + Bn + C \\
&= 2^2T(
        \ceiling{ 
         \ceiling{n
         /2} 
        /2}
      ) 
     + (n + 2\ceiling{n/2})B + (2 + 1)C
    \\
&= 2^2
   (2T(
        \ceiling{
         \ceiling{ 
          \ceiling{n
          /2} 
         /2}
        /2}
      )
    + B(        
        \ceiling{ 
         \ceiling{n
         /2} 
        /2}
      )
    + C
   ) 
     + (n + 2\ceiling{n/2})B + (2 + 1)C
    \\
&= 2^3
   T(
        \ceiling{
         \ceiling{ 
          \ceiling{n
          /2} 
         /2}
        /2}
      )
    +         
       (n 
        + 2\ceiling{n/2}
        +
        2^2
        \ceiling{ 
         \ceiling{n
         /2} 
        /2}
       )B 
     + (2^2 + 2 + 1)C
\end{align*}
To make things neat: write
\[
f(n) = \ceiling{n/2}
\]
and $f^{(0)}(n) = n$,
$f^{(1)}(n) = f(n)$ and $f^{(i+1)}(n) = f(f^{(i)}(n))$. 
The above gives us
\begin{align*}
T(n) 
&= 2^d T(1) \\
&\hspace{0.5cm} + (2^0f^{(0)}(n) + 2^1f^{(1)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n))B \\
&\hspace{0.5cm} + (2^{d-1} + \cdots + 2 + 1)C \\
&= 2^d T(1) \\
&\hspace{0.5cm} + (2^0f^{(0)}(n) + 2^1f^{(1)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n))B \\
&\hspace{0.5cm} + (2^d - 1)C
\end{align*}
Of course $d$ is the number of times I have to use the recurrence relation
to get to $T(1)$ and it definitely depends on $n$.
In other words $d$ is the smallest positive integer such that
\[
f^{(d)}(n) = 1
\]

So the critical mission now is to answer the following question:
\begin{itemize}
\li Given a positive integer $n$, 
what is the smallest positive $d$ such that $f^{(d)}(n) = 1$?
\li Once we have $d$, what is the value of 
\[
2^0f^{(0)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n)  
\]
\end{itemize}

Note that if we can't find exact values, then some upper bound might be good
enough.

There's one other thing that is really helpful in our context:
If $x$ is a real number and $k,\ell$ are positive integers, then
\[
\ceiling{(x/k)/\ell}
=
\ceiling{x / (k \ell)}
\]
This means that in
\begin{align*}
T(n) 
&= 2^d T(1) \\
&\hspace{0.5cm} + (f^{(0)}(n) + f^{(1)}(n) + \cdots + f^{(d-1)}(n))B \\
&\hspace{0.5cm} + (2^d - 1)C
\end{align*}
The expressions $f^{(i)}(n)$ instead of being this monter
\[
\ceiling{
\cdots
\ceiling{
\ceiling{
\ceiling{
n/2
}/2
}/2
}/2
\cdots
/2}
\]
is really just this:
\[
\ceiling{n/2^i}
\]
Woohoo!
So 
\[
f^{(d)}(n) = 1
\]
is the same as
\[
\ceiling{n/2^d} = 1
\]
Now if you write $n$ as a binary number
\[
n = c_e2^e + \cdots + c_02^0 = (c_e \cdots c_0)
\]
where $e + 1$ is the number of binary bits, then
\[
\ceiling{n/2^d} = 1
\]
if $d > e$.
Since $d$ is the smallest possible to satisfy the above condition,
we must have $d = e + 1$.
Therefore the smallest positive integer $d$ such that
\[
\ceiling{
    \frac{n}{2^d}
} 
= 
1
\]
is the integer which is 1 more than the binary length of $n$
(i.e. $e + 2$).
To use a more standard function instead of \lq\lq binary length of'',
I look at the $\log_2$ function.
Now if
\[
n = c_e 2^e + \cdots + c_0 2^0 \leq 2^e + \cdots + 2^0 = 2^{e+1} - 1
\]
with $c_e = 1$,
we have
\[
2^e
\leq
n = c_e 2^e + \cdots + c_0 2^0 
\leq 2^e + \cdots + 2^0 = 2^{e+1} - 1
\]
Don't forget that $d = e + 1$.
So
\[
2^{d-1}
\leq
n  
\leq 2^d - 1
\]

Now the expression for $U(n)$ contains
$2^dT(1)$ and 
$(2^d - 1)C$.
From the above
\[
(n + 1)T(1) \leq 2^dT(1) \leq 2nT(1) 
\]
Also
\[
nC \leq (2^d - 1)C \leq (2n - 1)C 
\]

Back to out $T(n)$:
\begin{align*}
T(n) 
&= 2^d T(1) \\
&\hspace{0.5cm} + (2^0f^{(0)}(n) + 2^1f^{(1)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n))B \\
&\hspace{0.5cm} + (2^d - 1)C
\end{align*}
where $d$ is (bitlength of $n$) + 1.
This becomes
\begin{align*}
T(n) 
&= 2^d T(1) \\
&\hspace{0.5cm} + (2^0f^{(0)}(n) + 2^1f^{(1)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n))B \\
&\hspace{0.5cm} + (2^d - 1)C
\end{align*}
The next thing to do is to compute
\[
(2^0f^{(0)}(n) + 2^1f^{(1)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n))
\]
Recall from above that
\[
f^{(i)}(n) = \ceiling{n/2^i}
\]
So I need to compute
\[
2^0f^{(0)}(n) + 2^1f^{(1)}(n) + \cdots + 2^{d-1}f^{(d-1)}(n))
= 
2^0\ceiling{\frac{n}{2^0}}
+ 2^1\ceiling{\frac{n}{2^1}}
+ \cdots
+ 2^{d-1}\ceiling{\frac{n}{2^{d-1}}}
\]
Well, if I write $n = (c_e \cdots c_0)_2 $,
then
\[
\ceiling{(c_e \cdots c_0)_2/2}
= \ceiling{(c_e \cdots c_1)_2 + c_0/2}
\]
So, since $c_0$ is either $0$ or $1$, of course
\[
(c_e \cdots c_1)_2
\leq
\ceiling{(c_e \cdots c_0)_2/2}
\leq (c_e \cdots c_1)_2 + 1
\]
and therefore
\[
2^1(c_e \cdots c_1)_2
\leq
2^1\ceiling{(c_e \cdots c_0)_2/2^1}
\leq 2^1(c_e \cdots c_1)_2 + 2^1
\]
Likewise
\[
2^2(c_e \cdots c_2)_2
\leq
2^2 \ceiling{(c_e \cdots c_0)_2/2^2}
\leq 2^2(c_e \cdots c_2)_2 + 2^2
\]
Etc.

We can do all the above computations down to the nitty-gritty details,
but notice that they are all pretty similar to the floor case.
Therefore if I rephrase the above to tie the above to floors,
not only can I compute the big-O of my $T(n)$, 
but at the same time I can see the connection between
this $T(n)$ with the other $T(n)$
from the previous section and I can also have a better understanding
between floors and ceilings in the recurrence relation. 
For instance the above
\[
(c_e \cdots c_1)_2
\leq
\ceiling{(c_e \cdots c_0)_2/2}
\leq (c_e \cdots c_1)_2 + 1
\]
can be rewritten as
\[
\floor{(c_e \cdots c_0)_2/2}
\leq
\ceiling{(c_e \cdots c_0)_2/2}
\leq \floor{(c_e \cdots c_0)_2/2} + 1
\]
Likewise
\[
\floor{(c_e \cdots c_0)_2/2^i}
\leq
\ceiling{(c_e \cdots c_0)_2/2^i}
\leq \floor{(c_e \cdots c_0)_2/2^i} + 1
\]
Therefore
\[
2^i\floor{(c_e \cdots c_0)_2/2^i}
\leq
2^i\ceiling{(c_e \cdots c_0)_2/2^i}
\leq 2^i\floor{(c_e \cdots c_0)_2/2^i} + 2^i
\]
i.e.,
\[
2^i\floor{n/2^i}
\leq
2^i\ceiling{n/2^i}
\leq 2^i\floor{n/2^i} + 2^i
\]
Summing frmo $i = 0$ to $d - 1$, I get
\[
\sum_{i=0}^{d-1} 2^i\floor{n/2^i}
\leq
\sum_{i=0}^{d-1} 2^i\ceiling{n/2^i}
\leq 
\sum_{i=0}^{d-1} 2^i\floor{n/2^i} + \sum_{i=0}^{d-1} 2^i
\]
i.e.,
\[
\sum_{i=0}^{d-1} 2^i\floor{n/2^i}
\leq
\sum_{i=0}^{d-1} 2^i\ceiling{n/2^i}
\leq 
\sum_{i=0}^{d-1} 2^i\floor{n/2^i} + (2^d - 1)
\]
Therefore
\begin{align*}
2^dT(1) + \sum_{i=0}^{d-1} 2^i\floor{n/2^i} + (2^d - 1)C
\leq T(n)
\leq 2^dT(1) 
     + \sum_{i=0}^{d-1} 2^i\floor{n/2^i} 
     + (2^d - 1)
     + (2^d - 1)C
\end{align*}
i.e.,
\begin{align*}
2^dU(1) + \sum_{i=0}^{d-1} 2^i\floor{n/2^i} + (2^d - 1)C
\leq U(n)
\leq 2^dU(1) 
     + \sum_{i=0}^{d-1} 2^i\floor{n/2^i} 
     + (2^d - 1)(1 + C)
\end{align*}

For the upper bound:
\[
(n+1)U(1) + ... + nC
\leq U(n)
\leq 2n U(1) 
     + \sum_{i=0}^{d-1} 2^i\floor{n/2^i} 
     + (2n - 1)(1 + C)
\]

