\section{Quicksort: \texttt{left}-\texttt{pivot}-\texttt{right}}

Now I want to design a a partition function that lets the pivot
stays in its original position as long as possible.
In particular this is helpful when the array is almost sorted.
Furthermore, I want the partition function to work inplace.
Say we pick the middle entry as the pivot.
Keep incrementing \verb!thead! until you reach the pivot and then
keep decrementing \verb!ttail! until you reach the pivot.
Note that if the array is not sorted, then the \verb!pivot! would have to move.

\begin{python}
from latextool_basic import *
p = Plot()
s = chunkedarray(cellwidth=0.4, 
                 cellheight=0.4,
                 arr=[8*[''], 3*[''],['','',''],['p'],['','',''], 4*[''],10*['']],
                 chunklabels=['', 'left', '', ('pivot',1.2), '','right'],
                 celllabels = [('start', 8, -1),
                               ('end',   21, -1),
                               ('thead', 11, -1),
                               ('ttail', 17, -1),
                              ],
)
p.add(s)
print p
\end{python}

\begin{ex}
Analyze the above version of quicksort and implement the pseudocode.
\qed
\end{ex}

\begin{ex}
Write a reasonably fast algorithm to compute the mode of an array of 
numbers.
\qed
\end{ex}
